/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/page";
exports.ids = ["app/page"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.jsx&appDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.jsx&appDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   __next_app__: () => (/* binding */ __next_app__),\n/* harmony export */   pages: () => (/* binding */ pages),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-page/module.compiled */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/module.compiled.js?91d2\");\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/client/components/error-boundary */ \"(rsc)/./node_modules/next/dist/client/components/error-boundary.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/app-render/entry-base */ \"(rsc)/./node_modules/next/dist/server/app-render/entry-base.js\");\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"tree\",\"pages\",\"GlobalError\",\"__next_app__\",\"routeModule\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nconst module0 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/not-found-error */ \"(rsc)/./node_modules/next/dist/client/components/not-found-error.js\", 23));\nconst page1 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.jsx */ \"(rsc)/./app/page.jsx\"));\nconst module2 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/layout.js */ \"(rsc)/./app/layout.js\"));\nconst module3 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/not-found-error */ \"(rsc)/./node_modules/next/dist/client/components/not-found-error.js\", 23));\nconst page4 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.jsx */ \"(rsc)/./app/page.jsx\"));\n\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n        children: ['__PAGE__', {}, {\n          page: [page4, \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\"],\n          \n        }]\n      },\n        {\n        'layout': [module2, \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\layout.js\"],\n'not-found': [module3, \"next/dist/client/components/not-found-error\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [\"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\"];\n\n\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nconst __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\n\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n        page: \"/page\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: '',\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    }\n});\n\n//# sourceMappingURL=app-page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZwYWdlJnBhZ2U9JTJGcGFnZSZhcHBQYXRocz0lMkZwYWdlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGcGFnZS5qc3gmYXBwRGlyPUMlM0ElNUNVc2VycyU1Q0pBU09OJTVDRGVza3RvcCU1Q05ldyUyMGZvbGRlciU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSkFTT04lNUNEZXNrdG9wJTVDTmV3JTIwZm9sZGVyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQkFBc0IsME5BQWdGO0FBQ3RHLG9CQUFvQix3SUFBeUY7QUFDN0csc0JBQXNCLDBJQUEwRjtBQUNoSCxzQkFBc0IsME5BQWdGO0FBQ3RHLG9CQUFvQix3SUFBeUY7QUFHM0c7QUFDc0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUN1QjtBQUM2RDtBQUNwRiw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDTyx3QkFBd0IsdUdBQWtCO0FBQ2pEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vZHVsZTAgPSAoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ub3QtZm91bmQtZXJyb3JcIik7XG5jb25zdCBwYWdlMSA9ICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXGFwcFxcXFxwYWdlLmpzeFwiKTtcbmNvbnN0IG1vZHVsZTIgPSAoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxhcHBcXFxcbGF5b3V0LmpzXCIpO1xuY29uc3QgbW9kdWxlMyA9ICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC1lcnJvclwiKTtcbmNvbnN0IHBhZ2U0ID0gKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxKQVNPTlxcXFxEZXNrdG9wXFxcXE5ldyBmb2xkZXJcXFxcYXBwXFxcXHBhZ2UuanN4XCIpO1xuaW1wb3J0IHsgQXBwUGFnZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS9tb2R1bGUuY29tcGlsZWRcIiB3aXRoIHtcbiAgICAndHVyYm9wYWNrLXRyYW5zaXRpb24nOiAnbmV4dC1zc3InXG59O1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuLy8gV2UgaW5qZWN0IHRoZSB0cmVlIGFuZCBwYWdlcyBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgdHJlZSA9IHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgJycsXG4gICAgICAgIHtcbiAgICAgICAgY2hpbGRyZW46IFsnX19QQUdFX18nLCB7fSwge1xuICAgICAgICAgIHBhZ2U6IFtwYWdlNCwgXCJDOlxcXFxVc2Vyc1xcXFxKQVNPTlxcXFxEZXNrdG9wXFxcXE5ldyBmb2xkZXJcXFxcYXBwXFxcXHBhZ2UuanN4XCJdLFxuICAgICAgICAgIFxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAnbGF5b3V0JzogW21vZHVsZTIsIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXGFwcFxcXFxsYXlvdXQuanNcIl0sXG4nbm90LWZvdW5kJzogW21vZHVsZTMsIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC1lcnJvclwiXSxcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBdXG4gICAgICB9LmNoaWxkcmVuO1xuY29uc3QgcGFnZXMgPSBbXCJDOlxcXFxVc2Vyc1xcXFxKQVNPTlxcXFxEZXNrdG9wXFxcXE5ldyBmb2xkZXJcXFxcYXBwXFxcXHBhZ2UuanN4XCJdO1xuZXhwb3J0IHsgdHJlZSwgcGFnZXMgfTtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsRXJyb3IgfSBmcm9tIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5XCI7XG5jb25zdCBfX25leHRfYXBwX3JlcXVpcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX19cbmNvbnN0IF9fbmV4dF9hcHBfbG9hZF9jaHVua19fID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKClcbmV4cG9ydCBjb25zdCBfX25leHRfYXBwX18gPSB7XG4gICAgcmVxdWlyZTogX19uZXh0X2FwcF9yZXF1aXJlX18sXG4gICAgbG9hZENodW5rOiBfX25leHRfYXBwX2xvYWRfY2h1bmtfX1xufTtcbmV4cG9ydCAqIGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2FwcC1yZW5kZXIvZW50cnktYmFzZVwiO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUGFnZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUEFHRSxcbiAgICAgICAgcGFnZTogXCIvcGFnZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJyxcbiAgICAgICAgYXBwUGF0aHM6IFtdXG4gICAgfSxcbiAgICB1c2VybGFuZDoge1xuICAgICAgICBsb2FkZXJUcmVlOiB0cmVlXG4gICAgfVxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1wYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.jsx&appDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Capp%5C%5Cpage.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Capp%5C%5Cpage.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.jsx */ \"(rsc)/./app/page.jsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q2FwcCU1QyU1Q3BhZ2UuanN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSx3SUFBeUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxhcHBcXFxccGFnZS5qc3hcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Capp%5C%5Cpage.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Capp%5C%5Cpage.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Capp%5C%5Cpage.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.jsx */ \"(ssr)/./app/page.jsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q2FwcCU1QyU1Q3BhZ2UuanN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSx3SUFBeUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxhcHBcXFxccGFnZS5qc3hcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Capp%5C%5Cpage.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-page.js */ \"(rsc)/./node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-segment.js */ \"(rsc)/./node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/error-boundary.js */ \"(rsc)/./node_modules/next/dist/client/components/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"(rsc)/./node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/not-found-boundary.js */ \"(rsc)/./node_modules/next/dist/client/components/not-found-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"(rsc)/./node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/lib/metadata/metadata-boundary.js */ \"(rsc)/./node_modules/next/dist/lib/metadata/metadata-boundary.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2NsaWVudC1wYWdlLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2NsaWVudC1zZWdtZW50LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2Vycm9yLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2xheW91dC1yb3V0ZXIuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDSkFTT04lNUMlNUNEZXNrdG9wJTVDJTVDTmV3JTIwZm9sZGVyJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNjbGllbnQlNUMlNUNjb21wb25lbnRzJTVDJTVDbm90LWZvdW5kLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDSkFTT04lNUMlNUNEZXNrdG9wJTVDJTVDTmV3JTIwZm9sZGVyJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNsaWIlNUMlNUNtZXRhZGF0YSU1QyU1Q21ldGFkYXRhLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSxvT0FBd0k7QUFDeEk7QUFDQSwwT0FBMkk7QUFDM0k7QUFDQSwwT0FBMkk7QUFDM0k7QUFDQSx3T0FBMEk7QUFDMUk7QUFDQSxrUEFBK0k7QUFDL0k7QUFDQSxzUUFBeUo7QUFDeko7QUFDQSxzT0FBeUkiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXGNsaWVudC1wYWdlLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxKQVNPTlxcXFxEZXNrdG9wXFxcXE5ldyBmb2xkZXJcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZGlzdFxcXFxjbGllbnRcXFxcY29tcG9uZW50c1xcXFxjbGllbnQtc2VnbWVudC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxcZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXGxheW91dC1yb3V0ZXIuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXG5vdC1mb3VuZC1ib3VuZGFyeS5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxccmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcbGliXFxcXG1ldGFkYXRhXFxcXG1ldGFkYXRhLWJvdW5kYXJ5LmpzXCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-page.js */ \"(ssr)/./node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-segment.js */ \"(ssr)/./node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/error-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"(ssr)/./node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/not-found-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/not-found-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"(ssr)/./node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/lib/metadata/metadata-boundary.js */ \"(ssr)/./node_modules/next/dist/lib/metadata/metadata-boundary.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2NsaWVudC1wYWdlLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2NsaWVudC1zZWdtZW50LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2Vycm9yLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2xheW91dC1yb3V0ZXIuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDSkFTT04lNUMlNUNEZXNrdG9wJTVDJTVDTmV3JTIwZm9sZGVyJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNjbGllbnQlNUMlNUNjb21wb25lbnRzJTVDJTVDbm90LWZvdW5kLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0pBU09OJTVDJTVDRGVza3RvcCU1QyU1Q05ldyUyMGZvbGRlciU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDSkFTT04lNUMlNUNEZXNrdG9wJTVDJTVDTmV3JTIwZm9sZGVyJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNsaWIlNUMlNUNtZXRhZGF0YSU1QyU1Q21ldGFkYXRhLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSxvT0FBd0k7QUFDeEk7QUFDQSwwT0FBMkk7QUFDM0k7QUFDQSwwT0FBMkk7QUFDM0k7QUFDQSx3T0FBMEk7QUFDMUk7QUFDQSxrUEFBK0k7QUFDL0k7QUFDQSxzUUFBeUo7QUFDeko7QUFDQSxzT0FBeUkiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXGNsaWVudC1wYWdlLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxKQVNPTlxcXFxEZXNrdG9wXFxcXE5ldyBmb2xkZXJcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZGlzdFxcXFxjbGllbnRcXFxcY29tcG9uZW50c1xcXFxjbGllbnQtc2VnbWVudC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxcZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXGxheW91dC1yb3V0ZXIuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEpBU09OXFxcXERlc2t0b3BcXFxcTmV3IGZvbGRlclxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXG5vdC1mb3VuZC1ib3VuZGFyeS5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxccmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcSkFTT05cXFxcRGVza3RvcFxcXFxOZXcgZm9sZGVyXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcbGliXFxcXG1ldGFkYXRhXFxcXG1ldGFkYXRhLWJvdW5kYXJ5LmpzXCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CJASON%5C%5CDesktop%5C%5CNew%20folder%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./app/page.jsx":
/*!**********************!*\
  !*** ./app/page.jsx ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _munezero_floparser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./@munezero/floparser */ \"(ssr)/./app/@munezero/floparser/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n    const [res, setRes] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [err, setErr] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);\n    const execute = async ()=>{\n        _munezero_floparser__WEBPACK_IMPORTED_MODULE_1__[\"default\"].run(value).then((res)=>{\n            console.log(\"run res::: \", res);\n            setRes(res);\n            setErr([]);\n        }).catch((err)=>{\n            setRes([]);\n            setErr(err);\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: 12,\n            paddingTop: 34\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                style: {\n                    position: \"absolute\",\n                    padding: 8,\n                    left: \"51%\",\n                    borderRadius: 8,\n                    top: 4\n                },\n                onClick: execute,\n                children: \"Run\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\",\n                lineNumber: 26,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                style: {\n                    width: \"50%\",\n                    height: 500,\n                    fontSize: 16\n                },\n                value: value,\n                onChange: ({ target: { value: v } })=>setValue(v)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\",\n                lineNumber: 38,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    display: \"flex\",\n                    width: '50%',\n                    flexDirection: \"column\"\n                },\n                children: [\n                    res.map((result, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: result\n                        }, index, false, {\n                            fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\",\n                            lineNumber: 45,\n                            columnNumber: 11\n                        }, this)),\n                    err.map((error, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: error.message\n                        }, index, false, {\n                            fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\",\n                            lineNumber: 49,\n                            columnNumber: 11\n                        }, this))\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\",\n                lineNumber: 43,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\",\n        lineNumber: 25,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvcGFnZS5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUU4QztBQUNGO0FBRTVDLDZCQUFlO0lBQ2IsTUFBTSxDQUFDRyxLQUFLQyxPQUFPLEdBQUdGLCtDQUFRQSxDQUFDLEVBQUU7SUFDakMsTUFBTSxDQUFDRyxPQUFPQyxTQUFTLEdBQUdKLCtDQUFRQSxDQUFDO0lBQ25DLE1BQU0sQ0FBQ0ssS0FBS0MsT0FBTyxHQUFHTiwrQ0FBUUEsQ0FBQyxFQUFFO0lBRWpDLE1BQU1PLFVBQVU7UUFDZFQsMkRBQVNBLENBQUNVLEdBQUcsQ0FBQ0wsT0FDWE0sSUFBSSxDQUFDLENBQUNSO1lBQ0xTLFFBQVFDLEdBQUcsQ0FBQyxlQUFlVjtZQUMzQkMsT0FBT0Q7WUFDUEssT0FBTyxFQUFFO1FBQ1gsR0FDQ00sS0FBSyxDQUFDLENBQUNQO1lBQ05ILE9BQU8sRUFBRTtZQUNUSSxPQUFPRDtRQUNUO0lBQ0o7SUFFQSxxQkFDRSw4REFBQ1E7UUFBSUMsT0FBTztZQUFFQyxTQUFTO1lBQVFDLEtBQUs7WUFBSUMsWUFBWTtRQUFHOzswQkFDckQsOERBQUNDO2dCQUNDSixPQUFPO29CQUNMSyxVQUFVO29CQUNWQyxTQUFTO29CQUNUQyxNQUFNO29CQUNOQyxjQUFjO29CQUNkQyxLQUFLO2dCQUNQO2dCQUNBQyxTQUFTakI7MEJBQ1Y7Ozs7OzswQkFHRCw4REFBQ2tCO2dCQUNDWCxPQUFPO29CQUFFWSxPQUFPO29CQUFPQyxRQUFRO29CQUFLQyxVQUFVO2dCQUFHO2dCQUNqRHpCLE9BQU9BO2dCQUNQMEIsVUFBVSxDQUFDLEVBQUVDLFFBQVEsRUFBRTNCLE9BQU80QixDQUFDLEVBQUUsRUFBRSxHQUFLM0IsU0FBUzJCOzs7Ozs7MEJBRW5ELDhEQUFDbEI7Z0JBQUlDLE9BQU87b0JBQUVDLFNBQVM7b0JBQVFXLE9BQU87b0JBQU9NLGVBQWU7Z0JBQVM7O29CQUNsRS9CLElBQUlnQyxHQUFHLENBQUMsQ0FBQ0MsUUFBUUMsc0JBQ2hCLDhEQUFDdEI7c0NBQWlCcUI7MkJBQVJDOzs7OztvQkFHWDlCLElBQUk0QixHQUFHLENBQUMsQ0FBQ0csT0FBT0Qsc0JBQ2YsOERBQUN0QjtzQ0FBaUJ1QixNQUFNQyxPQUFPOzJCQUFyQkY7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS3BCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEpBU09OXFxEZXNrdG9wXFxOZXcgZm9sZGVyXFxhcHBcXHBhZ2UuanN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xyXG5cclxuaW1wb3J0IGZsb3BhcnNlciBmcm9tIFwiLi9AbXVuZXplcm8vZmxvcGFyc2VyXCI7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCBbcmVzLCBzZXRSZXNdID0gdXNlU3RhdGUoW10pO1xyXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgY29uc3QgW2Vyciwgc2V0RXJyXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcbiAgY29uc3QgZXhlY3V0ZSA9IGFzeW5jICgpID0+IHtcclxuICAgIGZsb3BhcnNlci5ydW4odmFsdWUpXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInJ1biByZXM6OjogXCIsIHJlcyk7XHJcbiAgICAgICAgc2V0UmVzKHJlcyk7XHJcbiAgICAgICAgc2V0RXJyKFtdKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIHNldFJlcyhbXSk7XHJcbiAgICAgICAgc2V0RXJyKGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IFwiZmxleFwiLCBnYXA6IDEyLCBwYWRkaW5nVG9wOiAzNCB9fT5cclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgcGFkZGluZzogOCxcclxuICAgICAgICAgIGxlZnQ6IFwiNTElXCIsXHJcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDgsXHJcbiAgICAgICAgICB0b3A6IDQsXHJcbiAgICAgICAgfX1cclxuICAgICAgICBvbkNsaWNrPXtleGVjdXRlfVxyXG4gICAgICA+XHJcbiAgICAgICAgUnVuXHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8dGV4dGFyZWFcclxuICAgICAgICBzdHlsZT17eyB3aWR0aDogXCI1MCVcIiwgaGVpZ2h0OiA1MDAsIGZvbnRTaXplOiAxNiB9fVxyXG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICBvbkNoYW5nZT17KHsgdGFyZ2V0OiB7IHZhbHVlOiB2IH0gfSkgPT4gc2V0VmFsdWUodil9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIHdpZHRoOiAnNTAlJywgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIiB9fT5cclxuICAgICAgICB7cmVzLm1hcCgocmVzdWx0LCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgPGRpdiBrZXk9e2luZGV4fT57cmVzdWx0fTwvZGl2PlxyXG4gICAgICAgICkpfVxyXG5cclxuICAgICAgICB7ZXJyLm1hcCgoZXJyb3IsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9PntlcnJvci5tZXNzYWdlfTwvZGl2PlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbImZsb3BhcnNlciIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwicmVzIiwic2V0UmVzIiwidmFsdWUiLCJzZXRWYWx1ZSIsImVyciIsInNldEVyciIsImV4ZWN1dGUiLCJydW4iLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZGl2Iiwic3R5bGUiLCJkaXNwbGF5IiwiZ2FwIiwicGFkZGluZ1RvcCIsImJ1dHRvbiIsInBvc2l0aW9uIiwicGFkZGluZyIsImxlZnQiLCJib3JkZXJSYWRpdXMiLCJ0b3AiLCJvbkNsaWNrIiwidGV4dGFyZWEiLCJ3aWR0aCIsImhlaWdodCIsImZvbnRTaXplIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJ2IiwiZmxleERpcmVjdGlvbiIsIm1hcCIsInJlc3VsdCIsImluZGV4IiwiZXJyb3IiLCJtZXNzYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/page.jsx\n");

/***/ }),

/***/ "(rsc)/./app/layout.js":
/*!***********************!*\
  !*** ./app/layout.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nconst metadata = {\n    title: 'Next.js',\n    description: 'Generated by Next.js'\n};\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            children: children\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\layout.js\",\n            lineNumber: 9,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\layout.js\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvbGF5b3V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQU8sTUFBTUEsV0FBVztJQUN0QkMsT0FBTztJQUNQQyxhQUFhO0FBQ2YsRUFBQztBQUVjLFNBQVNDLFdBQVcsRUFBRUMsUUFBUSxFQUFFO0lBQzdDLHFCQUNFLDhEQUFDQztRQUFLQyxNQUFLO2tCQUNULDRFQUFDQztzQkFBTUg7Ozs7Ozs7Ozs7O0FBR2IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSkFTT05cXERlc2t0b3BcXE5ldyBmb2xkZXJcXGFwcFxcbGF5b3V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBtZXRhZGF0YSA9IHtcbiAgdGl0bGU6ICdOZXh0LmpzJyxcbiAgZGVzY3JpcHRpb246ICdHZW5lcmF0ZWQgYnkgTmV4dC5qcycsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoeyBjaGlsZHJlbiB9KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XG4gICAgICA8Ym9keT57Y2hpbGRyZW59PC9ib2R5PlxuICAgIDwvaHRtbD5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIm1ldGFkYXRhIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIlJvb3RMYXlvdXQiLCJjaGlsZHJlbiIsImh0bWwiLCJsYW5nIiwiYm9keSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/layout.js\n");

/***/ }),

/***/ "(rsc)/./app/page.jsx":
/*!**********************!*\
  !*** ./app/page.jsx ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(rsc)/./node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server-edge.js");
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call the default export of \"C:\\\\Users\\\\JASON\\\\Desktop\\\\New folder\\\\app\\\\page.jsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"C:\\Users\\JASON\\Desktop\\New folder\\app\\page.jsx",
"default",
));


/***/ }),

/***/ "(ssr)/./app/@munezero/floparser/Compilers/MemoryManager/index.mjs":
/*!*******************************************************************!*\
  !*** ./app/@munezero/floparser/Compilers/MemoryManager/index.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDate: () => (/* binding */ Eo),\n/* harmony export */   createDrawer: () => (/* binding */ _o),\n/* harmony export */   createMemoryManager: () => (/* binding */ To)\n/* harmony export */ });\nvar y = \"as\", Z = \"=\", G = \"break\", D = \"else\", K = \"enum\", V = \"export\", z = \"if\", m = \"import\", k = \"->\", j = \"is\", J = \"loop\", W = \"mut\", Q = \"native\", v = \"object\", X = \"fn\", $ = \"return\", q = \"self\", tt = \"template\", et = Object.freeze({\n    ALIAS: y,\n    ASSIGN: Z,\n    BREAK: G,\n    ELSE: D,\n    ENUMERATION: K,\n    EXPORT: V,\n    IF: z,\n    IMPORT: m,\n    INTO: k,\n    IS: j,\n    LOOP: J,\n    MUTABLE: W,\n    NATIVE: Q,\n    OBJECT: v,\n    PROCEDURE: X,\n    RETURN: $,\n    SELF: q,\n    TEMPLATE: tt\n}), L = et;\nvar ot = \"assign\", nt = \"arity_match\", rt = \"arity_status\", st = \"array_assignment\", ct = \"branch-match\", Tt = \"branch-default\", Et = \"condition\", _t = \"loop\", it = \"data\", pt = \"generics\", xt = \"enumeration\", St = \"expression\", at = \"instance\", ft = \"Link\", At = \"local\", Rt = \"object\", Ot = \"procedure\", It = \"return\", lt = \"compare\", ut = \"select\", Nt = \"member\", Pt = \"store\", Yt = \"break\", dt = \"literal\", Ct = \"array_access\", Lt = \"valueLink\", Mt = \"linkValue\", bt = \"self\", gt = \"procedure-call\", Ut = \"Maybe\", wt = \"native\", ht = \"move\", Bt = \"String\", Ft = \"Array\", Ht = \"import\", yt = \"library\", Zt = \"constructor\", Gt = \"destructor\", Dt = \"free\", Kt = \"block-end\", Vt = \"default-block\", zt = \"continue\", mt = \"branch\", kt = \"statement\", jt = \"draw\", Jt = \"now\", Wt = \"size\", Qt = \"concatenation\", vt = \"foreach\", Xt = \"while\", $t = \"when\", qt = \"while-condition\", te = \"foreach-condition\", ee = \"foreach-end\", oe = \"for\", ne = \"up_to\", re = \"down_to\", se = \"almost_up_to\", ce = \"almost_down_to\", Te = \"I32\", Ee = \"U32\", _e = \"FP32\", ie = \"I16\", pe = \"U16\", xe = \"U8\", Se = \"I8\", ae = \"FP64\", fe = \"U64\", Ae = \"I64\", Re = \"Char\", Oe = \"block-start\", Ie = \"function-call\", le = \"Bool\", ue = Object.freeze({\n    TYPES_ASSIGN: ot,\n    TYPES_ARRAY: Ft,\n    TYPES_ARITY_MATCH: nt,\n    TYPES_ARITY_STATUS: rt,\n    TYPES_ARRAY_ASSIGNMENT: st,\n    TYPES_BRANCH_MATCH: ct,\n    TYPES_BRANCH_DEFAULT: Tt,\n    TYPES_CONDITION: Et,\n    TYPES_LOOP: _t,\n    TYPES_FOREACH_END: ee,\n    TYPES_WHILE_CONDITION: qt,\n    TYPES_FOREACH_CONDITION: te,\n    TYPES_DATA: it,\n    TYPES_COMPARE: lt,\n    TYPES_GENERICS: pt,\n    TYPES_ENUMERATION: xt,\n    TYPES_EXPRESSION: St,\n    TYPES_INSTANCE: at,\n    TYPES_LINK: ft,\n    TYPES_IMPORT: Ht,\n    TYPES_LOCAL: At,\n    TYPES_OBJECT: Rt,\n    TYPES_PROCEDURE: Ot,\n    TYPES_RETURN: It,\n    TYPES_SELECT: ut,\n    TYPES_MEMBER: Nt,\n    TYPES_STORE: Pt,\n    TYPES_BREAK: Yt,\n    TYPES_LITERAL: dt,\n    TYPES_ARRAY_ACCESS: Ct,\n    TYPES_LINK_TO: Lt,\n    TYPES_VALUE_AT: Mt,\n    TYPES_SELF: bt,\n    TYPES_LIBRARY: yt,\n    TYPES_DROP: gt,\n    TYPES_MAYBE: Ut,\n    TYPES_NATIVE: wt,\n    TYPES_MOVE: ht,\n    TYPES_STRING: Bt,\n    TYPES_CONSTRUCTOR: Zt,\n    TYPES_FREE: Dt,\n    TYPES_DEFAULT_BLOCK: Vt,\n    TYPES_BLOCK_END: Kt,\n    TYPES_CONTINUE: zt,\n    TYPES_BRANCH: mt,\n    TYPES_STATEMENT: kt,\n    TYPES_DESTRUCTOR: Gt,\n    TYPES_DRAW: jt,\n    TYPES_NOW: Jt,\n    TYPES_SIZE: Wt,\n    TYPES_CONCAT: Qt,\n    TYPES_FOREACH: vt,\n    TYPES_WHILE: Xt,\n    TYPES_WHEN: $t,\n    TYPES_FOR: oe,\n    TYPES_UP_TO: ne,\n    TYPES_DOWN_TO: re,\n    TYPES_ALMOST_UP_TO: se,\n    TYPES_ALMOST_DOWN_TO: ce,\n    TYPES_I32: Te,\n    TYPES_FP32: _e,\n    TYPES_FP64: ae,\n    TYPES_U32: Ee,\n    TYPES_I64: Ae,\n    TYPES_U64: fe,\n    TYPES_I16: ie,\n    TYPES_U16: pe,\n    TYPES_I8: Se,\n    TYPES_U8: xe,\n    TYPES_CHAR: Re,\n    TYPES_BOOL: le,\n    TYPES_BLOCK_BEGIN: Oe,\n    TYPES_FUNCTION_CALL: Ie\n}), M = ue;\nvar Ne = Object.freeze({\n    COLON: 58,\n    COMMA: 44,\n    DIGIT_ZERO: 48,\n    DIGIT_NINE: 57,\n    DOT: 46,\n    HASHTAG: 35,\n    HORIZONTAL_TAB: 9,\n    HYPHEN_MINUS: 45,\n    LEFT_CURLY_BRACKET: 123,\n    LEFT_PARENTHESIS: 40,\n    LEFT_SQUARE_BRACKET: 91,\n    LINE_BREAK: 10,\n    NULL: 0,\n    PLUS_SIGN: 43,\n    RIGHT_CURLY_BRACKET: 125,\n    RIGHT_PARENTHESIS: 41,\n    RIGHT_SQUARE_BRACKET: 93,\n    SEMICOLON: 59,\n    SPACE: 32,\n    E_SIGN: 101\n}), b = Ne;\nvar Pe = \"assignment\", Ye = \"Flogram\", de = Object.freeze({\n    K_ASSIGNMENT: Pe,\n    K_FLOGRAM: Ye\n}), g = de;\nvar Ce = Object.freeze([\n    [\n        43\n    ],\n    [\n        45\n    ],\n    [\n        42\n    ],\n    [\n        47\n    ],\n    [\n        37\n    ],\n    [\n        110,\n        111,\n        116\n    ],\n    [\n        60\n    ],\n    [\n        62\n    ],\n    [\n        94\n    ],\n    [\n        111,\n        114\n    ],\n    [\n        33\n    ],\n    [\n        61,\n        61\n    ],\n    [\n        60,\n        61\n    ],\n    [\n        62,\n        61\n    ],\n    [\n        33,\n        61\n    ],\n    [\n        120,\n        111,\n        114\n    ],\n    [\n        97,\n        110,\n        100\n    ]\n]), Le = Ce, U = Le;\nvar Me = Object.freeze({\n    INT_ARRAY_START: 9999991,\n    FLOAT_ARRAY_START: 9999981,\n    STRING_START: 8888891,\n    CHAR_START: 8888881,\n    NAT_ON_HORIZON: 7777791,\n    BIG_NAT_ON_HORIZON: 7777591,\n    FLOAT_ON_HORIZON: 7777771,\n    BIG_FLOAT_ON_HORIZON: 7777731,\n    END_OF_LINE: 66666661\n}), w = Me;\nvar be = Object.freeze({\n    ENUM_MEMORY_SIZE: 12,\n    ENUM_STACK_SIZE: 3,\n    ARRAY_MEMORY_SIZE: 12,\n    ARRAY_STACK_SIZE: 3,\n    ARRAY_DEFAULT_CAPACITY: 4,\n    STRING_MEMORY_SIZE: 8,\n    STRING_STACK_SIZE: 2,\n    OBJECT_MEMORY_SIZE: 8,\n    OBJECT_STACK_SIZE: 2,\n    NATIVE_MEMORY_SIZE: 4,\n    NATIVE_STACK_SIZE: 1,\n    NATIVE_SIZE: 4,\n    STEP: 4,\n    DOUBLE_STEP: 8,\n    TRIPPLE_STEP: 12\n}), h = be;\nvar ge = Object.freeze([]), Ue = Object.freeze({}), we = \"\", he = \"\t\", Be = `\n`, Fe = \"UTF-8\";\nvar He = Object.freeze({\n    EMPTY_ARRAY: ge,\n    EMPTY_OBJECT: Ue,\n    EMPTY_STRING: we,\n    HORIZONTAL_TAB: he,\n    LINE_BREAK: Be,\n    UNICODE_TEXT: Fe,\n    Codes: b,\n    Keys: L,\n    Types: M,\n    Keywords: g,\n    Operators: U,\n    DrawStates: w,\n    Sizes: h\n}), B = He;\nvar { INT_ARRAY_START: ye, FLOAT_ARRAY_START: F, STRING_START: H, CHAR_START: Ze, END_OF_LINE: Ge, NAT_ON_HORIZON: De, BIG_NAT_ON_HORIZON: Ke, FLOAT_ON_HORIZON: Ve, BIG_FLOAT_ON_HORIZON: ze } = B.DrawStates;\nfunction To(r) {\n    let c = [\n        {\n            start: r.buffer.byteLength / 2,\n            size: r.buffer.byteLength / 2\n        }\n    ], E = new Map(), x = [], S = [];\n    function _() {\n        return c;\n    }\n    function A() {\n        return E;\n    }\n    function R(e) {\n        let o = 0;\n        for(; o < c.length && c[o].start < e.start;)o++;\n        c.splice(o, 0, e);\n    }\n    let O;\n    function Y(e) {\n        O === void 0 ? O = e : (S.push({\n            first: O,\n            second: e\n        }), O = void 0);\n    }\n    function d() {\n        if (!S.length) return [\n            0,\n            0\n        ];\n        let e = S.pop();\n        return [\n            e.first,\n            e.second\n        ];\n    }\n    function I() {\n        if (S.length < 2) return [\n            0,\n            0\n        ];\n        let [e] = S.splice(S.length - 2, 1);\n        return [\n            e.first,\n            e.second\n        ];\n    }\n    function s(e) {\n        let o = E.get(e);\n        if (!o) throw new Error(\"Invalid pointer: \" + e);\n        let t = i(o.size), p = new Uint8Array(r.buffer, e, o.size);\n        return new Uint8Array(r.buffer, t, o.size).set(p), t;\n    }\n    function T() {\n        let e = Array.from(E.entries());\n        if (e.length < 2) return;\n        let [o, t] = e[e.length - 2], [p, n] = e[e.length - 1];\n    }\n    function i(e) {\n        for(let t = 0; t < c.length; t++)if (c[t].size >= e) {\n            let p = c.splice(t, 1);\n            if (p.length > 0) {\n                let n = p[0];\n                if (n.size > e) {\n                    let C = {\n                        start: n.start + e,\n                        size: n.size - e\n                    };\n                    R(C);\n                }\n                return n.size = e, E.set(n.start, n), n.start;\n            }\n        }\n        if (r.buffer.byteLength + e > r.buffer.byteLength * r.buffer.byteLength / 65536) {\n            let t = Math.ceil(e / 65536);\n            r.grow(t);\n        }\n        let o = {\n            start: r.buffer.byteLength,\n            size: e\n        };\n        return E.set(o.start, o), o.start;\n    }\n    function f(e) {\n        let o = E.get(e);\n        if (!o) {\n            console.error(\"Unable to find block\");\n            return;\n        }\n        E.delete(e);\n        for(let t = 0; t < c.length; t++)c[t].start + c[t].size === o.start ? (o.start = c[t].start, o.size += c[t].size, c.splice(t, 1), t--) : o.start + o.size === c[t].start && (o.size += c[t].size, c.splice(t, 1), t--);\n        R(o);\n    }\n    function a(e) {\n        return x.find((o)=>o.dataPtr === e);\n    }\n    function l(e) {\n        let o = i(4 * e).start, t = {\n            dataPtr: o,\n            length: 0,\n            capacity: 4,\n            elementTypeSize: e\n        };\n        return x.push(t), o;\n    }\n    function u(e, o) {\n        let t = a(e);\n        if (!t) throw new Error(\"Vector not found\");\n        if (t.length >= t.capacity) {\n            let n = t.dataPtr;\n            t.dataPtr = i(2 * t.capacity * t.elementTypeSize).start, t.capacity *= 2;\n            let C = new Uint8Array(r.buffer, n, t.length * t.elementTypeSize);\n            new Uint8Array(r.buffer, t.dataPtr, t.capacity * t.elementTypeSize).set(C), f(n);\n        }\n        let p = new Uint8Array(r.buffer, t.dataPtr + t.length * t.elementTypeSize, t.elementTypeSize);\n        for(let n = 0; n < t.elementTypeSize; n++)p[n] = o >> n * 8 & 255;\n        t.length += 1;\n    }\n    function N(e, o = 4) {\n        let t = i(o), p = new Uint8Array(r.buffer, t.start, o);\n        for(let n = 0; n < o; n++)p[n] = e >> n * 8 & 255;\n        return t.start;\n    }\n    function P(e, o = 4) {\n        let t = new Uint8Array(r.buffer, e, o), p = 0;\n        for(let n = 0; n < o; n++)p |= t[n] << n * 8;\n        return p;\n    }\n    return {\n        alloc: i,\n        dealloc: f,\n        merge: T,\n        save: Y,\n        undo: d,\n        undoPenultimate: I,\n        createVector: l,\n        pushToVector: u,\n        allocateValue: N,\n        readValue: P,\n        getFreeList: _,\n        getUsedBlocks: A,\n        copy: s\n    };\n}\nfunction Eo() {\n    function r() {\n        return BigInt(Date.now());\n    }\n    return {\n        now: r\n    };\n}\nfunction _o(r, c = void 0) {\n    let E = [], x = \"default\", S, _, A, R, O;\n    function Y(s, T, i) {\n        let f;\n        return i === F ? f = new Float32Array(r.buffer, s, T) : f = new Int32Array(r.buffer, s, T), Array.from(f);\n    }\n    function d(s, T) {\n        let i = new Int32Array(r.buffer, s, T), f = new Float32Array(r.buffer, s, T), a = \"\", l = !1, u = !1, N = !1, P = !1;\n        for(let e = 0; e < i.length; e++){\n            let o = i[e];\n            if (l) {\n                a += o.toString(), l = !1;\n                continue;\n            }\n            if (u) {\n                a += f[e].toString(), u = !1;\n                continue;\n            }\n            if (N) {\n                let t = o, p = i[e + 1], n = BigInt(t) + (BigInt(p) << 32n);\n                a += n.toString(), N = !1, e++;\n                continue;\n            }\n            if (P) {\n                let t = new Float64Array(r.buffer, s + e * 4, 1);\n                a += t[0].toString(), P = !1, e++;\n                continue;\n            }\n            if (o === De) {\n                l = !0;\n                continue;\n            }\n            if (o === Ve) {\n                u = !0;\n                continue;\n            }\n            if (o === Ke) {\n                N = !0;\n                continue;\n            }\n            if (o === ze) {\n                P = !0;\n                continue;\n            }\n            o >= 32 && o <= 126 ? a += String.fromCharCode(o) : a += o.toString();\n        }\n        return a;\n    }\n    function I(s) {\n        if (s === Ge) {\n            if (E.length > 0) {\n                let T = E.join(\" \");\n                if (c) {\n                    c.push(T);\n                } else console.log(T);\n                E = [];\n            }\n            return;\n        }\n        if (x === \"default\") {\n            if (s === ye || s === F) {\n                x = \"array\", O = s, S = void 0, _ = void 0;\n                return;\n            }\n            if (s === H) {\n                x = \"string\", A = void 0, _ = void 0;\n                return;\n            }\n            if (s === Ze) {\n                x = \"char\", R = void 0;\n                return;\n            }\n            E.push(s);\n        } else if (x === \"array\") {\n            if (_ == null) {\n                _ = s;\n                return;\n            }\n            if (!S) {\n                S = s;\n                let T = Y(S, _, O);\n                E.push(T), S = void 0, _ = void 0, x = \"default\";\n            }\n        } else if (x === \"string\") {\n            if (s === H) return;\n            if (_ == null) {\n                _ = s;\n                return;\n            }\n            if (!A) {\n                A = s;\n                let T = d(A, _);\n                E.push(T), A = void 0, _ = void 0, x = \"default\";\n            }\n        } else if (x === \"char\" && !R) {\n            R = s;\n            let T = String.fromCharCode(R);\n            E.push(`${T}`), x = \"default\";\n        }\n    }\n    return {\n        draw: I,\n        drawI64: I,\n        drawFP32: I,\n        drawFP64: I,\n        receiveParams: I,\n        readArrayFromMemory: Y\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/@munezero/floparser/Compilers/MemoryManager/index.mjs\n");

/***/ }),

/***/ "(ssr)/./app/@munezero/floparser/Compilers/SimplerWASM/index.mjs":
/*!*****************************************************************!*\
  !*** ./app/@munezero/floparser/Compilers/SimplerWASM/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Qu)\n/* harmony export */ });\nvar _c = \"as\", Oc = \"=\", bc = \"break\", dc = \"else\", mc = \"enum\", Tc = \"export\", gc = \"if\", yc = \"import\", xc = \"->\", Ic = \"is\", Ac = \"loop\", Nc = \"mut\", Rc = \"native\", Sc = \"object\", Pc = \"fn\", zc = \"return\", jc = \"self\", Cc = \"template\", Fc = Object.freeze({\n    ALIAS: _c,\n    ASSIGN: Oc,\n    BREAK: bc,\n    ELSE: dc,\n    ENUMERATION: mc,\n    EXPORT: Tc,\n    IF: gc,\n    IMPORT: yc,\n    INTO: xc,\n    IS: Ic,\n    LOOP: Ac,\n    MUTABLE: Nc,\n    NATIVE: Rc,\n    OBJECT: Sc,\n    PROCEDURE: Pc,\n    RETURN: zc,\n    SELF: jc,\n    TEMPLATE: Cc\n}), $n = Fc;\nvar Dc = \"assign\", Uc = \"arity_match\", kc = \"arity_status\", Lc = \"array_assignment\", Yc = \"branch-match\", wc = \"branch-default\", Vc = \"condition\", vc = \"loop\", Mc = \"data\", Bc = \"generics\", Kc = \"enumeration\", Gc = \"expression\", Hc = \"instance\", Zc = \"Link\", Xc = \"local\", Wc = \"object\", qc = \"procedure\", $c = \"return\", Jc = \"compare\", Qc = \"select\", ea = \"member\", ta = \"store\", sa = \"break\", na = \"literal\", oa = \"array_access\", ca = \"valueLink\", aa = \"linkValue\", ra = \"self\", ia = \"procedure-call\", pa = \"Maybe\", la = \"native\", ua = \"move\", fa = \"String\", ha = \"Array\", Ea = \"import\", _a = \"library\", Oa = \"constructor\", ba = \"destructor\", da = \"free\", ma = \"block-end\", Ta = \"default-block\", ga = \"continue\", ya = \"branch\", xa = \"statement\", Ia = \"draw\", Aa = \"now\", Na = \"size\", Ra = \"concatenation\", Sa = \"foreach\", Pa = \"while\", za = \"when\", ja = \"while-condition\", Ca = \"foreach-condition\", Fa = \"foreach-end\", Da = \"for\", Ua = \"up_to\", ka = \"down_to\", La = \"almost_up_to\", Ya = \"almost_down_to\", wa = \"I32\", Va = \"U32\", va = \"FP32\", Ma = \"I16\", Ba = \"U16\", Ka = \"U8\", Ga = \"I8\", Ha = \"FP64\", Za = \"U64\", Xa = \"I64\", Wa = \"Char\", qa = \"block-start\", $a = \"function-call\", Ja = \"Bool\", Qa = Object.freeze({\n    TYPES_ASSIGN: Dc,\n    TYPES_ARRAY: ha,\n    TYPES_ARITY_MATCH: Uc,\n    TYPES_ARITY_STATUS: kc,\n    TYPES_ARRAY_ASSIGNMENT: Lc,\n    TYPES_BRANCH_MATCH: Yc,\n    TYPES_BRANCH_DEFAULT: wc,\n    TYPES_CONDITION: Vc,\n    TYPES_LOOP: vc,\n    TYPES_FOREACH_END: Fa,\n    TYPES_WHILE_CONDITION: ja,\n    TYPES_FOREACH_CONDITION: Ca,\n    TYPES_DATA: Mc,\n    TYPES_COMPARE: Jc,\n    TYPES_GENERICS: Bc,\n    TYPES_ENUMERATION: Kc,\n    TYPES_EXPRESSION: Gc,\n    TYPES_INSTANCE: Hc,\n    TYPES_LINK: Zc,\n    TYPES_IMPORT: Ea,\n    TYPES_LOCAL: Xc,\n    TYPES_OBJECT: Wc,\n    TYPES_PROCEDURE: qc,\n    TYPES_RETURN: $c,\n    TYPES_SELECT: Qc,\n    TYPES_MEMBER: ea,\n    TYPES_STORE: ta,\n    TYPES_BREAK: sa,\n    TYPES_LITERAL: na,\n    TYPES_ARRAY_ACCESS: oa,\n    TYPES_LINK_TO: ca,\n    TYPES_VALUE_AT: aa,\n    TYPES_SELF: ra,\n    TYPES_LIBRARY: _a,\n    TYPES_DROP: ia,\n    TYPES_MAYBE: pa,\n    TYPES_NATIVE: la,\n    TYPES_MOVE: ua,\n    TYPES_STRING: fa,\n    TYPES_CONSTRUCTOR: Oa,\n    TYPES_FREE: da,\n    TYPES_DEFAULT_BLOCK: Ta,\n    TYPES_BLOCK_END: ma,\n    TYPES_CONTINUE: ga,\n    TYPES_BRANCH: ya,\n    TYPES_STATEMENT: xa,\n    TYPES_DESTRUCTOR: ba,\n    TYPES_DRAW: Ia,\n    TYPES_NOW: Aa,\n    TYPES_SIZE: Na,\n    TYPES_CONCAT: Ra,\n    TYPES_FOREACH: Sa,\n    TYPES_WHILE: Pa,\n    TYPES_WHEN: za,\n    TYPES_FOR: Da,\n    TYPES_UP_TO: Ua,\n    TYPES_DOWN_TO: ka,\n    TYPES_ALMOST_UP_TO: La,\n    TYPES_ALMOST_DOWN_TO: Ya,\n    TYPES_I32: wa,\n    TYPES_FP32: va,\n    TYPES_FP64: Ha,\n    TYPES_U32: Va,\n    TYPES_I64: Xa,\n    TYPES_U64: Za,\n    TYPES_I16: Ma,\n    TYPES_U16: Ba,\n    TYPES_I8: Ga,\n    TYPES_U8: Ka,\n    TYPES_CHAR: Wa,\n    TYPES_BOOL: Ja,\n    TYPES_BLOCK_BEGIN: qa,\n    TYPES_FUNCTION_CALL: $a\n}), tn = Qa;\nvar er = Object.freeze({\n    COLON: 58,\n    COMMA: 44,\n    DIGIT_ZERO: 48,\n    DIGIT_NINE: 57,\n    DOT: 46,\n    HASHTAG: 35,\n    HORIZONTAL_TAB: 9,\n    HYPHEN_MINUS: 45,\n    LEFT_CURLY_BRACKET: 123,\n    LEFT_PARENTHESIS: 40,\n    LEFT_SQUARE_BRACKET: 91,\n    LINE_BREAK: 10,\n    NULL: 0,\n    PLUS_SIGN: 43,\n    RIGHT_CURLY_BRACKET: 125,\n    RIGHT_PARENTHESIS: 41,\n    RIGHT_SQUARE_BRACKET: 93,\n    SEMICOLON: 59,\n    SPACE: 32,\n    E_SIGN: 101\n}), Jn = er;\nvar tr = \"assignment\", sr = \"Flogram\", nr = Object.freeze({\n    K_ASSIGNMENT: tr,\n    K_FLOGRAM: sr\n}), Qn = nr;\nvar or = Object.freeze([\n    [\n        43\n    ],\n    [\n        45\n    ],\n    [\n        42\n    ],\n    [\n        47\n    ],\n    [\n        37\n    ],\n    [\n        110,\n        111,\n        116\n    ],\n    [\n        60\n    ],\n    [\n        62\n    ],\n    [\n        94\n    ],\n    [\n        111,\n        114\n    ],\n    [\n        33\n    ],\n    [\n        61,\n        61\n    ],\n    [\n        60,\n        61\n    ],\n    [\n        62,\n        61\n    ],\n    [\n        33,\n        61\n    ],\n    [\n        120,\n        111,\n        114\n    ],\n    [\n        97,\n        110,\n        100\n    ]\n]), cr = or, eo = cr;\nvar ar = Object.freeze({\n    INT_ARRAY_START: 9999991,\n    FLOAT_ARRAY_START: 9999981,\n    STRING_START: 8888891,\n    CHAR_START: 8888881,\n    NAT_ON_HORIZON: 7777791,\n    BIG_NAT_ON_HORIZON: 7777591,\n    FLOAT_ON_HORIZON: 7777771,\n    BIG_FLOAT_ON_HORIZON: 7777731,\n    END_OF_LINE: 66666661\n}), to = ar;\nvar rr = Object.freeze({\n    ENUM_MEMORY_SIZE: 12,\n    ENUM_STACK_SIZE: 3,\n    ARRAY_MEMORY_SIZE: 12,\n    ARRAY_STACK_SIZE: 3,\n    ARRAY_DEFAULT_CAPACITY: 4,\n    STRING_MEMORY_SIZE: 8,\n    STRING_STACK_SIZE: 2,\n    OBJECT_MEMORY_SIZE: 8,\n    OBJECT_STACK_SIZE: 2,\n    NATIVE_MEMORY_SIZE: 4,\n    NATIVE_STACK_SIZE: 1,\n    NATIVE_SIZE: 4,\n    STEP: 4,\n    DOUBLE_STEP: 8,\n    TRIPPLE_STEP: 12\n}), so = rr;\nvar ir = Object.freeze([]), pr = Object.freeze({}), lr = \"\", ur = \"\t\", fr = `\n`, hr = \"UTF-8\", Ns = tn, Er = Object.freeze({\n    EMPTY_ARRAY: ir,\n    EMPTY_OBJECT: pr,\n    EMPTY_STRING: lr,\n    HORIZONTAL_TAB: ur,\n    LINE_BREAK: fr,\n    UNICODE_TEXT: hr,\n    Codes: Jn,\n    Keys: $n,\n    Types: tn,\n    Keywords: Qn,\n    Operators: eo,\n    DrawStates: to,\n    Sizes: so\n}), Rt = Er;\nvar _r = Object.freeze([\n    \"FP64\",\n    \"U64\",\n    \"I64\",\n    \"FP32\",\n    \"U32\",\n    \"I32\",\n    \"U16\",\n    \"I16\",\n    \"U8\",\n    \"I8\",\n    \"Bool\",\n    \"Char\",\n    \"Array\",\n    \"String\",\n    \"Link\",\n    \"Maybe\"\n]), qt = [\n    \"U8\",\n    \"U16\",\n    \"U32\"\n], ps = [\n    ...qt,\n    \"I8\",\n    \"I16\",\n    \"I32\"\n], sn = [\n    \"I64\",\n    \"U64\"\n], ls = [\n    ...ps,\n    ...sn\n], Rs = [\n    \"FP32\",\n    \"FP64\"\n], us = [\n    ...ls,\n    ...Rs\n], fs = _r;\nvar { EMPTY_STRING: Or, UNICODE_TEXT: an } = Rt;\nvar br = 48, dr = 57, mr = 46, no = 45, oo = 43, Tr = 65, gr = 90, yr = \"e\".charCodeAt(0), xr = \"E\".charCodeAt(0), Ir = -1, Ar = 1, co = new TextDecoder(an), Nr = new TextEncoder, Rr = Rt.Operators, Sr = (c, s, r = 0, h = c.length | 0, D = 0, ce = s.length | 0)=>{\n    for(D = D | 0, r = r | 0, ce = ce | 0, h = h | 0;;){\n        let e = r >= h, pe = D >= ce;\n        if (e || pe) break;\n        let Oe = c[r], $ = s[D];\n        if (r = r + 1 | 0, D = D + 1 | 0, Oe < $) return Ir;\n        if (Oe > $) return Ar;\n    }\n    return 0;\n}, Pr = (c, s, r = 0, h = c.length | 0, D = 0, ce = s.length | 0)=>{\n    for(D = D | 0, r = r | 0, ce = ce | 0, h = h | 0;;){\n        let e = D >= ce, pe = r >= h;\n        if (e || pe) break;\n        s[D] = c[r], D = D + 1 | 0, r = r + 1 | 0;\n    }\n}, io = (c, s, r = 0, h = c.length | 0, D = 0, ce = s.length | 0)=>{\n    r = r | 0, D = D | 0, h = h | 0, ce = ce | 0;\n    let e = h - r | 0, pe = ce - D | 0;\n    if (e !== pe) return !1;\n    for(;;){\n        let me = r >= h, Oe = D >= ce;\n        if (me || Oe) break;\n        let Re = c[r], lt = s[D];\n        if (r = r + 1 | 0, D = D + 1 | 0, Re !== lt) return !1;\n    }\n    return !0;\n}, zr = (c)=>{\n    c = c >>> 0;\n    let s = 0, r = 0;\n    for(; r = (r << 1 | 1) >>> 0, !(r > c);)s = s + 1 | 0;\n    return s;\n}, po = Object.freeze([\n    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    97,\n    98,\n    99,\n    100,\n    101,\n    102\n]), cn = (c, s, r, h)=>{\n    for(c = c >>> 0, h = h ?? s.length | 0, r = r | 0, h = h | 0; c > 0 && h > r;)h = h - 1 | 0, s[h] = po[c & 15], c = c >>> 4;\n}, jr = (c, s, r, h)=>{\n    let D = r | 0, ce = r + h | 0;\n    if (h === 0) return !1;\n    let e = !1, pe = !1, me = !1, Oe = ($)=>$ === oo || $ === no;\n    for(; D < ce;){\n        let $ = s[D];\n        D = D + 1 | 0;\n        let Re = br <= $ && $ <= dr, lt = oo === $ || $ === no, ut = mr === $, Ye = Br === $, nt = $ === yr || $ === xr;\n        if (Re) {\n            me = !0;\n            continue;\n        } else if (lt) {\n            if ((D === r + 1 || e && !pe) && !me) continue;\n        } else if ((Ye || ut) && !e && !pe || nt && !e) nt && (e = !0, D < ce && Oe(s[D]) && (D = D + 1 | 0, pe = !0));\n        else return !1;\n    }\n    return me && (!e || e && pe);\n}, Cr = {\n    I8: [\n        ...ps\n    ],\n    U8: [\n        ...qt\n    ],\n    I16: [\n        ...ps\n    ],\n    U16: [\n        ...qt\n    ],\n    I32: [\n        ...ps\n    ],\n    U32: [\n        ...qt\n    ],\n    I64: [\n        ...ls\n    ],\n    U64: [\n        ...qt\n    ],\n    FP32: us,\n    FP64: us\n}, Fr = (c, s)=>!us.includes(c) || !us.includes(s) ? !1 : Cr[c].includes(s), Dr = (c)=>{\n    let s = c >= Tr, r = c <= gr;\n    return s && r;\n}, Ps = 128, zs = 127, lo = -1, $t = 64, rn = (c)=>{\n    c = c | 0;\n    let s = [];\n    for(;;){\n        let r = c & zs;\n        c = c >> 7;\n        let h = c === 0, D = (r & $t) === 0, ce = h && D, e = c === -1, pe = (r & $t) !== 0;\n        if (ce || e && pe) {\n            s.push(r);\n            break;\n        }\n        r = r | Ps, s.push(r);\n    }\n    return s;\n}, Ur = (c)=>{\n    let s = [], r = !0;\n    for(; r;){\n        let h = c & zs;\n        c >>= 7, c === 0 && !(h & $t) || c === -1 && h & $t ? r = !1 : h |= Ps, s.push(h);\n    }\n    return s;\n}, uo = (c, s)=>{\n    s = s | 0;\n    let r = 0, h = 0;\n    for(;;){\n        let D = c[s] | 0;\n        s = s + 1 | 0;\n        let ce = (D & zs) << h;\n        if (h = h + 7 | 0, r = r | ce, (D & Ps) === 0) {\n            let pe = (D & $t) !== 0, me = h < 32;\n            if (pe && me) {\n                let $ = lo << h;\n                r = r | $;\n            }\n            break;\n        }\n    }\n    return r;\n}, kr = (c, s)=>{\n    s = s | 0;\n    let r = 0, h = 0;\n    for(;;){\n        let D = c[s] | 0;\n        s = s + 1 | 0;\n        let ce = (D & zs) << h;\n        if (h = h + 7 | 0, r = r | ce, !(D & Ps)) {\n            if (D & $t) {\n                let e = lo << h;\n                r = r | e;\n            }\n            break;\n        }\n    }\n    return r;\n}, Lr = (c)=>{\n    try {\n        return co.decode(c);\n    } catch  {\n        return co.decode(new Uint8Array([\n            c\n        ]));\n    }\n}, Yr = (c)=>Nr.encode(c), wr = (c = Or)=>{\n    let s = c.length | 0, r = rn(s), h = Buffer.from(c, an);\n    return Object.freeze([\n        ...r,\n        ...h\n    ]);\n}, Vr = (c, s)=>{\n    s = s | 0;\n    let r = uo(c, s), h = rn(r).length;\n    return s = s + h | 0, c.subarray(s, s + r | 0).toString(an);\n}, vr = 58, Mr = 46, Br = 95, hs = 32, nn = 48, Kr = 67, Ut = new Uint8Array(Kr), ao = Ut.subarray(0, 8), Ss = Ut.subarray(10, 49), ro = Ut.subarray(51, 68), on = 16, Gr = 2;\nUt[8] = vr;\nUt[9] = hs;\nUt[49] = hs;\nUt[50] = hs;\nvar Hr = (c, s)=>{\n    s = s ?? console.log;\n    let r = 32, h = 126, D = c.length | 0, ce = 0;\n    for(; D > 0;){\n        ao.fill(nn), cn(ce, ao), Ss.fill(hs), ro.fill(hs);\n        let e = D >= on ? on : D;\n        D = D - on | 0;\n        let pe = 0, me = 0;\n        for(let $ = 1; $ <= e; $ = $ + 1 | 0){\n            let Re = c[ce] & 255;\n            Ss[pe + 0 | 0] = nn, Ss[pe + 1 | 0] = nn, cn(Re, Ss, pe, pe + 2 | 0);\n            let lt = Mr;\n            r <= Re && Re <= h && (lt = Re), ro[me] = lt, ce = ce + 1 | 0, pe = pe + 2 | 0, me = me + 1 | 0, $ % Gr === 0 && (pe = pe + 1 | 0);\n        }\n        let Oe = String.fromCodePoint(...Ut);\n        s(Oe);\n    }\n}, Zr = function*(c, s) {\n    let r = c.length | 0, h = s.length | 0, D = 0;\n    for(; D < r && D < h;){\n        let ce = c[D], e = s[D];\n        yield [\n            ce,\n            e\n        ], D = D + 1 | 0;\n    }\n}, Xr = function*(c, s, r) {\n    let h = c.length | 0, D = s.length | 0, ce = r.length | 0, e = 0;\n    for(; e < h && e < D && e < ce;){\n        let pe = c[e], me = s[e], Oe = r[e];\n        yield [\n            pe,\n            me,\n            Oe\n        ], e = e + 1 | 0;\n    }\n}, Wr = (c)=>{\n    for (let s of Rr)if (io(c, s)) return !0;\n    return !1;\n}, qr = Object.freeze({\n    ARRAY_COMPARE: Sr,\n    ARRAY_COPY: Pr,\n    ARRAY_EQUAL: io,\n    BIT_DEPTH: zr,\n    HEX_DIGITS: po,\n    HEX_ENCODE: cn,\n    IS_NUMBER: jr,\n    IS_UPPERCASE: Dr,\n    IS_VALID_AUTO_CAST: Fr,\n    LEB128_DECODE: uo,\n    LEB128_DECODE_SIGNED: kr,\n    LEB128_ENCODE: rn,\n    LEB128_ENCODE_SIGNED: Ur,\n    UTF8_DECODE: Lr,\n    UTF8_ENCODE: Yr,\n    WASM_STRING_ENCODE: wr,\n    WASM_STRING_DECODE: Vr,\n    XXD_DUMP_HEX: Hr,\n    ZIP2: Zr,\n    ZIP3: Xr,\n    IS_OPERATOR: Wr\n}), Jt = qr;\nvar ct = (c, s = 2)=>{\n    let r = \"\";\n    switch(c){\n        case \"+\":\n            r = \"add\";\n            break;\n        case \"-\":\n            r = s === 2 ? \"sub\" : \"neg\";\n            break;\n        case \"*\":\n            r = \"mul\";\n            break;\n        case \"/\":\n            r = \"div\";\n            break;\n        case \"%\":\n            r = \"rem\";\n            break;\n        case \"==\":\n            r = \"eq\";\n            break;\n        case \">\":\n            r = \"gt\";\n            break;\n        case \"<\":\n            r = \"lt\";\n            break;\n        case \">=\":\n            r = \"ge\";\n            break;\n        case \"<=\":\n            r = \"le\";\n            break;\n        case \"!=\":\n            r = \"ne\";\n            break;\n        case \"and\":\n            r = \"and\";\n            break;\n        case \"or\":\n            r = \"or\";\n            break;\n        case \"xor\":\n            r = \"xor\";\n            break;\n        case \"not\":\n            r = \"not\";\n            break;\n        case \"I32\":\n            r = \"toi32\";\n            break;\n        case \"U32\":\n            r = \"tou32\";\n            break;\n        case \"I64\":\n            r = \"toi64\";\n            break;\n        case \"U64\":\n            r = \"tou64\";\n            break;\n        case \"FP64\":\n            r = \"tofp64\";\n            break;\n        case \"FP32\":\n            r = \"tofp32\";\n            break;\n    }\n    return r;\n};\nvar $r = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        160\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Jr = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        163\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Qr = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        162\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ei = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        68,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        240,\n        191,\n        162\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), ti = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        161\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), si = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        124\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ni = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        128\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), oi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        126\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ci = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        66,\n        255,\n        255,\n        255,\n        255,\n        255,\n        255,\n        255,\n        255,\n        126\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), ai = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        125\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ri = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        124\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ii = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        127\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), pi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        126\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), xu = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        66,\n        255,\n        255,\n        255,\n        255,\n        255,\n        255,\n        255,\n        255,\n        126\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), li = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        125\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), fo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        146\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ho = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        149\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Eo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        148\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ui = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        67,\n        0,\n        0,\n        128,\n        191,\n        148\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), _o = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        140\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), pn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        106\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ln = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        110\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), un = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        108\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), fn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        107\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), hn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        106\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), En = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        109\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), _n = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        108\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), On = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        65,\n        1,\n        0,\n        0,\n        0,\n        108\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), bn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        107\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), fi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        130\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), hi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        129\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), dn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        112\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), mn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        111\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ei = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        86\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), _i = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        85\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Oi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        100\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), js = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        75\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Tn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        74\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), bi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        94\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), di = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        84\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), mi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        83\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ti = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        99\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Cs = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        73\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), gn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        72\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), gi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        93\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), yi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        87\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), xi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        88\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ii = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        101\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), yn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        76\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Fs = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        77\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ai = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        95\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ni = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        89\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ri = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        90\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Si = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        102\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), xn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        78\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ds = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        79\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Pi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        96\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), zi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        81\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ji = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        81\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ci = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        97\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), In = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        70\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Es = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        70\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Fi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        91\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Di = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        82\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Ui = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        82\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), ki = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        98\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), _s = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        71\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), An = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        71\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Li = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        92\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Yi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        113\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), wi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        114\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), Vi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        115\n    ]),\n    lengths: Object.freeze({\n        inputs: 2,\n        outputs: 1\n    })\n}), vi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        69\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Oo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        167\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), bo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        167\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Mi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        170\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Bi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        171\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Ki = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        168\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Gi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        169\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), mo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Us = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        193\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), ks = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        192\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Hi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Zi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Xi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        176\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Wi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        177\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), qi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        175\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), $i = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        174\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Ji = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        172\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Qi = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        196\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), ep = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        173\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), tp = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        196\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), To = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        195\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), go = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        195\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), yo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        194\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), xo = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        194\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), sp = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        185\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), np = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        186\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Nn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        183\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Rn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        184\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), op = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        187\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), cp = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        180\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), ap = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        181\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Sn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        178\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Pn = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        179\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), rp = Object.freeze({\n    type: \"native\",\n    body: Object.freeze([\n        182\n    ]),\n    lengths: Object.freeze({\n        inputs: 1,\n        outputs: 1\n    })\n}), Os = Object.freeze(Object.assign({\n    \"Flogram./\": ho,\n    \"Flogram.*\": Eo,\n    \"Flogram.+\": fo,\n    \"Flogram.-\": _o\n}, {\n    \"Flogram.fp64.div\": Jr,\n    \"Flogram.fp64.mul\": Qr,\n    \"Flogram.fp64.add\": $r,\n    \"Flogram.fp64.sub\": ti,\n    \"Flogram.fp64.neg\": ei,\n    \"Flogram.fp64.gt\": Oi,\n    \"Flogram.fp64.lt\": Ti,\n    \"Flogram.fp64.le\": Ii,\n    \"Flogram.fp64.ge\": Si,\n    \"Flogram.fp64.ne\": ki,\n    \"Flogram.fp64.eq\": Ci,\n    \"Flogram.fp64.toi32\": Mi,\n    \"Flogram.fp64.tou32\": Bi,\n    \"Flogram.fp64.tou64\": Wi,\n    \"Flogram.fp64.toi64\": Xi,\n    \"Flogram.fp64.tofp32\": rp\n}, {\n    \"Flogram.u64.add\": si,\n    \"Flogram.u64.sub\": ai,\n    \"Flogram.u64.mul\": oi,\n    \"Flogram.u64.div\": ni,\n    \"Flogram.u64.rem\": fi,\n    \"Flogram.u64.gt\": Ei,\n    \"Flogram.u64.lt\": di,\n    \"Flogram.u64.le\": xi,\n    \"Flogram.u64.ge\": Ri,\n    \"Flogram.u64.ne\": Ui,\n    \"Flogram.u64.eq\": ji,\n    \"Flogram.u64.toi32\": bo,\n    \"Flogram.u64.tou32\": bo,\n    \"Flogram.u64.toi64\": Hi,\n    \"Flogram.u64.tofp32\": ap,\n    \"Flogram.u64.tofp64\": np\n}, {\n    \"Flogram.i64.add\": ri,\n    \"Flogram.i64.sub\": li,\n    \"Flogram.i64.neg\": ci,\n    \"Flogram.i64.mul\": pi,\n    \"Flogram.i64.div\": ii,\n    \"Flogram.i64.rem\": hi,\n    \"Flogram.i64.gt\": _i,\n    \"Flogram.i64.lt\": mi,\n    \"Flogram.i64.le\": yi,\n    \"Flogram.i64.ge\": Ni,\n    \"Flogram.i64.ne\": Di,\n    \"Flogram.i64.eq\": zi,\n    \"Flogram.i64.toi32\": Oo,\n    \"Flogram.i64.tou32\": Oo,\n    \"Flogram.i64.tou64\": Zi,\n    \"Flogram.i64.tofp32\": cp,\n    \"Flogram.i64.tofp64\": sp\n}, {\n    \"Flogram.fp32.div\": ho,\n    \"Flogram.fp32.mul\": Eo,\n    \"Flogram.fp32.add\": fo,\n    \"Flogram.fp32.sub\": _o,\n    \"Flogram.fp32.neg\": ui,\n    \"Flogram.fp32.gt\": bi,\n    \"Flogram.fp32.lt\": gi,\n    \"Flogram.fp32.le\": Ai,\n    \"Flogram.fp32.ge\": Pi,\n    \"Flogram.fp32.ne\": Li,\n    \"Flogram.fp32.eq\": Fi,\n    \"Flogram.fp32.toi32\": Ki,\n    \"Flogram.fp32.tou32\": Gi,\n    \"Flogram.fp32.tou64\": qi,\n    \"Flogram.fp32.toi64\": $i,\n    \"Flogram.fp32.tofp64\": op\n}, {\n    \"Flogram.u32.add\": pn,\n    \"Flogram.u32.sub\": fn,\n    \"Flogram.u32.mul\": un,\n    \"Flogram.u32.div\": ln,\n    \"Flogram.u32.rem\": dn,\n    \"Flogram.u32.gt\": js,\n    \"Flogram.u32.lt\": Cs,\n    \"Flogram.u32.le\": Fs,\n    \"Flogram.u32.ge\": Ds,\n    \"Flogram.u32.ne\": An,\n    \"Flogram.u32.eq\": Es,\n    \"Flogram.u32.toi32\": mo,\n    \"Flogram.u32.toi64\": ep,\n    \"Flogram.u32.tou64\": tp,\n    \"Flogram.u32.tofp32\": Pn,\n    \"Flogram.u32.tofp64\": Rn\n}, {\n    \"Flogram.i32.add\": hn,\n    \"Flogram.i32.sub\": bn,\n    \"Flogram.i32.neg\": On,\n    \"Flogram.i32.mul\": _n,\n    \"Flogram.i32.div\": En,\n    \"Flogram.i32.rem\": mn,\n    \"Flogram.i32.gt\": Tn,\n    \"Flogram.i32.lt\": gn,\n    \"Flogram.i32.le\": yn,\n    \"Flogram.i32.ge\": xn,\n    \"Flogram.i32.ne\": _s,\n    \"Flogram.i32.eq\": In,\n    \"Flogram.i32.toi64\": Ji,\n    \"Flogram.i32.tou64\": Qi,\n    \"Flogram.i32.tou32\": mo,\n    \"Flogram.i32.tofp32\": Sn,\n    \"Flogram.i32.tofp64\": Nn\n}, {\n    \"Flogram.i16.add\": hn,\n    \"Flogram.i16.sub\": bn,\n    \"Flogram.i16.neg\": On,\n    \"Flogram.i16.mul\": _n,\n    \"Flogram.i16.div\": En,\n    \"Flogram.i16.rem\": mn,\n    \"Flogram.i16.gt\": Tn,\n    \"Flogram.i16.lt\": gn,\n    \"Flogram.i16.le\": yn,\n    \"Flogram.i16.ge\": xn,\n    \"Flogram.i16.ne\": _s,\n    \"Flogram.i16.eq\": In,\n    \"Flogram.i16.toi32\": Us,\n    \"Flogram.i16.tou32\": Us,\n    \"Flogram.i16.toi64\": To,\n    \"Flogram.i16.tou64\": go,\n    \"Flogram.i16.tofp32\": Sn,\n    \"Flogram.i16.tofp64\": Nn\n}, {\n    \"Flogram.u16.add\": pn,\n    \"Flogram.u16.sub\": fn,\n    \"Flogram.u16.mul\": un,\n    \"Flogram.u16.div\": ln,\n    \"Flogram.u16.rem\": dn,\n    \"Flogram.u16.gt\": js,\n    \"Flogram.u16.lt\": Cs,\n    \"Flogram.u16.le\": Fs,\n    \"Flogram.u16.ge\": Ds,\n    \"Flogram.u16.ne\": An,\n    \"Flogram.u16.eq\": Es,\n    \"Flogram.u16.toi32\": Us,\n    \"Flogram.u16.tou32\": Us,\n    \"Flogram.u16.toi64\": To,\n    \"Flogram.u16.tou64\": go,\n    \"Flogram.u16.tofp32\": Pn,\n    \"Flogram.u16.tofp64\": Rn\n}, {\n    \"Flogram.i8.add\": hn,\n    \"Flogram.i8.sub\": bn,\n    \"Flogram.i16.neg\": On,\n    \"Flogram.i8.mul\": _n,\n    \"Flogram.i8.div\": En,\n    \"Flogram.i8.rem\": mn,\n    \"Flogram.i8.gt\": Tn,\n    \"Flogram.i8.lt\": gn,\n    \"Flogram.i8.le\": yn,\n    \"Flogram.i8.ge\": xn,\n    \"Flogram.i8.ne\": _s,\n    \"Flogram.i8.eq\": In,\n    \"Flogram.i8.toi32\": ks,\n    \"Flogram.i8.tou32\": ks,\n    \"Flogram.i8.toi64\": yo,\n    \"Flogram.i8.tou64\": xo,\n    \"Flogram.i8.tofp32\": Sn,\n    \"Flogram.i8.tofp64\": Nn\n}, {\n    \"Flogram.u8.add\": pn,\n    \"Flogram.u8.sub\": fn,\n    \"Flogram.u8.mul\": un,\n    \"Flogram.u8.div\": ln,\n    \"Flogram.u8.rem\": dn,\n    \"Flogram.u8.gt\": js,\n    \"Flogram.u8.lt\": Cs,\n    \"Flogram.u8.le\": Fs,\n    \"Flogram.u8.ge\": Ds,\n    \"Flogram.u8.ne\": An,\n    \"Flogram.u8.eq\": Es,\n    \"Flogram.u8.toi32\": ks,\n    \"Flogram.u8.tou32\": ks,\n    \"Flogram.u8.toi64\": yo,\n    \"Flogram.u8.tou64\": xo,\n    \"Flogram.u8.tofp32\": Pn,\n    \"Flogram.u8.tofp64\": Rn\n}, {\n    \"Flogram.bool.and\": Yi,\n    \"Flogram.bool.or\": wi,\n    \"Flogram.bool.xor\": Vi,\n    \"Flogram.bool.not\": vi,\n    \"Flogram.bool.eq\": Es,\n    \"Flogram.bool.ne\": _s\n}, {\n    \"Flogram.char.gt\": js,\n    \"Flogram.char.lt\": Cs,\n    \"Flogram.char.le\": Fs,\n    \"Flogram.char.ge\": Ds,\n    \"Flogram.char.eq\": Es,\n    \"Flogram.char.ne\": _s\n}));\nvar { LEB128_ENCODE: ht } = Jt, Nu = new Int8Array(1), Ru = new Uint8Array(1), ip = (c)=>{\n    let s = [], r = !0;\n    for(; r;){\n        let h = c & 127;\n        c >>= 7, c === 0 && !(h & 64) || c === -1 && h & 64 ? r = !1 : h |= 128, s.push(h);\n    }\n    return new Uint8Array(s);\n}, pp = (c)=>{\n    let s = [], r = !0;\n    for(; r;){\n        let h = c & 127;\n        c >>= 7, c === 0 ? r = !1 : h |= 128, s.push(h);\n    }\n    return new Uint8Array(s);\n}, lp = (c)=>{\n    let s = [];\n    for(; c >= 128;)s.push(c & 127 | 128), c >>>= 7;\n    return s.push(c), new Uint8Array(s);\n}, up = 128, fp = 127, Io = 64, hp = (c)=>{\n    c = c << 16 >> 16;\n    let s = [];\n    for(;;){\n        let r = c & fp;\n        c = c >> 7;\n        let h = c === 0, D = (r & Io) === 0, ce = h && D, e = c === -1, pe = (r & Io) !== 0;\n        if (ce || e && pe) {\n            s.push(r);\n            break;\n        }\n        r = r | up, s.push(r);\n    }\n    return s;\n};\nvar Ep = (c)=>{\n    let s = new Float32Array(1);\n    return s[0] = parseFloat(c), new Uint8Array(s.buffer);\n}, Ao = (c)=>{\n    let s = [], r = !0;\n    for(; r;){\n        let h = c & 127;\n        c >>= 7, c === 0 && !(h & 64) || c === -1 && h & 64 ? r = !1 : h |= 128, s.push(h);\n    }\n    return new Uint8Array(s);\n}, _p = (c)=>ht(c), Op = (c)=>{\n    let s = new Float64Array(1);\n    return s[0] = c, new Uint8Array(s.buffer);\n}, bp = (c)=>{\n    let s = [];\n    for(; c >= 128;)s.push(c & 127 | 128), c >>>= 7;\n    return s.push(c), new Uint8Array(s);\n}, dp = (c)=>{\n    let s = [], r = !0;\n    for(; r;){\n        let h = c & 127;\n        c >>= 7, c === 0 && !(h & 64) || c === -1 && h & 64 ? r = !1 : h |= 128, s.push(h);\n    }\n    return new Uint8Array(s);\n}, mp = (c)=>{\n    let s = new Uint8Array(1);\n    return s[0] = c === \"TRUE\" ? 1 : c === \"FALSE\" ? 0 : c, s;\n}, Tp = (c)=>{\n    let s = c.charCodeAt(0);\n    return ht(s);\n}, No = ()=>{\n    let c = new ArrayBuffer(4);\n    return new Float32Array(c)[0] = -0, [\n        ...new Uint8Array(c)\n    ];\n}, gp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    encode: Ao,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), yp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-1),\n    encode: Tp,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), xp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-1),\n    encode: mp,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        values: {\n            TRUE: 1,\n            FALSE: 0\n        }\n    })\n}), Ip = Object.freeze({\n    type: \"native\",\n    identity: 124,\n    opcode: 68,\n    none: No(),\n    encode: Op,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 43,\n            align: 2,\n            offset: 0,\n            size: 8\n        }),\n        store: Object.freeze({\n            opcode: 57,\n            align: 2,\n            offset: 0,\n            size: 8\n        })\n    })\n}), Ap = Object.freeze({\n    type: \"native\",\n    identity: 126,\n    opcode: 66,\n    none: ht(-1),\n    encode: bp,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 53,\n            align: 2,\n            offset: 0,\n            size: 8\n        }),\n        store: Object.freeze({\n            opcode: 55,\n            align: 2,\n            offset: 0,\n            size: 8\n        })\n    })\n}), Np = Object.freeze({\n    type: \"native\",\n    identity: 126,\n    opcode: 66,\n    none: ht(-9223372036854776e3),\n    encode: dp,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 52,\n            align: 2,\n            offset: 0,\n            size: 8\n        }),\n        store: Object.freeze({\n            opcode: 55,\n            align: 2,\n            offset: 0,\n            size: 8\n        })\n    })\n}), Rp = Object.freeze({\n    type: \"native\",\n    identity: 125,\n    opcode: 67,\n    none: No(),\n    encode: Ep,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 42,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 56,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), Sp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-1),\n    encode: _p,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), Pp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-2147483648),\n    encode: Ao,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), zp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-32768),\n    encode: hp,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), jp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    encode: lp,\n    none: ht(-1),\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 2,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 2,\n            offset: 0,\n            size: 4\n        })\n    })\n}), Cp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-128),\n    encode: ip,\n    decode: (c)=>new Int8Array([\n            c\n        ])[0],\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 0,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 0,\n            offset: 0,\n            size: 4\n        })\n    })\n}), Fp = Object.freeze({\n    type: \"native\",\n    identity: 127,\n    opcode: 65,\n    none: ht(-1),\n    encode: pp,\n    link: Object.freeze({\n        load: Object.freeze({\n            opcode: 40,\n            align: 0,\n            offset: 0,\n            size: 4\n        }),\n        store: Object.freeze({\n            opcode: 54,\n            align: 0,\n            offset: 0,\n            size: 4\n        })\n    })\n}), kt = Object.freeze({\n    \"Flogram.String\": gp,\n    \"Flogram.Char\": yp,\n    \"Flogram.Bool\": xp,\n    \"Flogram.FP64\": Ip,\n    \"Flogram.U64\": Ap,\n    \"Flogram.I64\": Np,\n    \"Flogram.FP32\": Rp,\n    \"Flogram.U32\": Sp,\n    \"Flogram.I32\": Pp,\n    \"Flogram.I16\": zp,\n    \"Flogram.U16\": jp,\n    \"Flogram.I8\": Cp,\n    \"Flogram.U8\": Fp\n});\nvar { TYPES_ASSIGN: Ro, TYPES_DRAW: Dp, TYPES_NOW: So, TYPES_ARRAY: q, TYPES_ARRAY_ASSIGNMENT: Up, TYPES_BRANCH_MATCH: Po, TYPES_BRANCH_DEFAULT: zo, TYPES_CONDITION: Ls, TYPES_LOOP: bs, TYPES_WHILE: kp, TYPES_FOREACH: Lp, TYPES_DATA: St, TYPES_COMPARE: jo, TYPES_ENUMERATION: at, TYPES_EXPRESSION: Lt, TYPES_LINK: Bt, TYPES_LOCAL: Je, TYPES_CONCAT: Co, TYPES_OBJECT: de, TYPES_RETURN: Ys, TYPES_SELECT: Pt, TYPES_MEMBER: ds, TYPES_STORE: Fo, TYPES_BREAK: Yp, TYPES_LITERAL: ve, TYPES_ARRAY_ACCESS: ws, TYPES_LINK_TO: zn, TYPES_VALUE_AT: Vs, TYPES_DROP: Do, TYPES_MAYBE: Qt, TYPES_MOVE: Uo, TYPES_NATIVE: He, TYPES_STRING: re, TYPES_FREE: wp, TYPES_FOR: Vp, TYPES_UP_TO: ko, TYPES_DOWN_TO: vp, TYPES_ALMOST_UP_TO: Lo, TYPES_ALMOST_DOWN_TO: Mp, TYPES_BRANCH: Yo, TYPES_CONTINUE: wo, TYPES_DEFAULT_BLOCK: jn, TYPES_BLOCK_END: zt, TYPES_STATEMENT: Vo, TYPES_DESTRUCTOR: vo, TYPES_SIZE: Mo, TYPES_WHILE_CONDITION: Cn, TYPES_FOREACH_CONDITION: Bo, TYPES_FOREACH_END: Ko, TYPES_FP32: Go, TYPES_I32: mt, TYPES_I64: Bp, TYPES_FP64: Kp, TYPES_CHAR: Fn, TYPES_BOOL: Dn, TYPES_BLOCK_BEGIN: Ho, TYPES_WHEN: Gp, TYPES_FUNCTION_CALL: Zo, TYPES_PROCEDURE: Hp, TYPES_CONSTRUCTOR: Zp, TYPES_UNREACHABLE: Xp } = Ns, { K_ASSIGNMENT: es, K_FLOGRAM: Qe } = Rt.Keywords, { ENUM_MEMORY_SIZE: Lu, ENUM_STACK_SIZE: Un, ARRAY_MEMORY_SIZE: ms, ARRAY_STACK_SIZE: Et, ARRAY_DEFAULT_CAPACITY: Wp, STRING_MEMORY_SIZE: kn, STRING_STACK_SIZE: Kt, OBJECT_MEMORY_SIZE: vs, OBJECT_STACK_SIZE: ts, NATIVE_MEMORY_SIZE: At, NATIVE_STACK_SIZE: Ts, NATIVE_SIZE: Yu, STEP: Tt, DOUBLE_STEP: _t, TRIPPLE_STEP: wu } = Rt.Sizes, jt = 2, Gt = 3, ss = 12, ns = 13, et = 16, _e = 26, i = 65, Xo = 71, qp = 113, $p = 114, gs = 70, Wo = 76, tt = 32, Ct = 33, F = 35, le = 36, Jp = 15, Ht = 11, qo = 4, Qp = 5, Xe = 64, pt = 127, Me = 108, el = 109, H = 106, tl = 107, Be = 54, st = 40, sl = 0, ue = 0, fe = 2, Yt = 4, nl = \"alloc\", Ln = \"dealloc\", $o = \"merge\", Jo = \"save\", ol = \"undo\", cl = \"undoPenultimate\", al = \"draw\", rl = \"drawI64\", il = \"drawFP32\", pl = \"drawFP64\", ll = \"now\", g = 0, Le = 1, Qo = \"Flogram.draw\", ul = \"Flogram.now\", ys = new Set([\n    \"==\",\n    \"!=\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"or\",\n    \"and\",\n    \"or\",\n    \"not\"\n]), fl = new Set([\n    \"I32\",\n    \"U32\",\n    \"Bool\",\n    \"FP32\",\n    \"I64\",\n    \"U64\",\n    \"FP64\"\n]), { LEB128_ENCODE: l } = Jt, { INT_ARRAY_START: hl, FLOAT_ARRAY_START: El, STRING_START: ec, CHAR_START: _l, END_OF_LINE: Ol, NAT_ON_HORIZON: bl, BIG_NAT_ON_HORIZON: dl, FLOAT_ON_HORIZON: ml, BIG_FLOAT_ON_HORIZON: Tl } = Rt.DrawStates, Yn, N = (c, s)=>`${s}.${c}`, tc = (c, s, r)=>{\n    let h = r.get(c);\n    if (h && h.length === 1) return h[0];\n    if (h && h.length > 1) return h[0];\n    throw console.log(c), console.log(s), Error(\"No Callees were found\");\n};\nfunction Ms(c, s, r, h, D) {\n    c?.description?.inputs.length > 0 ? Yn = c.description.inputs[0].data.name : c?.description?.outputs.length > 0 && (Yn = c.description.outputs[0].data.name);\n    let ce = (t)=>{\n        Ie(t.collection).length;\n    }, e = [], pe = new Set, me = !1, Oe = (t)=>{\n        pe.add(t);\n    }, $ = ()=>{\n        e.push(et, nl), Oe(\"alloc\");\n    }, Re = (t)=>{\n        t === Go ? (e.push(et, il), Oe(\"drawFP32\")) : t === Kp ? (e.push(et, pl), Oe(\"drawFP64\")) : t?.includes(\"64\") ? (e.push(et, rl), Oe(\"drawI64\")) : (e.push(et, al), Oe(\"draw\"));\n    }, lt = ()=>{\n        Oe(\"now\"), e.push(et, ll);\n    }, ut = (t = g)=>{\n        e.push(i, 0), $(), e.push(le, t);\n    }, Ye = ()=>{\n        e.push(F, g), e.push(F, Le), e.push(et, Jo), e.push(F, Le), e.push(F, g), e.push(et, Jo), Oe(\"save\");\n    }, nt = ()=>{\n        e.push(et, ol), e.push(le, Le), e.push(le, g), Oe(\"undo\");\n    }, dt = ()=>{\n        e.push(et, cl), e.push(le, Le), e.push(le, g), Oe(\"undoPenultimate\");\n    }, ft = ()=>{\n        e.push(et, $o), Oe(\"merge\");\n    }, yt = (t, n = !1)=>{\n        let o = t.path === Qe && t.name !== re && t.layout !== q && t.type !== q;\n        return n ? o && t.mutable : o;\n    }, { description: Zs } = c, { inputs: Xs, locals: Vt, statements: xs } = Zs, Ce = new Map, Fe = new Map, Dt = new Map;\n    {\n        let t = 0, n = (o)=>{\n            for (let p of o){\n                let { name: _, data: b } = p;\n                switch(Ce.set(_, t), Fe.set(_, p), b.type){\n                    case Qt:\n                    case St:\n                        {\n                            let { name: R, path: j } = b, U = N(R, j);\n                            switch(R){\n                                case re:\n                                    {\n                                        t = t + Kt | 0;\n                                        break;\n                                    }\n                                default:\n                                    {\n                                        let x = s.get(U);\n                                        if (!x) throw new Error(\"Key not found: \", U);\n                                        switch(x.type){\n                                            case He:\n                                                {\n                                                    t = t + Ts | 0;\n                                                    break;\n                                                }\n                                            case at:\n                                                {\n                                                    t = t + Un | 0;\n                                                    break;\n                                                }\n                                            case de:\n                                                {\n                                                    let { length: ee } = x;\n                                                    t = t + ts | 0;\n                                                    break;\n                                                }\n                                        }\n                                        break;\n                                    }\n                            }\n                            break;\n                        }\n                    case q:\n                        {\n                            t = t + Et | 0;\n                            break;\n                        }\n                    case Bt:\n                        {\n                            let R = s.get(N(b.name, b.path));\n                            b.name === re ? t = t + Kt | 0 : b.name === q || b.layout === q ? t = t + Et | 0 : R.type === de ? t = t + ts | 0 : t = t + Ts | 0;\n                            break;\n                        }\n                }\n            }\n        };\n        n(Xs), n(Vt);\n    }\n    let ge = 0, Ke = [];\n    for (let t of Vt){\n        let { data: n } = t, o = ()=>{\n            Ke.push(1, pt), ge = ge + 1 | 0;\n        }, p = ()=>{\n            Ke.push(1, pt), ge = ge + 1 | 0, Ke.push(1, pt), ge = ge + 1 | 0, Ke.push(1, pt), ge = ge + 1 | 0;\n        }, _ = ()=>{\n            Ke.push(1, pt), ge = ge + 1 | 0, Ke.push(1, pt), ge = ge + 1 | 0;\n        }, b = ()=>{\n            Ke.push(1, pt), ge = ge + 1 | 0, Ke.push(1, pt), ge = ge + 1 | 0;\n        }, R = (U)=>{\n            let { identity: x } = U;\n            Ke.push(1, x), ge = ge + 1 | 0;\n        }, j = ()=>{\n            Ke.push(1, pt), ge = ge + 1 | 0, Ke.push(1, pt), ge = ge + 1 | 0, Ke.push(1, pt), ge = ge + 1 | 0;\n        };\n        if (yt(n, !0)) {\n            o();\n            continue;\n        }\n        switch(n.type){\n            case q:\n                {\n                    p();\n                    break;\n                }\n            case Bt:\n                {\n                    let U = s.get(N(n.name, n.path));\n                    n.name === q ? p() : n.name === re ? _() : U && U.type === de ? b() : o();\n                    break;\n                }\n            case Qt:\n            case St:\n                {\n                    let { name: U, path: x } = n;\n                    switch(U){\n                        case re:\n                            {\n                                p();\n                                break;\n                            }\n                        default:\n                            {\n                                let ee = N(U, x), ie = s.get(ee);\n                                switch(ie.type){\n                                    case He:\n                                        {\n                                            R(ie);\n                                            break;\n                                        }\n                                    case at:\n                                        {\n                                            j();\n                                            break;\n                                        }\n                                    case de:\n                                        {\n                                            b();\n                                            break;\n                                        }\n                                }\n                                break;\n                            }\n                    }\n                    break;\n                }\n        }\n    }\n    ((t, n)=>{\n        for (let [o, p] of t)if (p.type == n) {\n            Ke.push(1, pt), ge = ge + 1 | 0;\n            break;\n        }\n    })(s, de);\n    let Ws = l(ge);\n    e.push(...Ws, ...Ke);\n    let qe = (t)=>{\n        if (typeof t !== de) return t;\n        switch(t.type){\n            case Je:\n                return t.name;\n            case zn:\n                return qe(t.value);\n            case Vs:\n                return qe(t.link);\n            case ds:\n                return `${t.type}_${t.trail.join(\"_\")}`;\n            case ws:\n                return t.array.name;\n            case Pt:\n                return qe(t.value);\n            case Fo:\n                return qe(t.link);\n        }\n        return null;\n    }, Ie = (t)=>{\n        if (!t) return null;\n        switch(t.type){\n            case ve:\n                return t;\n            case Je:\n                return Fe.get(t.name)?.data;\n            case Vs:\n                return Ie(t.link);\n            case zn:\n                return Ie(t.value);\n            case Uo:\n                return Ie(t.value);\n            case Qt:\n                return t;\n            case Mo:\n                {\n                    if (t.value.type === Je) return {\n                        name: mt,\n                        path: Qe,\n                        type: St\n                    };\n                    break;\n                }\n            case ws:\n                {\n                    let n = Ie(t.array);\n                    if (n.name === re) return {\n                        name: n.type === q ? re : Fn,\n                        path: Qe,\n                        type: St\n                    };\n                    let o = Fe.get(qe(t));\n                    return o.details || o.data.details || {\n                        ...o.data,\n                        type: o.data.name === q ? q : St\n                    };\n                }\n            case Pt:\n                {\n                    let { value: n, trail: o } = t, { name: p } = n, _ = Fe.get(p || qe(n)), { data: b } = _, R = N(b.name, b.path), j = s.get(R);\n                    if (j.type === at) {\n                        let { labels: ie } = j, je = ie.find((T)=>T.props.includes(o[0]));\n                        if (!je) {\n                            console.error(\"Get Type: Unknown enum label value.....\");\n                            return;\n                        }\n                        let k = s.get(N(je.name, R)).members.get(o[0]);\n                        if (o.length > 1) for(; o.length > 0;){\n                            let T = o.shift();\n                            k = s.get(N(k.name, k.path)).members.get(T);\n                        }\n                        return k;\n                    }\n                    let { indivisibles: U } = j, x = JSON.parse(JSON.stringify(o)), ee = j;\n                    for(; x.length > 0;){\n                        let ie = x.shift();\n                        if (x.length > 0) {\n                            let je = ee.members.get(ie), Ze = N(je.name, je.path);\n                            ee = s.get(Ze);\n                            continue;\n                        }\n                        ee = ee.members.get(ie);\n                    }\n                    return ee;\n                }\n            case Lt:\n                {\n                    let n = h.find((R)=>R.name === t.name && R.path === t.path);\n                    if (n) return n.description.outputs[0].data;\n                    let o = [\n                        ...c.description.locals,\n                        ...c.description.inputs\n                    ], p = (R)=>h.find((j)=>j.type === Hp && j.name === R.name)?.description.outputs[0], _ = (R, j)=>{\n                        let U;\n                        for(let x = 0; x < R.name.length - 1; x++)j = Fe.get(R.name[0]);\n                        if (j) {\n                            let x = N(j.data.name, j.data.path), ee = h.find((ie)=>ie.name === R.name[R.name.length - 1] && ie.path === x);\n                            if (ee) return ee.description.outputs[0];\n                            console.error(\"Unable to find shape: \", j, x);\n                        }\n                        return U?.description.members?.find((x)=>x.name === R.name[R.name.length - 1])?.description.outputs[0];\n                    }, b;\n                    if (t.path !== Qe) {\n                        if (b = p(t), typeof t.name == \"object\") {\n                            let R = o.find((U)=>U.name === t.name[0]).data;\n                            b = _(t, R);\n                            let j = t.name.length;\n                            t.name[j - 1] === Zp && (b = {\n                                data: R\n                            });\n                        }\n                        return b && b.data;\n                    } else {\n                        if (t.name === So) return {\n                            type: St,\n                            name: Bp,\n                            path: Qe\n                        };\n                        if (ys.has(t.name)) return {\n                            type: St,\n                            name: Dn,\n                            path: Qe\n                        };\n                        {\n                            let R = t.inputs.map((U)=>Ie(U)), j = h.find((U)=>U.description && Array.isArray(U.description.inputs) ? U.description.inputs.length !== R.length || U.name !== t.name || U.path !== t.path ? !1 : U.description.inputs.every((x, ee)=>x.data.name === R[ee].name) : !1);\n                            if (j) {\n                                let { description: U } = j, { outputs: x } = U;\n                                return x[0].data;\n                            } else {\n                                console.error(\"Not found:: \", t);\n                                return;\n                            }\n                        }\n                    }\n                    break;\n                }\n        }\n    }, Wn = (t)=>{\n        Ie(t)?.mutable && e.push(st, fe, ue);\n    }, I = (t, n = Ys)=>{\n        let o = 0, p = [], _ = (k, T)=>{\n            let K = {\n                type: \"call\",\n                key: k,\n                inputs: T\n            };\n            p.unshift(K);\n        }, b = (k)=>{\n            let T = {\n                type: \"value\",\n                value: k\n            };\n            p.unshift(T);\n        }, R = (k)=>{\n            let T = {\n                type: ds,\n                member: k\n            };\n            p.unshift(T);\n        }, j = (k, T, K, B, G)=>{\n            let Z = {\n                key: null,\n                stop: !1\n            }, M;\n            if (k && fs.includes(k.name)) if (k.name === re) e.push(i, Math.floor(Math.random() * 2)), e.push(i, Math.floor(Math.random() * 2)), e.push(Xo), Z.stop = !0;\n            else {\n                let { name: X } = k;\n                M = N(X.toLowerCase() + \".\" + ct(B), K), Yn = X;\n            }\n            else if (k) {\n                let { name: X, path: Q } = k, Ue = N(X, Q), O = s.get(Ue);\n                if (O.type === at) {\n                    let { labels: a } = O, z = Ie(T);\n                    if (N(z.name, z.path) === Ue) {\n                        let E = a.find((S)=>S.props.includes(T.trail[0])), f = s.get(N(E.name, Ue)).indivisibles.mapTrail.get(T.trail[0]);\n                        M = N(f.data.name.toLowerCase() + \".\" + ct(B), K);\n                    } else M = N(z.name.toLowerCase() + \".\" + ct(B), K);\n                } else {\n                    let { indivisibles: a } = O, { mapTrail: z } = a, E = G.every((f)=>{\n                        let S = Ie(f), m = N(S.name, S.path);\n                        return s.get(m).type === de;\n                    }), C = Ie(T);\n                    if ((B == \"==\" || B == \"!=\") && E) {\n                        let f = z.size - 1;\n                        for (let [S, m] of z){\n                            p.unshift({\n                                type: jo,\n                                currentIndex: f,\n                                name: B\n                            }), M = N(m.data.name.toLowerCase() + \".\" + ct(B), m.data.path);\n                            let L = G.map((v)=>({\n                                    type: Pt,\n                                    value: {\n                                        type: Je,\n                                        name: v.name || qe(v)\n                                    },\n                                    trail: [\n                                        m.trail\n                                    ]\n                                }));\n                            _(M, L);\n                            var Ne = L.length - 1 | 0;\n                            for(let v = Ne; v >= 0; v = v - 1 | 0){\n                                let ne = L[v];\n                                b(ne);\n                            }\n                            f--;\n                        }\n                        Z.stop = !0;\n                    } else G.every((f)=>Ie(f).name === re) ? Z.stop = !0 : M = N(C.name.toLowerCase() + \".\" + ct(B), K);\n                }\n            }\n            return Z.key = M, Z;\n        }, U = (k)=>{\n            let { name: T, path: K, inputs: B } = k;\n            if (ys.has(k.name)) return Dn;\n            if (fl.has(k.name)) return k.name;\n            let G = h.filter((M)=>M.name === T && M.path === K && M.description.inputs.filter((Ne)=>Ne.name.startsWith(\"member_\") ? !Ne.data.type === Bt && !K.includes(\".\") : !0).length === B.length);\n            if (G.length === 1) return G[0].description.outputs[0]?.data.name ?? \"\";\n            if (B.find((M)=>M.type == Lt)) {\n                let M = B.map((X)=>{\n                    if (X.type === Je) return Fe.get(X.name);\n                    if (X.type === ve) return {\n                        data: X\n                    };\n                    if (X.type === Lt) return {\n                        data: {\n                            name: U(X)\n                        }\n                    };\n                }), Ne = h.find((X)=>X.description && Array.isArray(X.description.inputs) ? X.description.inputs.length !== M.length ? !1 : X.description.inputs.every((Q, Ue)=>Q.data.name === M[Ue].data.name) : !1);\n                return Ne ? ys.has(Ne.name) ? Ne.description.inputs[0].data.name : Ne.description.outputs[0].data.name : \"unknown\";\n            } else {\n                let M = B.map((X)=>({\n                        data: Ie(X)\n                    })), Ne = h.find((X)=>X.description && Array.isArray(X.description.inputs) ? X.description.inputs.length !== M.length ? !1 : X.description.inputs.every((Q, Ue)=>Q.data.name === M[Ue].data.name) : !1);\n                if (Ne) return ys.has(Ne.name) ? Ne.description.inputs[0].data.name : Ne.description.outputs[0].data.name;\n                throw console.log(k), new Error(\"could not find the type for procedure: \", k.name);\n            }\n        }, x = (k)=>{\n            let { inputs: T, name: K, path: B } = k, G = N(K, B), Z = [\n                B\n            ], M;\n            if (typeof K === de) {\n                let X = K[0];\n                if (M = Fe.get(X), M) {\n                    Z.push(M.data.name);\n                    for(let Ue = 1; Ue <= K.length - 2; Ue++)X = K[Ue], M = Fe.get(X), M && Z.push(M.data.name);\n                }\n                let Q = K.length - 1 | 0;\n                G = N(K[Q], Z.join(\".\"));\n            }\n            if (B === \"Flogram\" && K !== Dp && K !== So) {\n                let X = T.find((a)=>a.type === Lt), Q = T.find((a)=>a.type === ve), Ue, O;\n                for (let a of T){\n                    let z = Ie(a);\n                    if (z) {\n                        Ue = z, O = a;\n                        break;\n                    }\n                }\n                if (Ue) {\n                    let a = j(Ue, O, B, K, T);\n                    if (G = a.key, a.stop) return;\n                } else if (Q) G = N(`${Q.name.toLowerCase()}.${ct(K)}`, B);\n                else if (X) G = N(`${U(X).toLowerCase()}.${ct(K)}`, B);\n                else {\n                    let a = h.find((E)=>E.name === k.name && E.path === k.path && E.description.inputs.length === k.inputs.length), z = h.filter((E)=>E.name === k.name && E.path === k.path && E.description.inputs.length === k.inputs.length);\n                    G = N(`${ys.has(a.name) ? a.description.inputs[0]?.data.name.toLowerCase() : a.description.outputs[0]?.data.name.toLowerCase()}.${ct(a.name)}`, B);\n                }\n            }\n            if (_(G, T), typeof K === de) {\n                let X = tc(G, T, r);\n                if (X) {\n                    let { procedure: Q } = X, { description: Ue } = Q, { self: O } = Ue, a = Fe.get(K[0]), z = N(a.data.name, a.data.path), E = s.get(z);\n                    if (E) {\n                        let C = Ce.get(K[0]), { indivisibles: f, members: S } = E, { mapTrail: m } = f;\n                        for(let L = O.length - 1 | 0; L >= 0; L--){\n                            let v = O[L];\n                            if (v.type === ds) {\n                                let ne = v.trail.join(\".\");\n                                if (m.get(ne)) {\n                                    let { data: Pe, address: oe } = m.get(ne), Ve = N(Pe.name, Pe.path), ae = {\n                                        isObject: s.get(Ve).type === de,\n                                        index: C,\n                                        address: oe\n                                    };\n                                    R(ae);\n                                } else throw Error(\"TODO: Using objects of depth greater than one.\");\n                            } else b(t);\n                        }\n                    }\n                }\n            }\n            if (G !== Qo) {\n                var Ne = T.length - 1 | 0;\n                for(let X = Ne; X >= 0; X = X - 1 | 0){\n                    let Q = T[X];\n                    b(Q);\n                }\n            }\n        }, ee = (k)=>{\n            let { key: T, inputs: K } = k;\n            if (T === Qo) {\n                for (let Z of K){\n                    let M = Ie(Z);\n                    Z.type === Pt ? M?.name === re ? (e.push(i, ...l(ec)), Re(), I(Z), e.push(le, g), e.push(st, fe, ue), Re(), e.push(F, g), e.push(st, fe, ue), Re()) : (I(Z), Re(M?.name)) : M?.name === re || Z.type === Co ? (e.push(i, ...l(ec)), Re(), I(Z), Re(), Re()) : M?.type === q || M?.name === q || M?.layout === q ? (Rs.includes(M.name) ? e.push(i, ...l(El)) : e.push(i, ...l(hl)), Re(), I(Z), e.push(_e), Re(), Re()) : M?.name === Fn ? (e.push(i, ...l(_l)), Re(), I(Z), Re()) : s.get(N(M.name, M.path))?.type === at ? (I(Z), e.push(_e, _e), Re()) : (I(Z), Re(M?.name));\n                }\n                e.push(i, ...l(Ol)), Re(), o = o - K.length | 0;\n                return;\n            }\n            if (T === ul) {\n                lt();\n                return;\n            }\n            let B = tc(T, K, r);\n            switch(B.type){\n                case He:\n                    {\n                        let { body: Z } = B;\n                        e.push(...Z);\n                        break;\n                    }\n                case \"artificial\":\n                    {\n                        let { index: Z } = B;\n                        e.push(et, Z);\n                        break;\n                    }\n            }\n            let { lengths: G } = B;\n            o = o - G.inputs | 0, o = o + G.outputs | 0;\n        }, ie = (k)=>{\n            let { value: T } = k, K = (O)=>{\n                let a = 0;\n                me = !0;\n                let z = qe(O), E, C;\n                if (O.type === Pt) {\n                    let { value: f, trail: S } = JSON.parse(JSON.stringify(O)), { name: m } = f, L = Fe.get(m), { data: v } = L, ne = N(v.name, v.path), Pe = s.get(ne), { indivisibles: oe } = Pe, { mapTrail: Ve } = oe, ae = S.join(\".\"), be = JSON.parse(JSON.stringify(S)), Te = Pe;\n                    for(; be.length > 0;){\n                        let xt = be.shift();\n                        if (be.length > 0) {\n                            let ot = Te.members.get(xt), $e = N(ot.name, ot.path);\n                            Te = s.get($e);\n                            continue;\n                        }\n                        Te = Te.members.get(xt);\n                    }\n                    let ke = N(Te.name, Te.path);\n                    E = s.get(ke);\n                } else {\n                    let f = Fe.get(z), { data: S } = f, { name: m, path: L, segment: v } = S, ne = N(m, L);\n                    E = s.get(ne), C = m === re;\n                }\n                if (E) {\n                    switch(E.type){\n                        case He:\n                            {\n                                ie({\n                                    value: O\n                                });\n                                let { link: f } = E, { load: S } = f;\n                                C || e.push(S.opcode, S.align, S.offset), a = a + 1 | 0;\n                                break;\n                            }\n                        case de:\n                            {\n                                let f = 0, S = (ne)=>{\n                                    ie({\n                                        value: O\n                                    });\n                                    let { link: Pe } = ne, { load: oe } = Pe;\n                                    e.push(oe.opcode, oe.align, oe.offset + f | 0), a = a + 1 | 0, f = f + oe.size | 0;\n                                }, m = ()=>{}, { indivisibles: L } = E, { mapTrail: v } = L;\n                                for (let ne of v.values()){\n                                    if (ne.type === Bt) {\n                                        m();\n                                        continue;\n                                    }\n                                    let { data: Pe } = ne, { name: oe, path: Ve } = Pe, ae = N(oe, Ve), be = s.get(ae);\n                                    switch(be.type){\n                                        case He:\n                                            {\n                                                S(be);\n                                                break;\n                                            }\n                                        case at:\n                                            {\n                                                ie({\n                                                    value: O\n                                                }), e.push(st, fe, ue + f), a = a + 1 | 0, f = f + Yt | 0, ie({\n                                                    value: O\n                                                }), e.push(i, ...l(Tt)), e.push(st, fe, ue + f), e.push(H), a = a + 1 | 0, f = f + Yt | 0, ie({\n                                                    value: O\n                                                }), e.push(i, ...l(_t)), e.push(st, fe, ue + f), e.push(H), a = a + 1 | 0, f = f + Yt | 0;\n                                                break;\n                                            }\n                                    }\n                                }\n                                break;\n                            }\n                    }\n                    return a;\n                }\n            }, B = (O, a = !0, z = !0)=>{\n                let E = 0;\n                me = !0;\n                function C(f) {\n                    let { literal: S, name: m, path: L, vSize: v } = f, ne = v || S.length;\n                    f.quantity.capacity && !v && f.quantity.capacity.type === ve && (ne = parseInt(f.quantity.capacity.literal, 10));\n                    let Pe = N(m, L), oe = s.get(Pe), Ve = oe.type === de || m === re && f.layout === q || f.contains === q;\n                    if (!f.quantity.capacity) if (f.literal) f.quantity.capacity = {\n                        type: ve,\n                        name: mt,\n                        path: Qe,\n                        literal: `${Math.max(f.literal?.length || 0, Wp)}`\n                    };\n                    else throw Error(\"Value without length provided for array container.\");\n                    if (Ve) I(f.quantity.capacity), m === re && f.layout === q ? e.push(i, ...l(kn)) : f.contains === q ? e.push(i, ...l(ms)) : oe.type === de && e.push(i, ...l(vs)), e.push(Me), $(), e.push(le, g), Ye();\n                    else {\n                        Ye(), I(f.quantity.capacity);\n                        let ae = N(f.name, f.path), be = s.get(ae), { store: Te } = be.link;\n                        e.push(i, ...l(Te.size)), e.push(Me), $(), e.push(le, g);\n                    }\n                    for(let ae = 0; ae < ne; ae++){\n                        let be = S[ae];\n                        if (be) if (be.name === re && f.layout === q || be.layout === q && oe.type !== de) {\n                            let Te = [];\n                            if (be.layout === q) e.push(F, g), e.push(F, g), e.push(F, g), e.push(F, g), e.push(i, ...l(ae)), e.push(i, ...l(ms)), e.push(Me), e.push(H), Te.push(be.literal), C(be), e.push(F, g), e.push(Be, fe, ue), e.push(i, ...l(Tt)), e.push(i, ...l(ae)), e.push(i, ...l(_t)), e.push(Me), e.push(H), e.push(H), I(be.quantity.size), e.push(Be, fe, ue), e.push(i, ...l(_t)), e.push(i, ...l(ae)), e.push(i, ...l(_t)), e.push(Me), e.push(H), e.push(H), I(be.quantity.size), e.push(Be, fe, ue), e.push(le, g);\n                            else {\n                                let ke = be.size || be.literal.length;\n                                for(let ot = 0; ot < ke; ot++)Te.push({\n                                    type: be.type,\n                                    path: be.path,\n                                    name: \"I32\",\n                                    literal: be.literal[ot].charCodeAt().toString()\n                                });\n                                let xt = {\n                                    type: ve,\n                                    name: mt,\n                                    layout: q,\n                                    path: be.path,\n                                    literal: Te,\n                                    quantity: {\n                                        size: {\n                                            literal: Te.length.toString(),\n                                            type: ve,\n                                            name: mt,\n                                            path: Qe\n                                        },\n                                        capacity: {\n                                            literal: Te.length.toString(),\n                                            type: ve,\n                                            name: mt,\n                                            path: Qe\n                                        }\n                                    }\n                                };\n                                e.push(F, g), e.push(F, g), e.push(F, g), e.push(i, ...l(ae)), e.push(i, ...l(vs)), e.push(Me), e.push(H), C(xt), e.push(F, g), e.push(Be, fe, ue), e.push(i, ...l(Tt)), e.push(i, ...l(ae)), e.push(i, ...l(_t)), e.push(Me), e.push(H), e.push(H), e.push(i, ...l(ke)), e.push(Be, fe, ue), e.push(le, g);\n                            }\n                        } else switch(oe.type){\n                            case He:\n                                {\n                                    let { link: Te } = oe, { store: ke } = Te;\n                                    e.push(F, g), e.push(i, ...l(At)), e.push(i, ...l(ae)), e.push(Me), e.push(H), !be || be.type === ve ? e.push(oe.opcode, ...oe.encode(be?.literal || 0)) : I(be), e.push(ke.opcode, ke.align, ke.offset), ft(), E = 3;\n                                    break;\n                                }\n                            case de:\n                                {\n                                    e.push(F, g), e.push(F, g), e.push(i, ...l(ae)), e.push(i, ...l(8)), e.push(Me), e.push(H), I(be), e.push(le, Le), e.push(Be, fe, ue), e.push(le, g), e.push(F, g), e.push(i, ...l(Tt)), e.push(i, ...l(ae)), e.push(i, ...l(_t)), e.push(Me), e.push(H), e.push(H), e.push(F, Le), e.push(Be, fe, ue);\n                                    break;\n                                }\n                        }\n                    }\n                }\n                return C(O), a && (e.push(F, g), E = 1), z && (I(O.quantity.size), I(O.quantity.capacity), E = 2), E;\n            }, G = (O, a, z = !0)=>{\n                let E = s.get(a);\n                ut();\n                let C = (m, L, v = null, ne = !1)=>{\n                    if (Ye(), dt(), e.push(F, g), e.push(F, g), e.push(F, g), ne && e.push(F, g), nt(), e.push(i, ...l(L)), e.push(H), e.push(F, g), e.push(Be, fe, ue), e.push(i, ...l(L)), e.push(i, ...l(Tt)), e.push(H), e.push(H), v != null) Q(v, v + 1 | 0);\n                    else if (m) I(ne ? m.size : m);\n                    else throw new Error(\"Unable to read object length\");\n                    if (e.push(Be, fe, ue), ne) {\n                        if (e.push(i, ...l(L)), e.push(i, ...l(_t)), e.push(H), e.push(H), v != null) Q(v + 1, v + 2 | 0);\n                        else if (m) I(m.capacity);\n                        else throw new Error(\"Unable to read object length\");\n                        e.push(Be, fe, ue);\n                    }\n                    e.push(le, g);\n                }, f = [];\n                for (let [m, L] of E.members){\n                    if (!L) continue;\n                    let v = O.find((oe)=>oe.name === m) || {\n                        name: m,\n                        value: L.value\n                    }, ne = N(L.name, L.path), Pe = s.get(ne);\n                    if (L.type === q) {\n                        e.push(i, ...l(ms)), $(), e.push(_e), f.push({\n                            data: {\n                                keyName: m,\n                                keyData: L\n                            },\n                            literal: v\n                        });\n                        continue;\n                    }\n                    switch(Pe.type){\n                        case He:\n                            {\n                                let { link: oe } = Pe, { store: Ve } = oe;\n                                if (L.type === Bt) Ye(), e.push(i, ...l(At)), $(), I(v.value), e.push(Ve.opcode, Ve.align, Ve.offset), nt();\n                                else if (L.name === re) e.push(i, ...l(_t)), $(), e.push(_e), f.push({\n                                    data: {\n                                        keyName: m,\n                                        keyData: L\n                                    },\n                                    literal: v\n                                });\n                                else {\n                                    e.push(i, ...l(Ve.size)), $();\n                                    let ae = JSON.parse(JSON.stringify(v.value));\n                                    ae.literal && (ae.name !== L.name || ae.path !== L.path) && (ae = {\n                                        ...ae,\n                                        name: L.name,\n                                        path: L.path\n                                    }), I(ae), e.push(Ve.opcode, Ve.align, Ve.offset);\n                                }\n                                ft();\n                                break;\n                            }\n                        case de:\n                            {\n                                e.push(i, ...l(_t)), $(), e.push(_e), f.push({\n                                    data: {\n                                        keyName: m,\n                                        keyData: L\n                                    },\n                                    literal: v\n                                });\n                                break;\n                            }\n                    }\n                }\n                if (f.length > 0) {\n                    let m = f[0], { data: L, literal: v } = m, { keyName: ne, keyData: Pe } = L, { type: oe, name: Ve, layout: ae, path: be } = Pe, ke = (($e)=>{\n                        let It = E.indivisibles.mapTrail;\n                        if (It.has($e)) return It.get($e).address;\n                        let Mt = Array.from(It.entries()).filter(([en])=>en.startsWith(`${$e}.`));\n                        return Mt.length ? (Mt.sort((en, Ec)=>en[1].address - Ec[1].address), Mt[0][1].address - 8) : null;\n                    })(ne), xt = N(Ve, be), ot = s.get(xt);\n                    if (Ve === re) {\n                        Ye(), I(v.value), e.push(_e), e.push(le, g);\n                        let $e = {\n                            type: ve,\n                            name: mt,\n                            literal: v.value.size || v.value.literal.length,\n                            path: Qe\n                        };\n                        C($e, ke), ft();\n                    } else if (ot.type === de) {\n                        Ye();\n                        let $e = G(v.value.literal, xt, !1);\n                        C({\n                            type: ve,\n                            name: mt,\n                            literal: $e,\n                            path: Qe\n                        }, ke), ft();\n                    } else if (oe === q || ae === q) if (v.value.type === Je) {\n                        let $e = Ce.get(v.value.name);\n                        Ye(), M(Pe, $e), C(Pe.quantity, ke, $e + 1, !0), ft();\n                    } else Ye(), B(v.value, !1, !1), C(v.value.quantity, ke, null, !0), ft();\n                    else throw Error(\"Error: Unable to identify type: \", ot.type);\n                }\n                let S = E.indivisibles.mapTrail.size + f.length;\n                return z && (e.push(F, g), e.push(i, ...l(S))), S;\n            }, Z = (O, a)=>{\n                let z = 0;\n                me = !0;\n                let E = Fe.get(a), C;\n                if (E) {\n                    let { data: S } = E, { name: m, path: L, segment: v } = S;\n                    C = N(m, L);\n                } else {\n                    let S = Ie(O);\n                    C = N(S?.name, S?.path);\n                }\n                let f = s.get(C);\n                switch(f.type){\n                    case He:\n                        {\n                            let { link: S } = f, { store: m } = S;\n                            e.push(i, ...l(m.size)), $(), e.push(le, g), e.push(F, g), I(O), e.push(m.opcode, m.align, m.offset), e.push(F, g), z = z + 7 | 0;\n                            break;\n                        }\n                    case de:\n                        {\n                            let S = 0, { indivisibles: m } = f, { mapTrail: L } = m, v = O.trail.join(\".\");\n                            switch(O.type){\n                                case Pt:\n                                    {\n                                        let ne = L.get(v);\n                                        if (ne && yt(ne.data)) {\n                                            let Pe = N(ne.data.name, ne.data.path), oe = s.get(Pe), { link: Ve } = oe, { store: ae } = Ve;\n                                            e.push(i, ...l(ae.size)), $(), e.push(le, g), e.push(F, g), I(O), e.push(ae.opcode, ae.align, ae.offset), e.push(F, g);\n                                            break;\n                                        }\n                                    }\n                                default:\n                                    {\n                                        I(O);\n                                        break;\n                                    }\n                            }\n                            break;\n                        }\n                }\n                return z;\n            }, M = (O, a = 0, z = 2)=>{\n                let { name: E, path: C } = O, f = N(E, \"Flogram\"), S = s.get(f), { link: m } = S, { store: L, load: v } = m, ne = a;\n                return ut(), e.push(i, 0), e.push(le, Le), e.push(jt, Xe), e.push(Gt, Xe), Q(ne + z, ne + z + 1 | 0), e.push(F, Le), e.push(Wo), e.push(ns, 1), e.push(i, ...l(L.size)), $(), Q(ne, ne + 1 | 0), e.push(F, Le), e.push(i, v.size), e.push(Me), e.push(H), e.push(v.opcode, v.align, v.offset), e.push(L.opcode, L.align, L.offset), ft(), e.push(F, Le), e.push(i, 1), e.push(H), e.push(le, Le), e.push(ss, 0), e.push(Ht), e.push(Ht), O.length;\n            }, Ne = (O, a = 2)=>{\n                let { name: z, path: E } = O, C = N(z, \"Flogram\"), f = s.get(C), { link: S } = f, { store: m, load: L } = S;\n                return ut(), Ye(), dt(), e.push(i, 0), e.push(le, Le), e.push(jt, Xe), e.push(Gt, Xe), e.push(F, g), e.push(i, ...l(At * a)), e.push(H), e.push(st, fe, ue), e.push(F, Le), e.push(Wo), e.push(ns, 1), e.push(i, ...l(m.size)), $(), e.push(F, g), e.push(st, fe, ue), e.push(F, Le), e.push(i, L.size), e.push(Me), e.push(H), e.push(L.opcode, L.align, L.offset), e.push(m.opcode, m.align, m.offset), ft(), e.push(F, Le), e.push(i, 1), e.push(H), e.push(le, Le), e.push(ss, 0), e.push(Ht), e.push(Ht), nt(), O.length;\n            }, X = (O, a)=>{\n                let z = s.get(a);\n                if (!z) throw new Error(\"No shape found\");\n                let { opcode: E } = z, C = z.encode(O);\n                e.push(E, ...C);\n            }, Q = (O, a)=>{\n                for(; O < a;)e.push(tt, O), O = O + 1 | 0;\n            };\n            if (!T) throw new Error(\"Invalid value provided to actionValue\");\n            switch(T.type){\n                case Lt:\n                    {\n                        x(T);\n                        break;\n                    }\n                case \"instance\":\n                    {\n                        let { path: O, members: a } = T;\n                        var Ue = a.length - 1 | 0;\n                        for(let z = Ue; z >= 0; z = z - 1 | 0){\n                            let E = a[z], { path: C, value: f } = E;\n                            b(f);\n                        }\n                        break;\n                    }\n                case Qt:\n                    {\n                        let { data: O } = T, { name: a, path: z } = O, E = N(a, z), C = s.get(E);\n                        T.layout === \"NONE\" ? e.push(C.opcode, ...C.none) : I(T.value), o = o + 1 | 0;\n                        break;\n                    }\n                case Vs:\n                    {\n                        let { link: O } = T;\n                        D.optimization;\n                        let a = K(O);\n                        o = o + a | 0;\n                        break;\n                    }\n                case zn:\n                    {\n                        let { value: O } = T, a = qe(O);\n                        if (Fe.get(a)?.data.type === q) {\n                            I({\n                                name: a,\n                                type: Je\n                            });\n                            return;\n                        }\n                        if (Ie(O)?.name === re) {\n                            I(O);\n                            return;\n                        }\n                        let E = Z(O, a);\n                        o = o + E | 0;\n                        break;\n                    }\n                case Mo:\n                    {\n                        let { value: O } = T;\n                        switch(O.type){\n                            case Je:\n                                {\n                                    if (Dt.get(O.name) && D.linkValueLoad) {\n                                        let a = Dt.get(O.name), z = a.source.length;\n                                        typeof a.source.literal === re.toLowerCase() && (z = literal.value.literal.length), e.push(i, ...l(z));\n                                    } else {\n                                        let a = Ce.get(O.name);\n                                        Q(a + 1 | 0, a + 2 | 0);\n                                    }\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n                case Co:\n                    {\n                        let { values: O } = T;\n                        ut(Le), Ye(), Ye();\n                        for (let a of O){\n                            let z = Ie(a), E = N(z.name, z.path), C = s.get(E);\n                            if (z.name === re) I(a, es), e.push(_e), e.push(_e);\n                            else if (z.type === q || z.layout === q) I(a, es), e.push(_e), e.push(_e), e.push(_e);\n                            else if (C?.type === at) console.log(Ie(a));\n                            else if (ls.includes(z.name)) {\n                                let { link: f } = C, { store: S, load: m } = f;\n                                e.push(i, ...l(Yt)), $(), e.push(i, ...l(sn.includes(z.name) ? dl : bl)), e.push(Be, fe, ue), e.push(i, ...l(S.size)), $(), I(a), z.mutable && e.push(m.opcode, m.align, m.offset), e.push(S.opcode, S.align, S.offset);\n                            } else if (Rs.includes(z.name)) {\n                                let { link: f } = C, { store: S, load: m } = f;\n                                e.push(i, ...l(Yt)), $(), e.push(i, ...l(z.name === Go ? ml : Tl)), e.push(Be, fe, ue), e.push(i, ...l(S.size)), $(), I(a), z.mutable && e.push(m.opcode, m.align, m.offset), e.push(S.opcode, S.align, S.offset);\n                            } else if (z.name === Fn) {\n                                let { link: f } = C, { store: S, load: m } = f;\n                                e.push(i, ...l(S.size)), $(), I(a), z.mutable && e.push(m.opcode, m.align, m.offset), e.push(S.opcode, S.align, S.offset);\n                            } else {\n                                let { link: f } = C, { store: S, load: m } = f;\n                                e.push(i, ...l(S.size)), $(), I(a), z.mutable && e.push(m.opcode, m.align, m.offset), e.push(S.opcode, S.align, S.offset);\n                            }\n                            ft();\n                        }\n                        nt(), nt(), ut(), e.push(F, Le), e.push(F, g), e.push(F, Le), e.push(tl), e.push(i, ...l(At)), e.push(el), o = o + 2 | 0;\n                        break;\n                    }\n                case ve:\n                    {\n                        let { literal: O, name: a, path: z } = T, E = N(a, z), C = s.get(E);\n                        if (T.layout === q) {\n                            B(T), o = o + 3 | 0;\n                            return;\n                        } else if (a === re) {\n                            let f = [];\n                            for (let m of O)f.push({\n                                type: ve,\n                                literal: m.charCodeAt(0).toString(),\n                                name: mt,\n                                path: \"Flogram\"\n                            });\n                            let S = {\n                                ...T,\n                                name: mt,\n                                layout: q,\n                                contains: null,\n                                quantity: {\n                                    capacity: {\n                                        literal: f.length.toString(),\n                                        type: ve,\n                                        name: mt,\n                                        path: Qe\n                                    },\n                                    size: {\n                                        literal: f.length.toString(),\n                                        type: ve,\n                                        name: mt,\n                                        path: Qe\n                                    }\n                                },\n                                literal: f\n                            };\n                            B(S), e.push(_e), o = o + 2 | 0;\n                            return;\n                        }\n                        if (C) if (C.type === de) G(O, E), o = o + 2 | 0;\n                        else if (C.type === at) {\n                            if (X(O, E), o = o + 3 | 0, T.props?.length > 0) {\n                                let f = N(a, z), S = N(O, f), L = s.get(S).indivisibles.mapIndex, v = Object.freeze({\n                                    type: ve,\n                                    name: O,\n                                    literal: T.props.map((ne)=>({\n                                            name: L.get(T.props.indexOf(ne)).trail,\n                                            value: ne\n                                        })),\n                                    path: f\n                                });\n                                G(v.literal, S);\n                            } else e.push(i, 0), e.push(i, 0);\n                            return;\n                        } else X(O, E), o = o + 1 | 0;\n                        else throw console.log(E), new Error(\"NO SHAPE FOUND!!!!!!!!!\", T);\n                        break;\n                    }\n                case ws:\n                    {\n                        let { array: O, index: a } = T, z = qe(O), E = Ce.get(z), C = Ie(O);\n                        E != null;\n                        let f = ()=>{\n                            I(O), e.push(_e), e.push(_e);\n                        }, S = N(C.name, C.path);\n                        me = !0;\n                        let m = s.get(S);\n                        switch(m.type){\n                            case He:\n                                if (C.contains === q || C?.type === q && C?.layout === q || C?.name === re && C.contains) E != null ? Q(E, E + 1 | 0) : f(), I(a), e.push(i, ...l(At)), e.push(Me), e.push(H), e.push(le, g), Ye(), Ne(C);\n                                else if (C.name === re && C.type === q) E != null ? Q(E, E + 1 | 0) : f(), I(a), e.push(i, ...l(At)), e.push(Me), e.push(H), e.push(le, g), Ye(), Ne(C, 2);\n                                else {\n                                    let { link: L } = m, { load: v } = L;\n                                    E != null ? Q(E, E + 1 | 0) : f(), I(a), e.push(i, ...l(v.size)), e.push(Me), e.push(H), e.push(v.opcode, v.align, v.offset), o = o + 1 | 0;\n                                    break;\n                                }\n                            case de:\n                                {\n                                    E ? Q(E, E + 1 | 0) : f(), I(a), C?.type === q ? C?.name !== re && !C?.contains ? e.push(i, ...l(At)) : C.name === re ? e.push(i, ...l(kn)) : e.push(i, ...l(ms)) : e.push(i, ...l(vs)), e.push(Me), e.push(H), e.push(st, fe, ue), Q(E, E + 1 | 0), e.push(i, ...l(At)), I(a), C?.type === q ? C?.name !== re && !C?.contains ? e.push(i, ...l(At)) : C.name === re ? e.push(i, ...l(kn)) : e.push(i, ...l(ms)) : e.push(i, ...l(vs)), e.push(Me), e.push(H), e.push(H), e.push(st, fe, ue), o = o + 2 | 0;\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n                case Uo:\n                    {\n                        I(T.value);\n                        break;\n                    }\n                case Je:\n                    {\n                        let { name: O } = T, a = Ce.get(O), z = Fe.get(O);\n                        if (D.optimization) {\n                            let f = Dt.get(z.name);\n                            if (f) {\n                                let S = (m)=>m.name === Dn ? m.literal === \"FALSE\" || m.literal == \"0\" ? 0 : 1 : parseInt(f.source.literal, 10);\n                                if (f.source.name !== re && f.source.layout !== q) {\n                                    let m = S(f.source);\n                                    e.push(i, ...l(m));\n                                    return;\n                                }\n                            }\n                        }\n                        let { data: E } = z, C = s.get(N(E.name, E.path));\n                        switch(E.type){\n                            case Bt:\n                                {\n                                    E.name === q ? (Q(a, a + Et | 0), o = o + Et | 0) : C.type === de ? (Q(a, a + ts | 0), o = o + ts | 0) : E.name === re ? (Q(a, a + Kt | 0), o = o + Kt | 0) : (Q(a, a + Ts | 0), o = o + Ts | 0);\n                                    break;\n                                }\n                            case q:\n                                {\n                                    n === es && E.quantity.capacity ? (M(E, a), e.push(F, g), E.quantity.capacity ? (I(E.quantity.size), I(E.quantity.capacity)) : Q(a + 1, a + Et | 0)) : (Q(a, a + Et | 0), o = o + Et | 0);\n                                    break;\n                                }\n                            case Qt:\n                            case St:\n                                {\n                                    let { name: f, path: S } = E, m = N(f, S), L = s.get(m);\n                                    switch(E.layout){\n                                        case q:\n                                            {\n                                                Q(a, a + Et | 0), o = o + Et | 0;\n                                                break;\n                                            }\n                                        default:\n                                            {\n                                                switch(L.type){\n                                                    case He:\n                                                        {\n                                                            if (f === re) {\n                                                                n === es ? (ut(), Ye(), Oe(\"save\"), e.push(i, 0), e.push(le, g), e.push(jt, Xe), e.push(Gt, Xe), e.push(i, Yt), $(), e.push(tt, a), e.push(F, g), e.push(i, ...l(At)), e.push(Me), e.push(H), e.push(st, fe, ue), e.push(Be, fe, ue), e.push(F, g), e.push(i, 1), e.push(H), e.push(le, g), e.push(et, $o), Oe(\"merge\"), e.push(F, g), e.push(tt, a + 1), e.push(gs), e.push(ns, 1), e.push(ss, 0), e.push(Ht), e.push(Ht), nt(), Oe(\"undo\"), e.push(F, g), e.push(tt, a + 1)) : (Q(a, a + 2 | 0), o = o + 2 | 0);\n                                                                break;\n                                                            } else Q(a, a + 1 | 0);\n                                                            break;\n                                                        }\n                                                    case at:\n                                                        {\n                                                            Q(a, a + Un | 0), o = o + Un | 0;\n                                                            break;\n                                                        }\n                                                    case de:\n                                                        {\n                                                            Q(a, a + ts | 0), o = o + ts | 0;\n                                                            break;\n                                                        }\n                                                }\n                                                break;\n                                            }\n                                    }\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n                case Pt:\n                    {\n                        let { value: O, trail: a } = T, z = O.name || O.link || O.value;\n                        me = !0;\n                        let E = Fe.get(z), C;\n                        if (E) {\n                            let { data: Te } = E;\n                            C = N(Te.name, Te.path);\n                        } else {\n                            let Te = Ie(O);\n                            C = N(Te.data?.name, Te.data?.path);\n                        }\n                        let f = s.get(C);\n                        if (f.type === at) {\n                            let { opcode: Te } = f;\n                            Ye(), I(O), e.push(_e), e.push(le, g);\n                            let ke = f.labels.find((Mt)=>Mt.props.includes(a[0]));\n                            if (e.push(_e), e.push(F, g), !ke) {\n                                console.error(\"Load value: Unknown enum label value.....\");\n                                return;\n                            }\n                            let ot = s.get(N(ke.name, C)).indivisibles.mapTrail.get(a[0]);\n                            e.push(i, ...l(ot.address)), e.push(H);\n                            let $e = s.get(N(ot.data.name, ot.data.path)), { load: It } = $e.link;\n                            e.push(It.opcode, It.align, It.offset), nt();\n                            return;\n                        }\n                        let { indivisibles: S } = f, { mapTrail: m } = S, L = JSON.parse(JSON.stringify(a)), v = m.get(a[0]), { address: ne } = v, Pe = [\n                            ne\n                        ], oe = f;\n                        for(; L.length > 0;){\n                            let Te = L.shift();\n                            if (L.length > 0) {\n                                let ke = oe.members.get(Te), xt = N(ke.name, ke.path);\n                                if (oe = s.get(xt), oe.indivisibles) {\n                                    let { indivisibles: ot } = oe, { mapTrail: $e } = ot, It = $e.get(L[0]), { address: Mt } = It;\n                                    Pe.push(Mt);\n                                }\n                                continue;\n                            }\n                            oe = oe.members.get(Te);\n                        }\n                        let Ve = N(oe.name, oe.path), ae = s.get(Ve), be = Ce.get(z);\n                        for(e.push(tt, ...l(be)); Pe.length > 1;){\n                            let Te = Pe.shift();\n                            e.push(i, ...l(Te)), e.push(H), e.push(st, fe, ue);\n                        }\n                        if (e.push(i, ...l(Pe[0])), e.push(H), oe.type === q || oe.layout === q) e.push(le, g), e.push(F, g), e.push(i, ...l(_t)), e.push(H), e.push(F, g), e.push(i, ...l(Tt)), e.push(H), e.push(F, g);\n                        else if (oe.name === re) {\n                            if (e.push(le, g), n === es) {\n                                Ye(), Ne(oe, 1), e.push(i, 0), e.push(i, 0);\n                                return;\n                            }\n                            e.push(F, g), e.push(i, ...l(Tt)), e.push(H), e.push(F, g);\n                        } else if (ae.type === de) e.push(le, g), e.push(F, g), e.push(i, ...l(Tt)), e.push(H), e.push(F, g);\n                        else if (ae.type === at) e.push(le, g), e.push(F, g), e.push(st, fe, ue), e.push(F, g), e.push(st, fe, ue), e.push(F, g), e.push(st, fe, ue);\n                        else if (ae.link) {\n                            let { link: Te } = ae, { load: ke } = Te;\n                            e.push(ke.opcode, ke.align, ke.offset);\n                        } else throw Error(\"Unhandled Case: Could read to program not running!!!!\");\n                        break;\n                    }\n            }\n        }, je = (k)=>{\n            let { name: T, currentIndex: K } = k;\n            if (K === 0) e.push(Ct, Ce.size + 1);\n            else if (e.push(tt, Ce.size + 1), T === \"==\") e.push(qp);\n            else if (T === \"!=\") e.push($p);\n            else throw new Error(`Unknown operator ${T} for objects`);\n        }, Ze = (k)=>{\n            let { member: T } = k, { isObject: K, index: B, address: G } = T;\n            if (K) {\n                e.push(tt, ...l(B)), e.push(i, ...l(G)), e.push(H), e.push(tt, ...l(B)), e.push(i, ...l(G + Tt)), e.push(H);\n                return;\n            }\n            e.push(tt, ...l(B)), e.push(i, ...l(G)), e.push(H);\n        };\n        for(b(t); p.length > 0;){\n            let k = p.shift();\n            switch(k.type){\n                case \"call\":\n                    {\n                        ee(k);\n                        break;\n                    }\n                case \"value\":\n                    {\n                        ie(k);\n                        break;\n                    }\n                case ds:\n                    {\n                        Ze(k);\n                        break;\n                    }\n                case jo:\n                    {\n                        je(k);\n                        break;\n                    }\n            }\n        }\n        return o;\n    }, Xt = (t)=>{\n        let n = (p, _)=>{\n            for(; p < _;)_ = _ - 1 | 0, e.push(Ct, _);\n        }, o = (p, _)=>{\n            if (yt(_, !0)) {\n                n(p, p + 1 | 0);\n                return;\n            }\n            switch(_.type){\n                case Bt:\n                    {\n                        _.name === q ? n(p, p + Et | 0) : _.name === re ? n(p, p + Kt | 0) : n(p, p + Ts | 0);\n                        break;\n                    }\n                case re:\n                    {\n                        n(p, p + Kt | 0);\n                        break;\n                    }\n                case q:\n                    {\n                        n(p, p + Et | 0);\n                        break;\n                    }\n                case Qt:\n                case St:\n                    {\n                        let { name: b, path: R } = _, j = N(b, R), U = s.get(j);\n                        switch(b){\n                            case re:\n                                {\n                                    n(p, p + 2 | 0);\n                                    break;\n                                }\n                            case q:\n                                {\n                                    n(p, p + Number(_.quantity.capacity.literal) | 0);\n                                    break;\n                                }\n                            default:\n                                {\n                                    switch(U.type){\n                                        case He:\n                                            {\n                                                b === re ? n(p, p + 2 | 0) : n(p, p + 1 | 0);\n                                                break;\n                                            }\n                                        case at:\n                                            {\n                                                n(p, p + 3 | 0);\n                                                break;\n                                            }\n                                        case de:\n                                            {\n                                                n(p, p + 2 | 0);\n                                                break;\n                                            }\n                                    }\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n            }\n        };\n        switch(t.type){\n            case Je:\n                {\n                    let { name: p } = t, _ = Ce.get(p), b = Fe.get(p), { data: R } = b;\n                    o(_, R);\n                    break;\n                }\n            case Pt:\n                {\n                    let { value: p, trail: _ } = t, { name: b } = p, R = Fe.get(b), { data: j } = R, U = N(j.name, j.path), x = s.get(U), { indivisibles: ee } = x, { mapTrail: ie } = ee, je = _.join(\".\"), Ze = JSON.parse(JSON.stringify(_)), k = ie.get(je), { index: T } = k, K = x;\n                    for(; Ze.length > 0;){\n                        let G = Ze.shift();\n                        K = K.members.get(G);\n                    }\n                    let B = Ce.get(b);\n                    K.type == q ? n(B + T | 0, B + T + Et | 0) : K.type == re ? n(B + T | 0, B + T + Kt | 0) : n(B + T | 0, B + T + 1 | 0);\n                    break;\n                }\n        }\n    }, y = (t, n)=>{\n        let { array: o, index: p } = t;\n        me = !0;\n        let _ = 0, b = Ce.get(o.name), R = ()=>{\n            e.push(tt, b);\n        }, j = Fe.get(qe(o)), { data: U } = j, { name: x, path: ee } = U, ie = N(x, ee), je = s.get(ie);\n        switch(je.type){\n            case He:\n                {\n                    R(), I(p);\n                    let { link: Ze } = je, { store: k } = Ze;\n                    e.push(i, k.size), e.push(Me), e.push(H);\n                    let T = Ie(n);\n                    I(n), T.mutable && e.push(st, fe, ue), e.push(k.opcode, k.align, k.offset), _ = _ + 4 | 0;\n                    break;\n                }\n            case de:\n                {\n                    R(), I(p), e.push(i, Yt), e.push(Me), e.push(H), e.push(le, g), e.push(F, g), e.push(F, g), e.push(i, Yt), e.push(H), I(n), e.push(Be, fe, ue), e.push(Be, fe, ue), _ = _ + 4 | 0;\n                    break;\n                }\n        }\n        return _;\n    }, u = (t, n)=>{\n        let { value: o, trail: p } = t, { name: _ } = o;\n        me = !0;\n        let b = Fe.get(_), { data: R } = b, j = N(R.name, R.path), U = s.get(j), { indivisibles: x } = U, { mapTrail: ee } = x, ie = p.join(\".\"), je = JSON.parse(JSON.stringify(p)), Ze = ee.get(ie), { address: k } = Ze, T = U;\n        for(; je.length > 0;){\n            let G = je.shift();\n            if (je.length > 0) {\n                let Z = T.members.get(G), M = N(Z.name, Z.path);\n                T = s.get(M);\n                continue;\n            }\n            T = T.members.get(G);\n        }\n        let K = N(T.name, T.path), B = s.get(K);\n        switch(B.type){\n            case He:\n                {\n                    let { link: G } = B, { store: Z } = G, M = Ce.get(_);\n                    e.push(tt, ...l(M)), e.push(i, ...l(k)), e.push(H), I(n), e.push(Z.opcode, Z.align, Z.offset);\n                    break;\n                }\n        }\n    }, P = (t, n)=>{\n        let { link: o } = t;\n        me = !0;\n        let p = 0, { name: _, path: b, layout: R } = Ie(o), j = N(_, b), U = s.get(j);\n        if (_ === q || R === q) {\n            I(o), e.push(_e), e.push(le, g);\n            let x = Ce.get(qe(o));\n            I(n), e.push(Ct, x + 2 | 0), e.push(Ct, x + 1 | 0), e.push(Ct, x), e.push(F, g), e.push(et, Ln), Oe(\"dealloc\");\n        } else if (_ === re) {\n            I(o), e.push(_e), e.push(le, g);\n            let x = Ce.get(qe(o));\n            I(n), e.push(Ct, x + 1 | 0), e.push(Ct, x), e.push(F, g), e.push(et, Ln), Oe(\"dealloc\");\n            return;\n        }\n        switch(U.type){\n            case He:\n                {\n                    I(o), I(n);\n                    let { link: x } = U, { store: ee } = x;\n                    e.push(ee.opcode, ee.align, ee.offset), p = p + 1 | 0;\n                    break;\n                }\n            case de:\n                {\n                    let x = 0, ee = (G, Z, M = \"\")=>{\n                        let Ne = M ? `${M}.${G.name}` : G.name, X = Z.get(Ne);\n                        if (X) {\n                            let { data: Q } = X, Ue = N(Q.name, Q.path), O = s.get(Ue), { store: a } = O.link;\n                            I(o), e.push(_e), e.push(i, ...l(X.address)), e.push(H), I(G.value), e.push(a.opcode, a.align, a.offset);\n                        } else if (G.value && G.value.literal) for (let Q of G.value.literal)ee(Q, Z, Ne);\n                    };\n                    if (n.type === Je) {\n                        let { name: G } = n;\n                        if (x = Ce.get(G), t.link.name.startsWith(ds)) {\n                            let Z = Ce.get(t.link.name), { name: M, path: Ne } = Fe.get(G), X = N(M, Ne), Q = s.get(X), { indivisibles: Ue } = Q, { mapTrail: O } = Ue;\n                            for (let a of O){\n                                let { data: z } = a, E = N(z.name, z.path), C = s.get(E), { load: f, store: S } = C.link;\n                                e.push(i, ...l(Z)), e.push(i, ...l(a.address)), e.push(H), e.push(i, ...l(x)), e.push(i, ...l(a.address)), e.push(H), e.push(f.opcode, f.align, f.offset), e.push(S.opcode, S.align, S.offset);\n                            }\n                            return;\n                        }\n                        return I(o), e.push(_e), e.push(tt, ...l(x)), e.push(Be, fe, ue), I(o), e.push(_e), e.push(i, ...l(Tt)), e.push(H), e.push(tt, ...l(x + 1 | 0)), e.push(Be, fe, ue), p = p + 2 | 0, p;\n                    }\n                    let { literal: ie, name: je, path: Ze } = n, k = N(je, Ze), T = s.get(k), { indivisibles: K } = T, { mapTrail: B } = K;\n                    for (let G of ie)ee(G, B);\n                }\n        }\n        return p;\n    }, Y = (t, n)=>{\n        let { type: o, link: p } = n, _ = 0, b = (ee)=>{\n            let ie = Array.from(ee.members.values()).reduce((K, B)=>B ? K + 1 : K, 0);\n            ut();\n            let { indivisibles: je } = ee, { mapTrail: Ze } = je, k = (K, B)=>{\n                let { store: G, load: Z } = K.link, { address: M } = Ze.get(B);\n                e.push(i, ...l(G.size)), $(), I(p), e.push(_e), e.push(i, ...l(M)), e.push(H), e.push(Z.opcode, Z.align, Z.offset), e.push(G.opcode, G.align, G.offset);\n            }, T = (K, B)=>{\n                e.push(i, ...l(_t)), $(), e.push(le, Le);\n                for (let [Z, M] of K.members){\n                    if (!M) continue;\n                    let Ne = N(M.name, M.path), X = s.get(Ne);\n                    if (X.type === de) {\n                        Ye(), T(X, `${B}.${Z}`);\n                        continue;\n                    }\n                    let Q = `${B}.${Z}`;\n                    k(X, Q);\n                }\n                e.push(F, Le), e.push(F, Le), e.push(i, ...l(_t)), e.push(H), e.push(Be, fe, ue);\n                let G = Array.from(K.members.values()).reduce((Z, M)=>M ? Z + 1 : Z, 0);\n                e.push(F, Le), e.push(i, ...l(Tt)), e.push(H), e.push(i, ...l(G)), e.push(Be, fe, ue), nt();\n            };\n            for (let [K, B] of ee.members){\n                if (!B) continue;\n                let G = N(B.name, B.path), Z = s.get(G);\n                if (Z.type === de) {\n                    T(Z, K);\n                    continue;\n                }\n                k(Z, K);\n            }\n            e.push(F, g), e.push(i, ...l(ie));\n        }, { name: R, path: j } = Ie(p || n), U = N(R, j), x = s.get(U);\n        switch(x.type){\n            case He:\n            case de:\n                {\n                    if (t.type === Je) return b(x), Xt(t), _;\n                    break;\n                }\n        }\n        return _;\n    }, J = (t, n, o)=>{\n        let p = s.get(t), _ = (R)=>{\n            switch(R.type){\n                case Je:\n                    {\n                        let { name: j } = R, U = Ce.get(j);\n                        e.push(tt, U);\n                        break;\n                    }\n                case ve:\n                    {\n                        let { literal: j } = R, U = p.type === He ? j : p.evaluate(j), x = l(U);\n                        e.push(i, ...x);\n                        break;\n                    }\n            }\n        }, b = ()=>{\n            switch(p.type){\n                case at:\n                case He:\n                    {\n                        e.push(Xo), e.push(ns, 0);\n                        break;\n                    }\n            }\n        };\n        switch(p.type){\n            case at:\n                {\n                    I(n), e.push(_e), e.push(_e), I(o), e.push(_e), e.push(_e), b();\n                    break;\n                }\n            case He:\n                {\n                    I(n), I(o), b();\n                    break;\n                }\n        }\n    }, w = [], W = (t)=>{\n        let n = {\n            type: Vo,\n            statement: t\n        };\n        w.unshift(n);\n    }, ye = ()=>{\n        let t = {\n            type: Ho\n        };\n        w.unshift(t);\n    };\n    w.unshift({\n        type: zt\n    });\n    let ze = (t, n)=>{\n        if (t.members) for (let [o, p] of t.members.entries()){\n            let _ = N(p?.name, p?.path), b = s.get(_);\n            if (b && b.type === de) {\n                let R = ze(b, _, n);\n                R && he.push(R);\n            }\n        }\n        return t.members && t.members.has(vo) ? n : null;\n    }, he = [];\n    Vt.forEach((t)=>{\n        let n = N(t.data.name, t.data.path), o = s.get(n);\n        if (o && o.type === de) {\n            let p = ze(o, n);\n            p && he.push(p);\n        }\n    });\n    let xe = he.map((t)=>({\n            type: Do,\n            expression: {\n                type: Lt,\n                name: vo,\n                path: t,\n                inputs: []\n            }\n        }));\n    for (let t of xe)W(t);\n    var Ee = xs.length - 1 | 0;\n    for(let t = Ee; t >= 0; t = t - 1 | 0){\n        let n = xs[t];\n        W(n);\n    }\n    let we = (t)=>{\n        let { target: n, source: o } = t;\n        if (D.optimization) {\n            if (o.type === ve && o.path === Qe) {\n                let b = qe(n);\n                b && Dt.set(b, {\n                    target: n,\n                    source: o\n                });\n            }\n            o.type !== ve && Dt.get(n.name || \"\") && Dt.delete(n.name);\n        }\n        if (n.type === Fo) {\n            P(n, o);\n            return;\n        }\n        if (n.type === Up) {\n            y(n, o);\n            return;\n        }\n        if (n.type === Pt) {\n            u(n, o);\n            return;\n        }\n        let p, _ = Ie(o);\n        if (_ && (p = s.get(N(_.name, _.path))), p && p.type === de && _.type !== ve) {\n            let b = o;\n            if (o.type === Vs) {\n                I(o.link), Xt(n);\n                return;\n            }\n            b = {\n                type: \"value_copy\",\n                link: o\n            }, Y(n, b);\n            return;\n        }\n        I(o, es), Xt(n);\n    }, Ge = (t)=>{\n        let { statements: n } = t;\n        e.push(jt, Xe), e.push(Gt, Xe);\n        let o = {\n            type: zt,\n            layout: bs\n        };\n        w.unshift(o), w.unshift(o), w.unshift({\n            type: wo\n        });\n        var p = n.length - 1 | 0;\n        for(let _ = p; _ >= 0; _ = _ - 1 | 0){\n            let b = n[_];\n            W(b);\n        }\n    }, rs = (t)=>{\n        let { statements: n, condition: o } = t;\n        e.push(jt, Xe), e.push(Gt, Xe);\n        let p = {\n            type: zt,\n            layout: bs\n        };\n        w.unshift(p), w.unshift(p), w.unshift({\n            type: Cn,\n            condition: o\n        });\n        var _ = n.length - 1 | 0;\n        for(let b = _; b >= 0; b = b - 1 | 0){\n            let R = n[b];\n            W(R);\n        }\n    }, vt = (t)=>{\n        let { statements: n, collection: o, index: p, iterator: _ } = t;\n        e.push(i, 0), p ? e.push(Ct, Ce.get(p)) : e.push(le, g), e.push(jt, Xe), e.push(Gt, Xe);\n        let b = {\n            type: zt,\n            layout: bs\n        };\n        w.unshift(b), w.unshift(b), w.unshift({\n            type: Ko,\n            index: p\n        });\n        var R = n.length - 1 | 0;\n        for(let j = R; j >= 0; j = j - 1 | 0){\n            let U = n[j];\n            W(U);\n        }\n        w.unshift({\n            type: Bo,\n            collection: o,\n            iterator: _,\n            index: p\n        });\n    }, De = (t)=>{\n        let { statements: n } = t;\n        t.initializer && we(t.initializer), e.push(jt, Xe), e.push(Gt, Xe);\n        let o = {\n            type: zt,\n            layout: bs\n        };\n        w.unshift(o), w.unshift(o);\n        let p = {\n            type: Lt,\n            name: t.modifier === ko ? \"<=\" : t.modifier === Lo ? \"<\" : t.modifier === vp ? \">=\" : t.modifier === Mp ? \">\" : \"\",\n            path: Qe,\n            inputs: [\n                t.variable,\n                t.limit\n            ]\n        };\n        w.unshift({\n            type: Cn,\n            condition: p\n        });\n        let _ = {\n            type: Lt,\n            name: t.modifier === ko || t.modifier === Lo ? \"+\" : \"-\",\n            path: Qe,\n            inputs: [\n                t.variable,\n                t.step\n            ]\n        }, b = {\n            type: Ro,\n            source: _,\n            target: t.variable\n        };\n        W(b);\n        var R = n.length - 1 | 0;\n        for(let j = R; j >= 0; j = j - 1 | 0){\n            let U = n[j];\n            W(U);\n        }\n    }, qs = (t)=>{\n        e.push(ss, 2);\n    }, is = (t)=>{\n        let { branches: n } = t;\n        w.unshift({\n            type: zt\n        });\n        for(let o = n.length - 1; o >= 0; o--){\n            let p = n[o];\n            switch(p.type){\n                case Po:\n                    {\n                        let { statements: _ } = p, b = _.length;\n                        for(let j = b - 1; j >= 0; j--){\n                            let U = _[j];\n                            W(U);\n                        }\n                        let R = _.find((j)=>j.type === Ys);\n                        w.unshift({\n                            type: Ls,\n                            stop: R\n                        }), I(p.values[0]);\n                        break;\n                    }\n                case zo:\n                    {\n                        let { statements: _ } = p, b = _.length;\n                        for(let R = b - 1; R >= 0; R--){\n                            let j = _[R];\n                            W(j);\n                        }\n                        w.unshift({\n                            type: jn\n                        });\n                        break;\n                    }\n            }\n        }\n    }, Wt = (t, n)=>{\n        w.unshift({\n            type: zt\n        });\n        let o = n[0];\n        if (n.length >= 2) {\n            if (n[1].type === Po) Wt(t, n.slice(1));\n            else if (n[1].type === zo) {\n                let { statements: x } = n[1], ee = x.length;\n                for(let ie = ee - 1; ie >= 0; ie--)W(x[ie]);\n            }\n        }\n        let { statements: p } = o;\n        w.unshift({\n            type: jn\n        });\n        let _ = p.length;\n        for(let x = _ - 1; x >= 0; x--)W(p[x]);\n        let b = p.find((x)=>x.type === Ys), R = Object.freeze({\n            type: Ls,\n            stop: b\n        });\n        w.unshift(R);\n        let U = Object.freeze({\n            type: Zo,\n            function: ()=>{\n                let { name: x, path: ee } = Ie(t);\n                s.get(N(x, ee)).type === at ? (I(t), e.push(_e), e.push(_e), I(o.value), e.push(_e), e.push(_e), e.push(gs)) : (I(t), I(o.value), e.push(gs));\n            }\n        });\n        w.unshift(U);\n    }, $s = (t)=>{\n        let { value: n, matches: o } = t;\n        Wt(n, o);\n    }, Is = (t)=>{\n        let n = t, { branches: o, values: p } = n;\n        if (o.length > 0 && p.length === 0) return is(t);\n        e.push(jt, Xe);\n        let b = {\n            type: zt\n        };\n        w.unshift(b);\n        let R = [];\n        for (let U of p)switch(U.type){\n            case Je:\n                {\n                    let { name: x } = U, ee = Fe.get(x), { data: ie } = ee, { name: je, path: Ze } = ie, k = N(je, Ze);\n                    R.push(k);\n                    break;\n                }\n        }\n        var j = o.length - 1 | 0;\n        for(let U = j; U >= 0; U = U - 1 | 0){\n            let x = o[U], ee = {\n                type: Yo,\n                branch: x,\n                condition: n,\n                commonKeys: R\n            };\n            w.unshift(ee);\n        }\n    }, As = (t)=>{\n        let { expression: n } = t;\n        var p = I(n) | 0;\n        for(let _ = 0; _ < p; _ = _ + 1 | 0)e.push(_e);\n    }, it = (t)=>{\n        let { value: n } = t;\n        I(n), e.push(et, Ln), Oe(\"dealloc\"), e.push(i, 0), Xt(n);\n    }, Js = (t)=>{\n        let { values: n } = t;\n        for (let o of n)I(o);\n        e.push(Jp);\n    }, Qs = ()=>{\n        e.push(sl);\n    }, qn = (t)=>{\n        e.push(Ht);\n    }, d = (t)=>{\n        e.push(12, 0);\n    }, A = (t)=>{\n        e.push(Qp);\n    }, V = (t)=>{\n        t.stop ? (e.push(qo), e.push(pt)) : (e.push(qo), e.push(Xe));\n    }, Se = (t)=>{\n        let { branch: n, commonKeys: o, condition: p } = t, { values: _ } = n, { values: b } = p;\n        var R = o.length | 0;\n        for(let x = 0; x < R; x = x + 1 | 0){\n            let ee = o[x], ie = _[x], je = b[x];\n            J(ee, ie, je);\n        }\n        let { statements: j } = n;\n        var U = j.length - 1 | 0;\n        for(let x = U; x >= 0; x = x - 1 | 0){\n            let ee = j[x];\n            W(ee);\n        }\n    }, se = (t)=>{\n        let { condition: n } = t;\n        I(n);\n        let o = Ie(n);\n        if (o?.mutable) {\n            let p = N(o.name, o.path), _ = s.get(p), { load: b } = _.link;\n            e.push(b.opcode, b.align, b.offset);\n        }\n        e.push(i, 0), e.push(gs), e.push(ns, 1), e.push(ss, 0);\n    }, Ae = (t)=>{\n        let { collection: n, iterator: o, index: p } = t;\n        I(n), e.push(_e), me = !0;\n        let _ = Ce.get(p);\n        p ? e.push(tt, _) : e.push(F, g), e.push(gs), e.push(ns, 1), e.push(_e);\n        let b = Object.freeze({\n            type: ws,\n            array: n,\n            index: {\n                type: Je,\n                name: p\n            }\n        }), R = Object.freeze({\n            type: Je,\n            name: o\n        }), j = Object.freeze({\n            type: Ro,\n            target: R,\n            source: b\n        });\n        W(j);\n    }, te = (t)=>{\n        let { index: n } = t, o = Ce.get(n);\n        n ? e.push(tt, o) : e.push(F, g), e.push(i, 1), e.push(H), n ? e.push(Ct, o) : e.push(le, g), e.push(ss, 0);\n    }, rt = (t)=>{\n        let { statement: n } = t;\n        switch(n.type){\n            case \"assign\":\n                {\n                    we(n);\n                    break;\n                }\n            case Ls:\n                {\n                    Is(n);\n                    break;\n                }\n            case Gp:\n                {\n                    $s(n);\n                    break;\n                }\n            case bs:\n                {\n                    Ge(n);\n                    break;\n                }\n            case kp:\n                {\n                    rs(n);\n                    break;\n                }\n            case Lp:\n                {\n                    vt(n);\n                    break;\n                }\n            case Vp:\n                {\n                    De(n);\n                    break;\n                }\n            case Yp:\n                {\n                    qs(n);\n                    break;\n                }\n            case Do:\n                {\n                    As(n);\n                    break;\n                }\n            case wp:\n                {\n                    it(n);\n                    break;\n                }\n            case Ys:\n                {\n                    Js(n);\n                    break;\n                }\n            case Xp:\n                {\n                    Qs();\n                    break;\n                }\n            default:\n                throw new Error(`can not handle statement type ${n.type}`);\n        }\n    };\n    for(; w.length > 0;){\n        let t = w.shift();\n        switch(t.type){\n            case zt:\n                {\n                    qn(t);\n                    break;\n                }\n            case wo:\n                {\n                    d(t);\n                    break;\n                }\n            case jn:\n                {\n                    A(t);\n                    break;\n                }\n            case Ls:\n                {\n                    V(t);\n                    break;\n                }\n            case Yo:\n                {\n                    Se(t);\n                    break;\n                }\n            case Vo:\n                {\n                    rt(t);\n                    break;\n                }\n            case Cn:\n                {\n                    se(t);\n                    break;\n                }\n            case Bo:\n                {\n                    Ae(t);\n                    break;\n                }\n            case Ko:\n                {\n                    te(t);\n                    break;\n                }\n            case Ho:\n                {\n                    e.push(jt, Xe);\n                    break;\n                }\n            case Zo:\n                {\n                    t.function();\n                    break;\n                }\n            default:\n                break;\n        }\n    }\n    return {\n        totalOctets: e,\n        nativeImports: pe,\n        loads: me\n    };\n}\nvar { ENUM_MEMORY_SIZE: gl, ENUM_STACK_SIZE: sc, ARRAY_MEMORY_SIZE: yl, ARRAY_STACK_SIZE: wn, STRING_MEMORY_SIZE: xl, STRING_STACK_SIZE: Vn, OBJECT_MEMORY_SIZE: Xu, OBJECT_STACK_SIZE: nc, NATIVE_MEMORY_SIZE: Wu, NATIVE_STACK_SIZE: oc, NATIVE_SIZE: qu, STEP: $u, DOUBLE_STEP: Il, TRIPPLE_STEP: Ju } = Rt.Sizes, { HEX_ENCODE: vn, LEB128_ENCODE: Nt } = Jt, { TYPES_ASSIGN: Mn, TYPES_ARRAY: wt, TYPES_DATA: Bs, TYPES_GENERICS: Al, TYPES_ENUMERATION: Zt, TYPES_EXPRESSION: Nl, TYPES_LINK: Ks, TYPES_LOCAL: os, TYPES_OBJECT: Ft, TYPES_PROCEDURE: Bn, TYPES_RETURN: cc, TYPES_SELECT: Rl, TYPES_ARRAY_ACCESS: ac, TYPES_ARRAY_ASSIGNMENT: rc, TYPES_MEMBER: ic, TYPES_STORE: Kn, TYPES_LITERAL: pc, TYPES_LINK_TO: Gs, TYPES_VALUE_AT: Hs, TYPES_SELF: lc, TYPES_NATIVE: cs, TYPES_STRING: as, TYPES_CONDITION: Sl, TYPES_BRANCH_MATCH: uc, TYPES_WHILE: Pl, TYPES_WHEN: zl, TYPES_FOR: jl, TYPES_FOREACH: Cl, TYPES_SIZE: fc, TYPES_DROP: Fl, TYPES_CONCAT: Dl, TYPES_UNREACHABLE: Ul } = Ns, Gn = \"\", We = (c, s)=>`${s}.${c}`, kl = (c)=>[\n        \">\",\n        \"<\",\n        \">=\",\n        \"<=\",\n        \"!=\",\n        \"==\"\n    ].includes(c), Ll = (c)=>[\n        \"FP64\",\n        \"I64\",\n        \"U64\",\n        \"FP32\",\n        \"I32\",\n        \"U32\",\n        \"I16\",\n        \"U16\",\n        \"I8\",\n        \"U8\",\n        \"Bool\"\n    ].includes(c), Hn = 48, Yl = Object.freeze([\n    0,\n    127\n]), wl = Object.freeze({}), Vl = Object.freeze([\n    127\n]), hc = 0;\nvar vl = 2;\nvar Ml = 10, Bl = 7, Kl = 3, Gl = 2, Hl = 1, Zl = 6, Ot = 96, gt = 127, Zn = Object.freeze([\n    7,\n    105,\n    109,\n    112,\n    111,\n    114,\n    116,\n    115\n]), Xl = Object.freeze([\n    6,\n    109,\n    101,\n    109,\n    111,\n    114,\n    121\n]), Wl = 0;\nvar ql = 65, bt = new Uint8Array(8), $l = Object.freeze([\n    0,\n    97,\n    115,\n    109\n]), Jl = Object.freeze([\n    1,\n    0,\n    0,\n    0\n]), Ql = (c, s)=>{\n    s = s ?? wl;\n    let r = {}, { data: h, code: D } = c, ce = D.filter((y)=>!y.description.generics || y.description.generics.length === 0), e = new Map, pe = new Map, me = (y)=>{\n        let u = 0;\n        for (let P of y){\n            let { data: Y } = P;\n            switch(Y.type){\n                case \"Maybe\":\n                case Bs:\n                    {\n                        let { name: J, path: w } = Y, W = We(J, w), ye = e.get(W);\n                        if (!ye) console.error(\"No shape found for key:\", W);\n                        else switch(ye.type){\n                            case cs:\n                                if (J === as) {\n                                    u = u + Vn | 0;\n                                    break;\n                                }\n                            case Zt:\n                                {\n                                    u = u + sc | 0;\n                                    break;\n                                }\n                            case Ft:\n                                {\n                                    u = u + nc | 0;\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n                case Ks:\n                    {\n                        let J = e.get(We(Y.name, Y.path));\n                        Y.name === as ? u = u + Vn | 0 : Y.name === wt ? u = u + wn | 0 : J.type === Ft ? u = u + nc | 0 : u = u + oc | 0;\n                        break;\n                    }\n                case wt:\n                    {\n                        u = u + wn | 0;\n                        break;\n                    }\n            }\n        }\n        return u;\n    }, Oe = (y, u)=>{\n        let { labels: P } = u, Y = new Map, J = [];\n        var w = P.length | 0;\n        for(let he = 0; he < w; he = he + 1 | 0){\n            let { name: xe, props: Ee } = P[he];\n            if (Ee.length > 0) {\n                let we = {\n                    type: Ft,\n                    name: xe,\n                    path: y,\n                    description: {\n                        members: Ee,\n                        generics: []\n                    }\n                };\n                h.push(we), J.push({\n                    name: xe,\n                    props: Ee.map((Ge)=>Ge.name)\n                });\n            }\n            Y.set(xe, he);\n        }\n        return Object.freeze({\n            type: Zt,\n            encode: (he)=>{\n                let xe = Y.get(he);\n                return typeof xe > \"u\" ? Vl : Nt(xe);\n            },\n            evaluate: (he)=>Y.get(he),\n            opcode: ql,\n            labels: J,\n            link: Object.freeze({\n                load: Object.freeze({\n                    opcode: 40,\n                    align: 2,\n                    offset: 0,\n                    size: 4\n                }),\n                store: Object.freeze({\n                    opcode: 54,\n                    align: 2,\n                    offset: 0,\n                    size: 4\n                })\n            })\n        });\n    }, $ = (y)=>{\n        let u = [], P = [], Y = 0, J = ()=>{\n            let d = Object.freeze({\n                type: \"back\"\n            });\n            u.unshift(d);\n        }, w = (d)=>{\n            let A = {\n                type: Bs,\n                data: d\n            };\n            u.unshift(A);\n        }, W = (d)=>{\n            let A = {\n                type: \"name\",\n                name: d\n            };\n            u.unshift(A);\n        }, ye = (d, A)=>{\n            A && (J(), w(A), W(d));\n        }, ze = (d)=>h.find((A)=>A.name === d), he = (d, A)=>A.find((V)=>V.name === d), xe = (d, { inputs: A })=>A.find((V)=>V.name === d), Ee = (d, A)=>{\n            let V = d;\n            for (let Se of A){\n                let se = he(Se, V.description.members), Ae = ze(se.data.name);\n                if (Ae && Ae.type === Ft) V = Ae;\n                else return se;\n            }\n            return null;\n        }, we = (d, A)=>{\n            let V = d.trail, Se = he(V[0], A.members);\n            if (!Se) return null;\n            if (V.length === 1) return Se.data;\n            let se = ze(Se.data.name);\n            return Ee(se, V.slice(1)).data;\n        }, Ge = (d, A, V, Se)=>{\n            if (xe(A, V.description)) return;\n            V.description.self.push(d);\n            let se = Object.seal({\n                name: A,\n                data: {\n                    ...we({\n                        trail: d.trail || d.value?.trail || d.link?.trail || []\n                    }, Se)\n                }\n            });\n            d.type !== Gs && (se.data.type = Ks), V.description.inputs.push(se);\n        }, rs = (d, A, V)=>{\n            let Se = d.inputs.map((Ae)=>De(Ae, A, V)), se = typeof d.name == \"object\" && d.name[0] === ic ? d.name.slice(1).join(\"_\") : d.name;\n            return {\n                ...d,\n                name: se,\n                inputs: Se\n            };\n        }, vt = (d, A, V)=>{\n            if (!(d.value.link === lc || d.value.value === lc)) return d;\n            let Se = `${d.type}_${d.trail.join(\"_\")}`;\n            if (Ge(d, Se, A, V), d.value.value) return {\n                type: Gs,\n                value: Se\n            };\n            if (d.value.link) return {\n                type: Hs,\n                link: Se\n            };\n        }, De = (d, A, V, Se = \"\")=>{\n            switch(d.type){\n                case os:\n                case pc:\n                    return d;\n                case ic:\n                    {\n                        let se = `${d.type}_${d.trail.join(\"_\")}`;\n                        return Ge(d, se, A, V), Se === \"target\" ? {\n                            type: Kn,\n                            link: {\n                                type: os,\n                                name: se\n                            }\n                        } : {\n                            type: Hs,\n                            link: {\n                                type: os,\n                                name: se\n                            }\n                        };\n                    }\n                case Gs:\n                    {\n                        if (d.value.type === pc) return d.value;\n                        {\n                            let se = `${d.value.type}_${d.value.trail.join(\"_\")}`;\n                            return Ge(d, se, A, V), {\n                                type: Gs,\n                                value: {\n                                    type: os,\n                                    name: se\n                                }\n                            };\n                        }\n                    }\n                case Hs:\n                    {\n                        let se = `${d.link.type}_${d.link.trail.join(\"_\")}`;\n                        return Ge(d, se, A, V), {\n                            type: Hs,\n                            link: {\n                                type: os,\n                                name: se\n                            }\n                        };\n                    }\n                case Kn:\n                    {\n                        let se = `${d.link.type}_${d.link.trail.join(\"_\")}`;\n                        return Ge(d, se, A, V), {\n                            type: Kn,\n                            link: {\n                                type: os,\n                                name: se\n                            }\n                        };\n                    }\n                case Rl:\n                    return vt(d, A, V);\n                case Nl:\n                    return rs(d, A, V);\n                case ac:\n                    {\n                        let se = De(d.array, A, V), Ae = De(d.index, A, V);\n                        return Object.freeze({\n                            type: ac,\n                            index: Ae,\n                            array: se\n                        });\n                    }\n                case rc:\n                    {\n                        let se = De(d.array, A, V), Ae = De(d.index, A, V);\n                        return Object.freeze({\n                            type: rc,\n                            index: Ae,\n                            array: se\n                        });\n                    }\n                case fc:\n                    {\n                        let se = De(d.value, A, V);\n                        return Object.freeze({\n                            type: fc,\n                            value: se\n                        });\n                    }\n                case Dl:\n                    {\n                        let se = d.values.map((Ae)=>De(Ae, A, V));\n                        return Object.freeze({\n                            ...d,\n                            values: se\n                        });\n                    }\n                default:\n                    throw Error(`Unhandled type(checkObjectValues): ${d.type}`);\n            }\n        }, qs = (d, A)=>{\n            let V = JSON.parse(JSON.stringify(d));\n            V.description.self = [];\n            let Se = (Ae)=>{\n                Ae.type === Mn ? (Ae.target = De(Ae.target, V, A, \"target\"), Ae.source = De(Ae.source, V, A)) : Ae.type === cc && (Ae.values = Ae.values.map((te)=>De(te, V, A)));\n            }, se = (Ae)=>{\n                Ae.forEach((te)=>{\n                    if (te.type === Mn || te.type === cc) Se(te);\n                    else if (te.type === Sl) te.branches.forEach((rt)=>{\n                        se(rt.statements), rt.type === uc && (rt.values = rt.values.map((t)=>De(t, V, A)));\n                    });\n                    else if (te.type === Pl) te.condition = De(te.condition, V, A), se(te.statements);\n                    else if (te.type === zl) te.value = De(te.value, V, A), te.matches.forEach((rt)=>{\n                        rt.type === uc && (rt.value = De(rt.value, V, A)), se(rt.statements);\n                    });\n                    else if (te.type === jl) te.limit = De(te.limit, V, A), te.variable = De(te.variable, V, A), te.initializer.type === Mn && (te.initializer.target = De(te.initializer.target, V, A), te.initializer.source = De(te.initializer.source, V, A)), te.step = De(te.step, V, A), se(te.statements);\n                    else if (te.type === Cl) te.collection = De(te.collection, V, A), se(te.statements);\n                    else if (te.type === Fl) te.expression = De(te.expression, V, A);\n                    else if (te.type !== Ul) throw new Error(\"unhandled statement type: \", te.type);\n                });\n            };\n            se(V.description.statements), ce.push(V);\n        }, { members: is } = y, Wt = new Map;\n        for (let d of is){\n            let { name: A, data: V, value: Se } = d;\n            Wt.set(A, V), Se && Wt.set(A, {\n                ...V,\n                value: Se\n            });\n        }\n        var $s = is.length - 1 | 0;\n        for(let d = $s; d >= 0; d = d - 1 | 0){\n            let A = is[d], { name: V, data: Se } = A;\n            if (A.type && A.type === Bn) {\n                qs(A, y);\n                continue;\n            }\n            ye(V, Se);\n        }\n        let Is = new Map, As = new Map, it = 0;\n        for(; u.length > 0;){\n            let d = u.shift();\n            switch(d.type){\n                case \"back\":\n                    {\n                        P.pop();\n                        break;\n                    }\n                case Bs:\n                    {\n                        let { data: A } = d, V = ()=>{\n                            let rt = P.join(\".\"), t = We(A.name, A.path), n = e.get(t), { link: o } = n, p = Object.freeze({\n                                data: A,\n                                index: it,\n                                address: Y,\n                                trail: rt\n                            }), _ = e.get(We(A.name, A.path));\n                            A.name === as ? Y += xl : A.type === wt || A.layout === wt ? Y += yl : _.type === Zt ? Y += gl : Y += o?.load.size || Il, Is.set(rt, p), As.set(it, p), A.name === as ? it = it + Vn | 0 : A.type === wt || A.layout === wt ? it = it + wn | 0 : _.type === Zt ? it = it + sc | 0 : it = it + oc | 0;\n                        };\n                        if (A.type === Ks) {\n                            V();\n                            break;\n                        }\n                        let { name: Se, path: se } = A, Ae = We(Se, se), te = e.get(Ae);\n                        if (!te) throw new Error(\"Shape not found: \", Ae);\n                        switch(te.type){\n                            case cs:\n                                {\n                                    V();\n                                    break;\n                                }\n                            case Zt:\n                                {\n                                    V();\n                                    break;\n                                }\n                            case Ft:\n                                {\n                                    V();\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n                case \"name\":\n                    {\n                        let { name: A } = d;\n                        P.push(A);\n                        break;\n                    }\n            }\n        }\n        let Js = it | 0, Qs = Object.freeze({\n            mapTrail: Is,\n            mapIndex: As\n        });\n        return {\n            type: Ft,\n            length: Js,\n            members: Wt,\n            indivisibles: Qs\n        };\n    }, Re = {};\n    for (let y of h){\n        let { path: u } = y;\n        switch(y.type){\n            case cs:\n                {\n                    let { name: P, path: Y } = y, J = We(P, Y);\n                    if (Object.hasOwn(kt, J)) {\n                        let w = kt[J];\n                        e.set(J, w);\n                        continue;\n                    }\n                    break;\n                }\n            case \"import\":\n                {\n                    if (Object.hasOwn(kt, u)) {\n                        let P = kt[u];\n                        e.set(u, P);\n                        continue;\n                    }\n                    break;\n                }\n            case Al:\n                {\n                    let { name: P, path: Y } = y, J = We(P, Y), w = kt[\"Flogram.FP32\"];\n                    e.set(J, w);\n                    break;\n                }\n            case Zt:\n                {\n                    let { name: P, path: Y, description: J } = y, w = We(P, Y), W = Oe(w, J);\n                    e.set(w, W);\n                    break;\n                }\n            case Ft:\n                {\n                    let { name: P, path: Y, description: J } = y, { generics: w } = J, W = We(P, Y);\n                    if (!w || w.length === 0) {\n                        let ye = $(J);\n                        e.set(W, ye);\n                    }\n                    break;\n                }\n        }\n    }\n    r.structures = Re;\n    let lt = 0, ut = (y, u)=>{\n        let P = pe.get(y);\n        if (typeof P > \"u\") {\n            pe.set(y, [\n                u\n            ]);\n            return;\n        }\n        (P.length == 0 || P.length > 0 && P[0].body !== u.body) && pe.set(y, [\n            u,\n            ...P\n        ]);\n    }, Ye = (y)=>{\n        let { name: u, path: P } = y, Y = We(u, P);\n        switch(P === \"Flogram\" && (Ll(u) ? Y = We(y.description.inputs[0]?.data?.name?.toLowerCase() + \".\" + ct(u), P) : y.description.outputs && y.description.outputs.length >= 1 && !kl(y.name) ? y.description.outputs[0]?.data?.name && (Y = We(y.description.outputs[0]?.data?.name?.toLowerCase() + \".\" + ct(u, y.description.inputs?.length), P)) : (fs.includes(y.description.inputs[1]?.data?.name) && (Y = We(y.description.inputs[1]?.data?.name + \".\" + ct(u), P), Gn = y.description.inputs[1]?.data?.name), Gn && (Y = We(Gn.toLowerCase() + \".\" + ct(u), P)))), y.type){\n            case cs:\n                {\n                    if (Object.hasOwn(Os, Y)) {\n                        let J = Os[Y];\n                        ut(Y, J);\n                        return;\n                    }\n                    break;\n                }\n            case Bn:\n                {\n                    let { description: J } = y, { inputs: w, outputs: W } = J, ye = We(u, P), ze = {\n                        type: \"artificial\",\n                        index: \"artificial\" + lt,\n                        procedure: y,\n                        lengths: Object.freeze({\n                            inputs: me(w),\n                            outputs: me(W)\n                        })\n                    };\n                    ut(ye, ze);\n                    break;\n                }\n        }\n        lt = lt + 1 | 0;\n    }, nt = [], dt = [];\n    for (let y of ce){\n        if (y.description.generics?.length > 0) continue;\n        let { description: u } = y, { inputs: P, outputs: Y } = u, J = [\n            ...P,\n            ...Y\n        ];\n        if (!(y.type === cs && J.some((w)=>!fs.includes(w.data.name)))) switch(Ye(y), y.type){\n            case \"import\":\n                {\n                    let { path: w } = y;\n                    if (Object.hasOwn(Os, w)) continue;\n                    nt.push(y);\n                    break;\n                }\n            case Bn:\n                {\n                    dt.push(y);\n                    break;\n                }\n        }\n    }\n    let ft = (y)=>{\n        let u = 0, P = [];\n        for (let Y of y){\n            let J = ()=>{\n                P.push(gt), u = u + 1 | 0, P.push(gt), u = u + 1 | 0, P.push(gt), u = u + 1 | 0;\n            }, w = (we)=>{\n                let { identity: Ge } = we;\n                P.push(Ge), u = u + 1 | 0;\n            }, W = ()=>{\n                P.push(gt), u = u + 1 | 0;\n            }, ye = ()=>{\n                P.push(gt), u = u + 1 | 0, P.push(gt), u = u + 1 | 0, P.push(gt), u = u + 1 | 0;\n            }, ze = ()=>{\n                P.push(gt), u = u + 1 | 0, P.push(gt), u = u + 1 | 0;\n            }, he = ()=>{\n                P.push(gt), u = u + 1 | 0, P.push(gt), u = u + 1 | 0;\n            }, { name: xe, data: Ee } = Y;\n            switch(Ee.type){\n                case \"\":\n                case Bs:\n                    {\n                        let { name: we, path: Ge } = Ee, rs = We(we, Ge), vt = e.get(rs);\n                        if (!vt) w(kt[\"Flogram.FP32\"]);\n                        else switch(vt.type){\n                            case cs:\n                                {\n                                    we === as ? he() : w(vt);\n                                    break;\n                                }\n                            case Zt:\n                                {\n                                    J();\n                                    break;\n                                }\n                            case Ft:\n                                {\n                                    ze();\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n                case Ks:\n                    {\n                        let we = e.get(We(Ee.name, Ee.path));\n                        Ee.name === wt ? ye() : Ee.name === as ? he() : we.type === Ft ? ze() : W();\n                        break;\n                    }\n                case wt:\n                    {\n                        ye();\n                        break;\n                    }\n            }\n        }\n        return [\n            u,\n            P\n        ];\n    }, yt = (y, u)=>{\n        let P = u.length | 0, Y = Nt(P);\n        u.unshift(y, ...Y);\n    }, Zs = (y)=>{\n        let u = [], P = [\n            ...nt,\n            ...dt\n        ], Y = new Map([\n            [\n                \"alloc\",\n                [\n                    Ot,\n                    1,\n                    127,\n                    1,\n                    127\n                ]\n            ],\n            [\n                \"dealloc\",\n                [\n                    Ot,\n                    1,\n                    127,\n                    0\n                ]\n            ],\n            [\n                \"merge\",\n                [\n                    Ot,\n                    0,\n                    0\n                ]\n            ],\n            [\n                \"save\",\n                [\n                    Ot,\n                    2,\n                    127,\n                    127,\n                    0\n                ]\n            ],\n            [\n                \"undo\",\n                [\n                    Ot,\n                    0,\n                    2,\n                    127,\n                    127\n                ]\n            ],\n            [\n                \"undoPenultimate\",\n                [\n                    Ot,\n                    0,\n                    2,\n                    127,\n                    127\n                ]\n            ],\n            [\n                \"draw\",\n                [\n                    Ot,\n                    1,\n                    127,\n                    0\n                ]\n            ],\n            [\n                \"drawI64\",\n                [\n                    Ot,\n                    1,\n                    126,\n                    0\n                ]\n            ],\n            [\n                \"drawFP32\",\n                [\n                    Ot,\n                    1,\n                    125,\n                    0\n                ]\n            ],\n            [\n                \"drawFP64\",\n                [\n                    Ot,\n                    1,\n                    124,\n                    0\n                ]\n            ],\n            [\n                \"now\",\n                [\n                    Ot,\n                    0,\n                    1,\n                    126\n                ]\n            ]\n        ]);\n        for (let W of y)if (Y.has(W)) u.push(...Y.get(W));\n        else throw new Error(\"Procedure not found:\", W);\n        for (let W of P){\n            let { description: ye } = W, { inputs: ze, outputs: he } = ye, [xe, Ee] = ft(ze), [we, Ge] = ft(he);\n            u.push(Ot, xe, ...Ee, we, ...Ge);\n        }\n        let J = P.length | 0, w = Nt(J + y.size);\n        return u.unshift(...w), yt(Hl, u), u;\n    }, Xs = (y)=>{\n        let u = [];\n        return y && y.size > 0 && (u.push(2), u.push(127, 1), u.push(65, 0, 11), u.push(127, 1), u.push(65, 0, 11), yt(Zl, u)), u;\n    }, Vt = 0, xs = (y, u)=>{\n        let P = [], Y = 0, J = {};\n        if (s.memory) {\n            let ye = (xe)=>{\n                let Ee = [\n                    ...xe\n                ].map((we)=>we.charCodeAt(0));\n                return [\n                    Ee.length,\n                    ...Ee\n                ];\n            }, ze = [];\n            (u || y.size > 0) && (J.memory = {\n                path: \"memory\",\n                description: {\n                    inputs: [],\n                    outputs: []\n                }\n            });\n            for (let xe of y)ze.push(ye(xe)), J[xe] = {\n                path: xe,\n                description: {\n                    inputs: [],\n                    outputs: []\n                }\n            };\n            let he = Array.from(y);\n            for (let xe of y)bt.fill(Hn), vn(Y, bt), P.push(...Zn, ...ze[he.indexOf(xe)], hc, he.indexOf(xe)), Y = Y + 1 | 0;\n        }\n        for (let ye of nt){\n            bt.fill(Hn), vn(Y, bt);\n            let ze = String.fromCodePoint(...bt);\n            J[ze] = {\n                path: ye.path,\n                description: ye.description\n            };\n            let he = Y | 0;\n            P.push(...Zn, bt.length | 0, ...bt, hc, he), Y = Y + 1 | 0;\n        }\n        Vt = Y | 0, (u || y.size > 0) && (P.push(...Zn, ...Xl, vl, ...Yl), Y = Y + 1 | 0);\n        let w = Y | 0, W = Nt(w);\n        return P.unshift(...W), yt(Gl, P), r.imports = J, P;\n    }, Ce = ()=>{\n        let y = [];\n        var u = dt.length | 0;\n        for(let J = 0; J < u; J = J + 1 | 0){\n            let w = J | 0, W = Vt + w | 0, ye = Nt(W);\n            y.push(...ye);\n        }\n        let P = dt.length | 0, Y = Nt(P);\n        return y.unshift(...Y), yt(Kl, y), y;\n    }, Fe = ()=>{\n        let y = [], u = 0, P = {};\n        var Y = dt.length | 0;\n        for(let W = 0; W < Y; W = W + 1 | 0){\n            let ye = W + Vt | 0, ze = Nt(ye);\n            bt.fill(Hn), vn(u, bt);\n            let { name: he, path: xe, description: Ee } = dt[W];\n            Ee = {\n                inputs: Ee.inputs,\n                outputs: Ee.outputs\n            };\n            let we = String.fromCodePoint(...bt);\n            P[we] = {\n                name: he,\n                path: xe,\n                description: Ee\n            }, y.push(bt.length | 0, ...bt, Wl, ...ze), u = u + 1 | 0;\n        }\n        let J = u | 0, w = Nt(J);\n        return y.unshift(...w), yt(Bl, y), r.procedures = P, y;\n    }, Dt = ()=>{\n        let y = [], u = new Set, P = !1;\n        for (let W of dt){\n            let { totalOctets: ye, nativeImports: ze, loads: he } = Ms(W, e, pe, ce, s);\n            u = new Set([\n                ...u,\n                ...ze\n            ]), he && !P && (P = he);\n            let xe = ye.length | 0, Ee = Nt(xe);\n            y.push(...Ee, ...ye);\n        }\n        let Y = dt.length | 0, J = Nt(Y);\n        return y.unshift(...J), yt(Ml, y), y = ((W, ye, ze)=>{\n            let he = Array.from(ze), xe = \"artificial\";\n            return W.map((Ee)=>{\n                if (typeof Ee == \"string\") {\n                    if (Ee.startsWith(xe)) {\n                        let we = Ee.slice(xe.length), Ge = parseInt(we, 10);\n                        if (!isNaN(Ge)) return Ge + ye;\n                    }\n                    if (he.includes(Ee)) return he.indexOf(Ee);\n                }\n                return Ee;\n            });\n        })(y, u.size, u), {\n            totalOctets: y,\n            allImports: u,\n            loads: P\n        };\n    }, { totalOctets: ge, allImports: Ke, loads: Xn } = Dt(), Ws = Zs(Ke), qe = xs(Ke, Xn), Ie = Ce(), Wn = Xs(Ke), I = Fe(), Xt = new Uint8Array([\n        ...$l,\n        ...Jl,\n        ...Ws,\n        ...qe,\n        ...Ie,\n        ...Wn,\n        ...I,\n        ...ge\n    ]);\n    return [\n        r,\n        Xt\n    ];\n}, eu = Object.freeze({\n    compile: Ql\n}), Qu = eu;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/@munezero/floparser/Compilers/SimplerWASM/index.mjs\n");

/***/ }),

/***/ "(ssr)/./app/@munezero/floparser/SimpleParser/index.mjs":
/*!********************************************************!*\
  !*** ./app/@munezero/floparser/SimpleParser/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Rm)\n/* harmony export */ });\nvar cf = Object.create;\nvar Oa = Object.defineProperty;\nvar uf = Object.getOwnPropertyDescriptor;\nvar lf = Object.getOwnPropertyNames;\nvar ff = Object.getPrototypeOf, Ef = Object.prototype.hasOwnProperty;\nvar hn = (k, S)=>()=>(S || k((S = {\n            exports: {}\n        }).exports, S), S.exports);\nvar _f = (k, S, D, W)=>{\n    if (S && typeof S == \"object\" || typeof S == \"function\") for (let X of lf(S))!Ef.call(k, X) && X !== D && Oa(k, X, {\n        get: ()=>S[X],\n        enumerable: !(W = uf(S, X)) || W.enumerable\n    });\n    return k;\n};\nvar Ta = (k, S, D)=>(D = k != null ? cf(ff(k)) : {}, _f(S || !k || !k.__esModule ? Oa(D, \"default\", {\n        value: k,\n        enumerable: !0\n    }) : D, k));\nvar Ia = hn((Aa, da)=>{\n    (function(k) {\n        var S = Object.hasOwnProperty, D = Array.isArray ? Array.isArray : function(A) {\n            return Object.prototype.toString.call(A) === \"[object Array]\";\n        }, W = 10, X = typeof process == \"object\" && typeof process.nextTick == \"function\", ae = typeof Symbol == \"function\", Ee = typeof Reflect == \"object\", be = typeof setImmediate == \"function\", ve = be ? setImmediate : setTimeout, he = ae ? Ee && typeof Reflect.ownKeys == \"function\" ? Reflect.ownKeys : function(p) {\n            var A = Object.getOwnPropertyNames(p);\n            return A.push.apply(A, Object.getOwnPropertySymbols(p)), A;\n        } : Object.keys;\n        function Oe() {\n            this._events = {}, this._conf && Le.call(this, this._conf);\n        }\n        function Le(p) {\n            p && (this._conf = p, p.delimiter && (this.delimiter = p.delimiter), p.maxListeners !== k && (this._maxListeners = p.maxListeners), p.wildcard && (this.wildcard = p.wildcard), p.newListener && (this._newListener = p.newListener), p.removeListener && (this._removeListener = p.removeListener), p.verboseMemoryLeak && (this.verboseMemoryLeak = p.verboseMemoryLeak), p.ignoreErrors && (this.ignoreErrors = p.ignoreErrors), this.wildcard && (this.listenerTree = {}));\n        }\n        function Re(p, A) {\n            var P = \"(node) warning: possible EventEmitter memory leak detected. \" + p + \" listeners added. Use emitter.setMaxListeners() to increase limit.\";\n            if (this.verboseMemoryLeak && (P += \" Event name: \" + A + \".\"), typeof process < \"u\" && process.emitWarning) {\n                var L = new Error(P);\n                L.name = \"MaxListenersExceededWarning\", L.emitter = this, L.count = p, process.emitWarning(L);\n            } else console.error(P), console.trace && console.trace();\n        }\n        var Ze = function(p, A, P) {\n            var L = arguments.length;\n            switch(L){\n                case 0:\n                    return [];\n                case 1:\n                    return [\n                        p\n                    ];\n                case 2:\n                    return [\n                        p,\n                        A\n                    ];\n                case 3:\n                    return [\n                        p,\n                        A,\n                        P\n                    ];\n                default:\n                    for(var v = new Array(L); L--;)v[L] = arguments[L];\n                    return v;\n            }\n        };\n        function Rt(p, A) {\n            for(var P = {}, L, v = p.length, C = A ? A.length : 0, g = 0; g < v; g++)L = p[g], P[L] = g < C ? A[g] : k;\n            return P;\n        }\n        function ye(p, A, P) {\n            this._emitter = p, this._target = A, this._listeners = {}, this._listenersCount = 0;\n            var L, v;\n            if ((P.on || P.off) && (L = P.on, v = P.off), A.addEventListener ? (L = A.addEventListener, v = A.removeEventListener) : A.addListener ? (L = A.addListener, v = A.removeListener) : A.on && (L = A.on, v = A.off), !L && !v) throw Error(\"target does not implement any known event API\");\n            if (typeof L != \"function\") throw TypeError(\"on method must be a function\");\n            if (typeof v != \"function\") throw TypeError(\"off method must be a function\");\n            this._on = L, this._off = v;\n            var C = p._observers;\n            C ? C.push(this) : p._observers = [\n                this\n            ];\n        }\n        Object.assign(ye.prototype, {\n            subscribe: function(p, A, P) {\n                var L = this, v = this._target, C = this._emitter, g = this._listeners, K = function() {\n                    var G = Ze.apply(null, arguments), _ = {\n                        data: G,\n                        name: A,\n                        original: p\n                    };\n                    if (P) {\n                        var J = P.call(v, _);\n                        J !== !1 && C.emit.apply(C, [\n                            _.name\n                        ].concat(G));\n                        return;\n                    }\n                    C.emit.apply(C, [\n                        A\n                    ].concat(G));\n                };\n                if (g[p]) throw Error(\"Event '\" + p + \"' is already listening\");\n                this._listenersCount++, C._newListener && C._removeListener && !L._onNewListener ? (this._onNewListener = function(G) {\n                    G === A && g[p] === null && (g[p] = K, L._on.call(v, p, K));\n                }, C.on(\"newListener\", this._onNewListener), this._onRemoveListener = function(G) {\n                    G === A && !C.hasListeners(G) && g[p] && (g[p] = null, L._off.call(v, p, K));\n                }, g[p] = null, C.on(\"removeListener\", this._onRemoveListener)) : (g[p] = K, L._on.call(v, p, K));\n            },\n            unsubscribe: function(p) {\n                var A = this, P = this._listeners, L = this._emitter, v, C, g = this._off, K = this._target, G;\n                if (p && typeof p != \"string\") throw TypeError(\"event must be a string\");\n                function _() {\n                    A._onNewListener && (L.off(\"newListener\", A._onNewListener), L.off(\"removeListener\", A._onRemoveListener), A._onNewListener = null, A._onRemoveListener = null);\n                    var J = V.call(L, A);\n                    L._observers.splice(J, 1);\n                }\n                if (p) {\n                    if (v = P[p], !v) return;\n                    g.call(K, p, v), delete P[p], --this._listenersCount || _();\n                } else {\n                    for(C = he(P), G = C.length; G-- > 0;)p = C[G], g.call(K, p, P[p]);\n                    this._listeners = {}, this._listenersCount = 0, _();\n                }\n            }\n        });\n        function Nt(p, A, P, L) {\n            var v = Object.assign({}, A);\n            if (!p) return v;\n            if (typeof p != \"object\") throw TypeError(\"options must be an object\");\n            var C = Object.keys(p), g = C.length, K, G, _;\n            function J(Pe) {\n                throw Error('Invalid \"' + K + '\" option value' + (Pe ? \". Reason: \" + Pe : \"\"));\n            }\n            for(var de = 0; de < g; de++){\n                if (K = C[de], !L && !S.call(A, K)) throw Error('Unknown \"' + K + '\" option');\n                G = p[K], G !== k && (_ = P[K], v[K] = _ ? _(G, J) : G);\n            }\n            return v;\n        }\n        function ut(p, A) {\n            return (typeof p != \"function\" || !p.hasOwnProperty(\"prototype\")) && A(\"value must be a constructor\"), p;\n        }\n        function kt(p) {\n            var A = \"value must be type of \" + p.join(\"|\"), P = p.length, L = p[0], v = p[1];\n            return P === 1 ? function(C, g) {\n                if (typeof C === L) return C;\n                g(A);\n            } : P === 2 ? function(C, g) {\n                var K = typeof C;\n                if (K === L || K === v) return C;\n                g(A);\n            } : function(C, g) {\n                for(var K = typeof C, G = P; G-- > 0;)if (K === p[G]) return C;\n                g(A);\n            };\n        }\n        var ue = kt([\n            \"function\"\n        ]), jt = kt([\n            \"object\",\n            \"function\"\n        ]);\n        function Ve(p, A, P) {\n            var L, v, C = 0, g, K = new p(function(G, _, J) {\n                P = Nt(P, {\n                    timeout: 0,\n                    overload: !1\n                }, {\n                    timeout: function(De, U) {\n                        return De *= 1, (typeof De != \"number\" || De < 0 || !Number.isFinite(De)) && U(\"timeout must be a positive number\"), De;\n                    }\n                }), L = !P.overload && typeof p.prototype.cancel == \"function\" && typeof J == \"function\";\n                function de() {\n                    v && (v = null), C && (clearTimeout(C), C = 0);\n                }\n                var Pe = function(De) {\n                    de(), G(De);\n                }, ke = function(De) {\n                    de(), _(De);\n                };\n                L ? A(Pe, ke, J) : (v = [\n                    function(De) {\n                        ke(De || Error(\"canceled\"));\n                    }\n                ], A(Pe, ke, function(De) {\n                    if (g) throw Error(\"Unable to subscribe on cancel event asynchronously\");\n                    if (typeof De != \"function\") throw TypeError(\"onCancel callback must be a function\");\n                    v.push(De);\n                }), g = !0), P.timeout > 0 && (C = setTimeout(function() {\n                    var De = Error(\"timeout\");\n                    De.code = \"ETIMEDOUT\", C = 0, K.cancel(De), _(De);\n                }, P.timeout));\n            });\n            return L || (K.cancel = function(G) {\n                if (v) {\n                    for(var _ = v.length, J = 1; J < _; J++)v[J](G);\n                    v[0](G), v = null;\n                }\n            }), K;\n        }\n        function V(p) {\n            var A = this._observers;\n            if (!A) return -1;\n            for(var P = A.length, L = 0; L < P; L++)if (A[L]._target === p) return L;\n            return -1;\n        }\n        function B(p, A, P, L, v) {\n            if (!P) return null;\n            if (L === 0) {\n                var C = typeof A;\n                if (C === \"string\") {\n                    var g, K, G = 0, _ = 0, J = this.delimiter, de = J.length;\n                    if ((K = A.indexOf(J)) !== -1) {\n                        g = new Array(5);\n                        do g[G++] = A.slice(_, K), _ = K + de;\n                        while ((K = A.indexOf(J, _)) !== -1);\n                        g[G++] = A.slice(_), A = g, v = G;\n                    } else A = [\n                        A\n                    ], v = 1;\n                } else C === \"object\" ? v = A.length : (A = [\n                    A\n                ], v = 1);\n            }\n            var Pe = null, ke, De, U, u, a, Yt = A[L], Wt = A[L + 1], Ke, T;\n            if (L === v) P._listeners && (typeof P._listeners == \"function\" ? (p && p.push(P._listeners), Pe = [\n                P\n            ]) : (p && p.push.apply(p, P._listeners), Pe = [\n                P\n            ]));\n            else if (Yt === \"*\") {\n                for(Ke = he(P), K = Ke.length; K-- > 0;)ke = Ke[K], ke !== \"_listeners\" && (T = B(p, A, P[ke], L + 1, v), T && (Pe ? Pe.push.apply(Pe, T) : Pe = T));\n                return Pe;\n            } else if (Yt === \"**\") {\n                for(a = L + 1 === v || L + 2 === v && Wt === \"*\", a && P._listeners && (Pe = B(p, A, P, v, v)), Ke = he(P), K = Ke.length; K-- > 0;)ke = Ke[K], ke !== \"_listeners\" && (ke === \"*\" || ke === \"**\" ? (P[ke]._listeners && !a && (T = B(p, A, P[ke], v, v), T && (Pe ? Pe.push.apply(Pe, T) : Pe = T)), T = B(p, A, P[ke], L, v)) : ke === Wt ? T = B(p, A, P[ke], L + 2, v) : T = B(p, A, P[ke], L, v), T && (Pe ? Pe.push.apply(Pe, T) : Pe = T));\n                return Pe;\n            } else P[Yt] && (Pe = B(p, A, P[Yt], L + 1, v));\n            if (De = P[\"*\"], De && B(p, A, De, L + 1, v), U = P[\"**\"], U) if (L < v) for(U._listeners && B(p, A, U, v, v), Ke = he(U), K = Ke.length; K-- > 0;)ke = Ke[K], ke !== \"_listeners\" && (ke === Wt ? B(p, A, U[ke], L + 2, v) : ke === Yt ? B(p, A, U[ke], L + 1, v) : (u = {}, u[ke] = U[ke], B(p, A, {\n                \"**\": u\n            }, L + 1, v)));\n            else U._listeners ? B(p, A, U, v, v) : U[\"*\"] && U[\"*\"]._listeners && B(p, A, U[\"*\"], v, v);\n            return Pe;\n        }\n        function M(p, A, P) {\n            var L = 0, v = 0, C, g = this.delimiter, K = g.length, G;\n            if (typeof p == \"string\") if ((C = p.indexOf(g)) !== -1) {\n                G = new Array(5);\n                do G[L++] = p.slice(v, C), v = C + K;\n                while ((C = p.indexOf(g, v)) !== -1);\n                G[L++] = p.slice(v);\n            } else G = [\n                p\n            ], L = 1;\n            else G = p, L = p.length;\n            if (L > 1) {\n                for(C = 0; C + 1 < L; C++)if (G[C] === \"**\" && G[C + 1] === \"**\") return;\n            }\n            var _ = this.listenerTree, J;\n            for(C = 0; C < L; C++)if (J = G[C], _ = _[J] || (_[J] = {}), C === L - 1) return _._listeners ? (typeof _._listeners == \"function\" && (_._listeners = [\n                _._listeners\n            ]), P ? _._listeners.unshift(A) : _._listeners.push(A), !_._listeners.warned && this._maxListeners > 0 && _._listeners.length > this._maxListeners && (_._listeners.warned = !0, Re.call(this, _._listeners.length, J))) : _._listeners = A, !0;\n            return !0;\n        }\n        function z(p, A, P, L) {\n            for(var v = he(p), C = v.length, g, K, G, _ = p._listeners, J; C-- > 0;)K = v[C], g = p[K], K === \"_listeners\" ? G = P : G = P ? P.concat(K) : [\n                K\n            ], J = L || typeof K == \"symbol\", _ && A.push(J ? G : G.join(this.delimiter)), typeof g == \"object\" && z.call(this, g, A, G, J);\n            return A;\n        }\n        function q(p) {\n            for(var A = he(p), P = A.length, L, v, C; P-- > 0;)v = A[P], L = p[v], L && (C = !0, v !== \"_listeners\" && !q(L) && delete p[v]);\n            return C;\n        }\n        function Te(p, A, P) {\n            this.emitter = p, this.event = A, this.listener = P;\n        }\n        Te.prototype.off = function() {\n            return this.emitter.off(this.event, this.listener), this;\n        };\n        function _e(p, A, P) {\n            if (P === !0) v = !0;\n            else if (P === !1) L = !0;\n            else {\n                if (!P || typeof P != \"object\") throw TypeError(\"options should be an object or true\");\n                var L = P.async, v = P.promisify, C = P.nextTick, g = P.objectify;\n            }\n            if (L || C || v) {\n                var K = A, G = A._origin || A;\n                if (C && !X) throw Error(\"process.nextTick is not supported\");\n                v === k && (v = A.constructor.name === \"AsyncFunction\"), A = function() {\n                    var _ = arguments, J = this, de = this.event;\n                    return v ? C ? Promise.resolve() : new Promise(function(Pe) {\n                        ve(Pe);\n                    }).then(function() {\n                        return J.event = de, K.apply(J, _);\n                    }) : (C ? process.nextTick : ve)(function() {\n                        J.event = de, K.apply(J, _);\n                    });\n                }, A._async = !0, A._origin = G;\n            }\n            return [\n                A,\n                g ? new Te(this, p, A) : this\n            ];\n        }\n        function ne(p) {\n            this._events = {}, this._newListener = !1, this._removeListener = !1, this.verboseMemoryLeak = !1, Le.call(this, p);\n        }\n        ne.EventEmitter2 = ne, ne.prototype.listenTo = function(p, A, P) {\n            if (typeof p != \"object\") throw TypeError(\"target musts be an object\");\n            var L = this;\n            P = Nt(P, {\n                on: k,\n                off: k,\n                reducers: k\n            }, {\n                on: ue,\n                off: ue,\n                reducers: jt\n            });\n            function v(C) {\n                if (typeof C != \"object\") throw TypeError(\"events must be an object\");\n                var g = P.reducers, K = V.call(L, p), G;\n                K === -1 ? G = new ye(L, p, P) : G = L._observers[K];\n                for(var _ = he(C), J = _.length, de, Pe = typeof g == \"function\", ke = 0; ke < J; ke++)de = _[ke], G.subscribe(de, C[de] || de, Pe ? g : g && g[de]);\n            }\n            return D(A) ? v(Rt(A)) : v(typeof A == \"string\" ? Rt(A.split(/\\s+/)) : A), this;\n        }, ne.prototype.stopListeningTo = function(p, A) {\n            var P = this._observers;\n            if (!P) return !1;\n            var L = P.length, v, C = !1;\n            if (p && typeof p != \"object\") throw TypeError(\"target should be an object\");\n            for(; L-- > 0;)v = P[L], (!p || v._target === p) && (v.unsubscribe(A), C = !0);\n            return C;\n        }, ne.prototype.delimiter = \".\", ne.prototype.setMaxListeners = function(p) {\n            p !== k && (this._maxListeners = p, this._conf || (this._conf = {}), this._conf.maxListeners = p);\n        }, ne.prototype.getMaxListeners = function() {\n            return this._maxListeners;\n        }, ne.prototype.event = \"\", ne.prototype.once = function(p, A, P) {\n            return this._once(p, A, !1, P);\n        }, ne.prototype.prependOnceListener = function(p, A, P) {\n            return this._once(p, A, !0, P);\n        }, ne.prototype._once = function(p, A, P, L) {\n            return this._many(p, 1, A, P, L);\n        }, ne.prototype.many = function(p, A, P, L) {\n            return this._many(p, A, P, !1, L);\n        }, ne.prototype.prependMany = function(p, A, P, L) {\n            return this._many(p, A, P, !0, L);\n        }, ne.prototype._many = function(p, A, P, L, v) {\n            var C = this;\n            if (typeof P != \"function\") throw new Error(\"many only accepts instances of Function\");\n            function g() {\n                return --A === 0 && C.off(p, g), P.apply(this, arguments);\n            }\n            return g._origin = P, this._on(p, g, L, v);\n        }, ne.prototype.emit = function() {\n            if (!this._events && !this._all) return !1;\n            this._events || Oe.call(this);\n            var p = arguments[0], A, P = this.wildcard, L, v, C, g, K;\n            if (p === \"newListener\" && !this._newListener && !this._events.newListener) return !1;\n            if (P && (A = p, p !== \"newListener\" && p !== \"removeListener\" && typeof p == \"object\")) {\n                if (v = p.length, ae) {\n                    for(C = 0; C < v; C++)if (typeof p[C] == \"symbol\") {\n                        K = !0;\n                        break;\n                    }\n                }\n                K || (p = p.join(this.delimiter));\n            }\n            var G = arguments.length, _;\n            if (this._all && this._all.length) for(_ = this._all.slice(), C = 0, v = _.length; C < v; C++)switch(this.event = p, G){\n                case 1:\n                    _[C].call(this, p);\n                    break;\n                case 2:\n                    _[C].call(this, p, arguments[1]);\n                    break;\n                case 3:\n                    _[C].call(this, p, arguments[1], arguments[2]);\n                    break;\n                default:\n                    _[C].apply(this, arguments);\n            }\n            if (P) _ = [], B.call(this, _, A, this.listenerTree, 0, v);\n            else if (_ = this._events[p], typeof _ == \"function\") {\n                switch(this.event = p, G){\n                    case 1:\n                        _.call(this);\n                        break;\n                    case 2:\n                        _.call(this, arguments[1]);\n                        break;\n                    case 3:\n                        _.call(this, arguments[1], arguments[2]);\n                        break;\n                    default:\n                        for(L = new Array(G - 1), g = 1; g < G; g++)L[g - 1] = arguments[g];\n                        _.apply(this, L);\n                }\n                return !0;\n            } else _ && (_ = _.slice());\n            if (_ && _.length) {\n                if (G > 3) for(L = new Array(G - 1), g = 1; g < G; g++)L[g - 1] = arguments[g];\n                for(C = 0, v = _.length; C < v; C++)switch(this.event = p, G){\n                    case 1:\n                        _[C].call(this);\n                        break;\n                    case 2:\n                        _[C].call(this, arguments[1]);\n                        break;\n                    case 3:\n                        _[C].call(this, arguments[1], arguments[2]);\n                        break;\n                    default:\n                        _[C].apply(this, L);\n                }\n                return !0;\n            } else if (!this.ignoreErrors && !this._all && p === \"error\") throw arguments[1] instanceof Error ? arguments[1] : new Error(\"Uncaught, unspecified 'error' event.\");\n            return !!this._all;\n        }, ne.prototype.emitAsync = function() {\n            if (!this._events && !this._all) return !1;\n            this._events || Oe.call(this);\n            var p = arguments[0], A = this.wildcard, P, L, v, C, g, K;\n            if (p === \"newListener\" && !this._newListener && !this._events.newListener) return Promise.resolve([\n                !1\n            ]);\n            if (A && (P = p, p !== \"newListener\" && p !== \"removeListener\" && typeof p == \"object\")) {\n                if (C = p.length, ae) {\n                    for(g = 0; g < C; g++)if (typeof p[g] == \"symbol\") {\n                        L = !0;\n                        break;\n                    }\n                }\n                L || (p = p.join(this.delimiter));\n            }\n            var G = [], _ = arguments.length, J;\n            if (this._all) for(g = 0, C = this._all.length; g < C; g++)switch(this.event = p, _){\n                case 1:\n                    G.push(this._all[g].call(this, p));\n                    break;\n                case 2:\n                    G.push(this._all[g].call(this, p, arguments[1]));\n                    break;\n                case 3:\n                    G.push(this._all[g].call(this, p, arguments[1], arguments[2]));\n                    break;\n                default:\n                    G.push(this._all[g].apply(this, arguments));\n            }\n            if (A ? (J = [], B.call(this, J, P, this.listenerTree, 0)) : J = this._events[p], typeof J == \"function\") switch(this.event = p, _){\n                case 1:\n                    G.push(J.call(this));\n                    break;\n                case 2:\n                    G.push(J.call(this, arguments[1]));\n                    break;\n                case 3:\n                    G.push(J.call(this, arguments[1], arguments[2]));\n                    break;\n                default:\n                    for(v = new Array(_ - 1), K = 1; K < _; K++)v[K - 1] = arguments[K];\n                    G.push(J.apply(this, v));\n            }\n            else if (J && J.length) {\n                if (J = J.slice(), _ > 3) for(v = new Array(_ - 1), K = 1; K < _; K++)v[K - 1] = arguments[K];\n                for(g = 0, C = J.length; g < C; g++)switch(this.event = p, _){\n                    case 1:\n                        G.push(J[g].call(this));\n                        break;\n                    case 2:\n                        G.push(J[g].call(this, arguments[1]));\n                        break;\n                    case 3:\n                        G.push(J[g].call(this, arguments[1], arguments[2]));\n                        break;\n                    default:\n                        G.push(J[g].apply(this, v));\n                }\n            } else if (!this.ignoreErrors && !this._all && p === \"error\") return arguments[1] instanceof Error ? Promise.reject(arguments[1]) : Promise.reject(\"Uncaught, unspecified 'error' event.\");\n            return Promise.all(G);\n        }, ne.prototype.on = function(p, A, P) {\n            return this._on(p, A, !1, P);\n        }, ne.prototype.prependListener = function(p, A, P) {\n            return this._on(p, A, !0, P);\n        }, ne.prototype.onAny = function(p) {\n            return this._onAny(p, !1);\n        }, ne.prototype.prependAny = function(p) {\n            return this._onAny(p, !0);\n        }, ne.prototype.addListener = ne.prototype.on, ne.prototype._onAny = function(p, A) {\n            if (typeof p != \"function\") throw new Error(\"onAny only accepts instances of Function\");\n            return this._all || (this._all = []), A ? this._all.unshift(p) : this._all.push(p), this;\n        }, ne.prototype._on = function(p, A, P, L) {\n            if (typeof p == \"function\") return this._onAny(p, A), this;\n            if (typeof A != \"function\") throw new Error(\"on only accepts instances of Function\");\n            this._events || Oe.call(this);\n            var v = this, C;\n            return L !== k && (C = _e.call(this, p, A, L), A = C[0], v = C[1]), this._newListener && this.emit(\"newListener\", p, A), this.wildcard ? (M.call(this, p, A, P), v) : (this._events[p] ? (typeof this._events[p] == \"function\" && (this._events[p] = [\n                this._events[p]\n            ]), P ? this._events[p].unshift(A) : this._events[p].push(A), !this._events[p].warned && this._maxListeners > 0 && this._events[p].length > this._maxListeners && (this._events[p].warned = !0, Re.call(this, this._events[p].length, p))) : this._events[p] = A, v);\n        }, ne.prototype.off = function(p, A) {\n            if (typeof A != \"function\") throw new Error(\"removeListener only takes instances of Function\");\n            var P, L = [];\n            if (this.wildcard) {\n                var v = typeof p == \"string\" ? p.split(this.delimiter) : p.slice();\n                if (L = B.call(this, null, v, this.listenerTree, 0), !L) return this;\n            } else {\n                if (!this._events[p]) return this;\n                P = this._events[p], L.push({\n                    _listeners: P\n                });\n            }\n            for(var C = 0; C < L.length; C++){\n                var g = L[C];\n                if (P = g._listeners, D(P)) {\n                    for(var K = -1, G = 0, _ = P.length; G < _; G++)if (P[G] === A || P[G].listener && P[G].listener === A || P[G]._origin && P[G]._origin === A) {\n                        K = G;\n                        break;\n                    }\n                    if (K < 0) continue;\n                    return this.wildcard ? g._listeners.splice(K, 1) : this._events[p].splice(K, 1), P.length === 0 && (this.wildcard ? delete g._listeners : delete this._events[p]), this._removeListener && this.emit(\"removeListener\", p, A), this;\n                } else (P === A || P.listener && P.listener === A || P._origin && P._origin === A) && (this.wildcard ? delete g._listeners : delete this._events[p], this._removeListener && this.emit(\"removeListener\", p, A));\n            }\n            return this.listenerTree && q(this.listenerTree), this;\n        }, ne.prototype.offAny = function(p) {\n            var A = 0, P = 0, L;\n            if (p && this._all && this._all.length > 0) {\n                for(L = this._all, A = 0, P = L.length; A < P; A++)if (p === L[A]) return L.splice(A, 1), this._removeListener && this.emit(\"removeListenerAny\", p), this;\n            } else {\n                if (L = this._all, this._removeListener) for(A = 0, P = L.length; A < P; A++)this.emit(\"removeListenerAny\", L[A]);\n                this._all = [];\n            }\n            return this;\n        }, ne.prototype.removeListener = ne.prototype.off, ne.prototype.removeAllListeners = function(p) {\n            if (p === k) return !this._events || Oe.call(this), this;\n            if (this.wildcard) {\n                var A = B.call(this, null, p, this.listenerTree, 0), P, L;\n                if (!A) return this;\n                for(L = 0; L < A.length; L++)P = A[L], P._listeners = null;\n                this.listenerTree && q(this.listenerTree);\n            } else this._events && (this._events[p] = null);\n            return this;\n        }, ne.prototype.listeners = function(p) {\n            var A = this._events, P, L, v, C, g;\n            if (p === k) {\n                if (this.wildcard) throw Error(\"event name required for wildcard emitter\");\n                if (!A) return [];\n                for(P = he(A), C = P.length, v = []; C-- > 0;)L = A[P[C]], typeof L == \"function\" ? v.push(L) : v.push.apply(v, L);\n                return v;\n            } else {\n                if (this.wildcard) {\n                    if (g = this.listenerTree, !g) return [];\n                    var K = [], G = typeof p == \"string\" ? p.split(this.delimiter) : p.slice();\n                    return B.call(this, K, G, g, 0), K;\n                }\n                return A ? (L = A[p], L ? typeof L == \"function\" ? [\n                    L\n                ] : L : []) : [];\n            }\n        }, ne.prototype.eventNames = function(p) {\n            var A = this._events;\n            return this.wildcard ? z.call(this, this.listenerTree, [], null, p) : A ? he(A) : [];\n        }, ne.prototype.listenerCount = function(p) {\n            return this.listeners(p).length;\n        }, ne.prototype.hasListeners = function(p) {\n            if (this.wildcard) {\n                var A = [], P = typeof p == \"string\" ? p.split(this.delimiter) : p.slice();\n                return B.call(this, A, P, this.listenerTree, 0), A.length > 0;\n            }\n            var L = this._events, v = this._all;\n            return !!(v && v.length || L && (p === k ? he(L).length : L[p]));\n        }, ne.prototype.listenersAny = function() {\n            return this._all ? this._all : [];\n        }, ne.prototype.waitFor = function(p, A) {\n            var P = this, L = typeof A;\n            return L === \"number\" ? A = {\n                timeout: A\n            } : L === \"function\" && (A = {\n                filter: A\n            }), A = Nt(A, {\n                timeout: 0,\n                filter: k,\n                handleError: !1,\n                Promise,\n                overload: !1\n            }, {\n                filter: ue,\n                Promise: ut\n            }), Ve(A.Promise, function(v, C, g) {\n                function K() {\n                    var G = A.filter;\n                    if (!(G && !G.apply(P, arguments))) if (P.off(p, K), A.handleError) {\n                        var _ = arguments[0];\n                        _ ? C(_) : v(Ze.apply(null, arguments).slice(1));\n                    } else v(Ze.apply(null, arguments));\n                }\n                g(function() {\n                    P.off(p, K);\n                }), P._on(p, K, !1);\n            }, {\n                timeout: A.timeout,\n                overload: A.overload\n            });\n        };\n        function Ge(p, A, P) {\n            P = Nt(P, {\n                Promise,\n                timeout: 0,\n                overload: !1\n            }, {\n                Promise: ut\n            });\n            var L = P.Promise;\n            return Ve(L, function(v, C, g) {\n                var K;\n                if (typeof p.addEventListener == \"function\") {\n                    K = function() {\n                        v(Ze.apply(null, arguments));\n                    }, g(function() {\n                        p.removeEventListener(A, K);\n                    }), p.addEventListener(A, K, {\n                        once: !0\n                    });\n                    return;\n                }\n                var G = function() {\n                    _ && p.removeListener(\"error\", _), v(Ze.apply(null, arguments));\n                }, _;\n                A !== \"error\" && (_ = function(J) {\n                    p.removeListener(A, G), C(J);\n                }, p.once(\"error\", _)), g(function() {\n                    _ && p.removeListener(\"error\", _), p.removeListener(A, G);\n                }), p.once(A, G);\n            }, {\n                timeout: P.timeout,\n                overload: P.overload\n            });\n        }\n        var bt = ne.prototype;\n        if (Object.defineProperties(ne, {\n            defaultMaxListeners: {\n                get: function() {\n                    return bt._maxListeners;\n                },\n                set: function(p) {\n                    if (typeof p != \"number\" || p < 0 || Number.isNaN(p)) throw TypeError(\"n must be a non-negative number\");\n                    bt._maxListeners = p;\n                },\n                enumerable: !0\n            },\n            once: {\n                value: Ge,\n                writable: !0,\n                configurable: !0\n            }\n        }), Object.defineProperties(bt, {\n            _maxListeners: {\n                value: W,\n                writable: !0,\n                configurable: !0\n            },\n            _observers: {\n                value: null,\n                writable: !0,\n                configurable: !0\n            }\n        }), typeof define == \"function\" && define.amd) define(function() {\n            return ne;\n        });\n        else if (typeof Aa == \"object\") da.exports = ne;\n        else {\n            var _t = new Function(\"\", \"return this\")();\n            _t.EventEmitter2 = ne;\n        }\n    })();\n});\nvar Sa = hn((qp, Na)=>{\n    Na.exports = Ia();\n});\nvar Pa = hn((Pn, ha)=>{\n    (function(k, S) {\n        var D = S(k);\n        if (typeof define == \"function\" && define.amd) define(\"DeepDiff\", function() {\n            return D;\n        });\n        else if (typeof Pn == \"object\" || typeof navigator == \"object\" && navigator.product.match(/ReactNative/i)) ha.exports = D;\n        else {\n            var W = k.DeepDiff;\n            D.noConflict = function() {\n                return k.DeepDiff === D && (k.DeepDiff = W), D;\n            }, k.DeepDiff = D;\n        }\n    })(Pn, function(k) {\n        var S = [\n            \"N\",\n            \"E\",\n            \"A\",\n            \"D\"\n        ];\n        function D(V, B) {\n            V.super_ = B, V.prototype = Object.create(B.prototype, {\n                constructor: {\n                    value: V,\n                    enumerable: !1,\n                    writable: !0,\n                    configurable: !0\n                }\n            });\n        }\n        function W(V, B) {\n            Object.defineProperty(this, \"kind\", {\n                value: V,\n                enumerable: !0\n            }), B && B.length && Object.defineProperty(this, \"path\", {\n                value: B,\n                enumerable: !0\n            });\n        }\n        function X(V, B, M) {\n            X.super_.call(this, \"E\", V), Object.defineProperty(this, \"lhs\", {\n                value: B,\n                enumerable: !0\n            }), Object.defineProperty(this, \"rhs\", {\n                value: M,\n                enumerable: !0\n            });\n        }\n        D(X, W);\n        function ae(V, B) {\n            ae.super_.call(this, \"N\", V), Object.defineProperty(this, \"rhs\", {\n                value: B,\n                enumerable: !0\n            });\n        }\n        D(ae, W);\n        function Ee(V, B) {\n            Ee.super_.call(this, \"D\", V), Object.defineProperty(this, \"lhs\", {\n                value: B,\n                enumerable: !0\n            });\n        }\n        D(Ee, W);\n        function be(V, B, M) {\n            be.super_.call(this, \"A\", V), Object.defineProperty(this, \"index\", {\n                value: B,\n                enumerable: !0\n            }), Object.defineProperty(this, \"item\", {\n                value: M,\n                enumerable: !0\n            });\n        }\n        D(be, W);\n        function ve(V, B, M) {\n            var z = V.slice((M || B) + 1 || V.length);\n            return V.length = B < 0 ? V.length + B : B, V.push.apply(V, z), V;\n        }\n        function he(V) {\n            var B = typeof V;\n            return B !== \"object\" ? B : V === Math ? \"math\" : V === null ? \"null\" : Array.isArray(V) ? \"array\" : Object.prototype.toString.call(V) === \"[object Date]\" ? \"date\" : typeof V.toString == \"function\" && /^\\/.*\\//.test(V.toString()) ? \"regexp\" : \"object\";\n        }\n        function Oe(V) {\n            var B = 0;\n            if (V.length === 0) return B;\n            for(var M = 0; M < V.length; M++){\n                var z = V.charCodeAt(M);\n                B = (B << 5) - B + z, B = B & B;\n            }\n            return B;\n        }\n        function Le(V) {\n            var B = 0, M = he(V);\n            if (M === \"array\") {\n                V.forEach(function(ne) {\n                    B += Le(ne);\n                });\n                var z = \"[type: array, hash: \" + B + \"]\";\n                return B + Oe(z);\n            }\n            if (M === \"object\") {\n                for(var q in V)if (V.hasOwnProperty(q)) {\n                    var Te = \"[ type: object, key: \" + q + \", value hash: \" + Le(V[q]) + \"]\";\n                    B += Oe(Te);\n                }\n                return B;\n            }\n            var _e = \"[ type: \" + M + \" ; value: \" + V + \"]\";\n            return B + Oe(_e);\n        }\n        function Re(V, B, M, z, q, Te, _e, ne) {\n            M = M || [], q = q || [], _e = _e || [];\n            var Ge = q.slice(0);\n            if (typeof Te < \"u\" && Te !== null) {\n                if (z) {\n                    if (typeof z == \"function\" && z(Ge, Te)) return;\n                    if (typeof z == \"object\") {\n                        if (z.prefilter && z.prefilter(Ge, Te)) return;\n                        if (z.normalize) {\n                            var bt = z.normalize(Ge, Te, V, B);\n                            bt && (V = bt[0], B = bt[1]);\n                        }\n                    }\n                }\n                Ge.push(Te);\n            }\n            he(V) === \"regexp\" && he(B) === \"regexp\" && (V = V.toString(), B = B.toString());\n            var _t = typeof V, p = typeof B, A, P, L, v, C = _t !== \"undefined\" || _e && _e.length > 0 && _e[_e.length - 1].lhs && Object.getOwnPropertyDescriptor(_e[_e.length - 1].lhs, Te), g = p !== \"undefined\" || _e && _e.length > 0 && _e[_e.length - 1].rhs && Object.getOwnPropertyDescriptor(_e[_e.length - 1].rhs, Te);\n            if (!C && g) M.push(new ae(Ge, B));\n            else if (!g && C) M.push(new Ee(Ge, V));\n            else if (he(V) !== he(B)) M.push(new X(Ge, V, B));\n            else if (he(V) === \"date\" && V - B !== 0) M.push(new X(Ge, V, B));\n            else if (_t === \"object\" && V !== null && B !== null) {\n                for(A = _e.length - 1; A > -1; --A)if (_e[A].lhs === V) {\n                    v = !0;\n                    break;\n                }\n                if (v) V !== B && M.push(new X(Ge, V, B));\n                else {\n                    if (_e.push({\n                        lhs: V,\n                        rhs: B\n                    }), Array.isArray(V)) {\n                        for(ne && (V.sort(function(_, J) {\n                            return Le(_) - Le(J);\n                        }), B.sort(function(_, J) {\n                            return Le(_) - Le(J);\n                        })), A = B.length - 1, P = V.length - 1; A > P;)M.push(new be(Ge, A, new ae(void 0, B[A--])));\n                        for(; P > A;)M.push(new be(Ge, P, new Ee(void 0, V[P--])));\n                        for(; A >= 0; --A)Re(V[A], B[A], M, z, Ge, A, _e, ne);\n                    } else {\n                        var K = Object.keys(V), G = Object.keys(B);\n                        for(A = 0; A < K.length; ++A)L = K[A], v = G.indexOf(L), v >= 0 ? (Re(V[L], B[L], M, z, Ge, L, _e, ne), G[v] = null) : Re(V[L], void 0, M, z, Ge, L, _e, ne);\n                        for(A = 0; A < G.length; ++A)L = G[A], L && Re(void 0, B[L], M, z, Ge, L, _e, ne);\n                    }\n                    _e.length = _e.length - 1;\n                }\n            } else V !== B && (_t === \"number\" && isNaN(V) && isNaN(B) || M.push(new X(Ge, V, B)));\n        }\n        function Ze(V, B, M, z, q) {\n            var Te = [];\n            if (Re(V, B, Te, z, null, null, null, q), M) for(var _e = 0; _e < Te.length; ++_e)M(Te[_e]);\n            return Te;\n        }\n        function Rt(V, B, M, z, q, Te, _e) {\n            return Re(V, B, M, z, q, Te, _e, !0);\n        }\n        function ye(V, B, M, z) {\n            var q = z ? function(_e) {\n                _e && z.push(_e);\n            } : void 0, Te = Ze(V, B, q, M);\n            return z || (Te.length ? Te : void 0);\n        }\n        function Nt(V, B, M, z) {\n            var q = z ? function(_e) {\n                _e && z.push(_e);\n            } : void 0, Te = Ze(V, B, q, M, !0);\n            return z || (Te.length ? Te : void 0);\n        }\n        function ut(V, B, M) {\n            if (M.path && M.path.length) {\n                var z = V[B], q, Te = M.path.length - 1;\n                for(q = 0; q < Te; q++)z = z[M.path[q]];\n                switch(M.kind){\n                    case \"A\":\n                        ut(z[M.path[q]], M.index, M.item);\n                        break;\n                    case \"D\":\n                        delete z[M.path[q]];\n                        break;\n                    case \"E\":\n                    case \"N\":\n                        z[M.path[q]] = M.rhs;\n                        break;\n                }\n            } else switch(M.kind){\n                case \"A\":\n                    ut(V[B], M.index, M.item);\n                    break;\n                case \"D\":\n                    V = ve(V, B);\n                    break;\n                case \"E\":\n                case \"N\":\n                    V[B] = M.rhs;\n                    break;\n            }\n            return V;\n        }\n        function kt(V, B, M) {\n            if (typeof M > \"u\" && B && ~S.indexOf(B.kind) && (M = B), V && M && M.kind) {\n                for(var z = V, q = -1, Te = M.path ? M.path.length - 1 : 0; ++q < Te;)typeof z[M.path[q]] > \"u\" && (z[M.path[q]] = typeof M.path[q + 1] < \"u\" && typeof M.path[q + 1] == \"number\" ? [] : {}), z = z[M.path[q]];\n                switch(M.kind){\n                    case \"A\":\n                        M.path && typeof z[M.path[q]] > \"u\" && (z[M.path[q]] = []), ut(M.path ? z[M.path[q]] : z, M.index, M.item);\n                        break;\n                    case \"D\":\n                        delete z[M.path[q]];\n                        break;\n                    case \"E\":\n                    case \"N\":\n                        z[M.path[q]] = M.rhs;\n                        break;\n                }\n            }\n        }\n        function ue(V, B, M) {\n            if (M.path && M.path.length) {\n                var z = V[B], q, Te = M.path.length - 1;\n                for(q = 0; q < Te; q++)z = z[M.path[q]];\n                switch(M.kind){\n                    case \"A\":\n                        ue(z[M.path[q]], M.index, M.item);\n                        break;\n                    case \"D\":\n                        z[M.path[q]] = M.lhs;\n                        break;\n                    case \"E\":\n                        z[M.path[q]] = M.lhs;\n                        break;\n                    case \"N\":\n                        delete z[M.path[q]];\n                        break;\n                }\n            } else switch(M.kind){\n                case \"A\":\n                    ue(V[B], M.index, M.item);\n                    break;\n                case \"D\":\n                    V[B] = M.lhs;\n                    break;\n                case \"E\":\n                    V[B] = M.lhs;\n                    break;\n                case \"N\":\n                    V = ve(V, B);\n                    break;\n            }\n            return V;\n        }\n        function jt(V, B, M) {\n            if (V && B && M && M.kind) {\n                var z = V, q, Te;\n                for(Te = M.path.length - 1, q = 0; q < Te; q++)typeof z[M.path[q]] > \"u\" && (z[M.path[q]] = {}), z = z[M.path[q]];\n                switch(M.kind){\n                    case \"A\":\n                        ue(z[M.path[q]], M.index, M.item);\n                        break;\n                    case \"D\":\n                        z[M.path[q]] = M.lhs;\n                        break;\n                    case \"E\":\n                        z[M.path[q]] = M.lhs;\n                        break;\n                    case \"N\":\n                        delete z[M.path[q]];\n                        break;\n                }\n            }\n        }\n        function Ve(V, B, M) {\n            if (V && B) {\n                var z = function(q) {\n                    (!M || M(V, B, q)) && kt(V, B, q);\n                };\n                Ze(V, B, z);\n            }\n        }\n        return Object.defineProperties(ye, {\n            diff: {\n                value: ye,\n                enumerable: !0\n            },\n            orderIndependentDiff: {\n                value: Nt,\n                enumerable: !0\n            },\n            observableDiff: {\n                value: Ze,\n                enumerable: !0\n            },\n            orderIndependentObservableDiff: {\n                value: Rt,\n                enumerable: !0\n            },\n            orderIndepHash: {\n                value: Le,\n                enumerable: !0\n            },\n            applyDiff: {\n                value: Ve,\n                enumerable: !0\n            },\n            applyChange: {\n                value: kt,\n                enumerable: !0\n            },\n            revertChange: {\n                value: jt,\n                enumerable: !0\n            },\n            isConflict: {\n                value: function() {\n                    return typeof $conflict < \"u\";\n                },\n                enumerable: !0\n            }\n        }), ye.DeepDiff = ye, k && (k.DeepDiff = ye), ye;\n    });\n});\nvar fl = Ta(Sa(), 1), El = Ta(Pa(), 1);\nvar pf = \"as\", mf = \"=\", bf = \"break\", Of = \"else\", Tf = \"enum\", Af = \"export\", df = \"if\", If = \"import\", Nf = \"->\", Sf = \"is\", hf = \"loop\", Pf = \"mut\", Lf = \"native\", Rf = \"object\", kf = \"fn\", Cf = \"return\", vf = \"self\", yf = \"template\", Uf = Object.freeze({\n    ALIAS: pf,\n    ASSIGN: mf,\n    BREAK: bf,\n    ELSE: Of,\n    ENUMERATION: Tf,\n    EXPORT: Af,\n    IF: df,\n    IMPORT: If,\n    INTO: Nf,\n    IS: Sf,\n    LOOP: hf,\n    MUTABLE: Pf,\n    NATIVE: Lf,\n    OBJECT: Rf,\n    PROCEDURE: kf,\n    RETURN: Cf,\n    SELF: vf,\n    TEMPLATE: yf\n}), La = Uf;\nvar Bf = \"assign\", Df = \"arity_match\", Mf = \"arity_status\", Ff = \"array_assignment\", jf = \"branch-match\", Yf = \"branch-default\", wf = \"condition\", gf = \"loop\", Vf = \"data\", Gf = \"generics\", $f = \"enumeration\", Kf = \"expression\", Hf = \"instance\", zf = \"Link\", Xf = \"local\", Wf = \"object\", Jf = \"procedure\", Zf = \"return\", qf = \"compare\", Qf = \"select\", xf = \"member\", eE = \"store\", tE = \"break\", sE = \"literal\", nE = \"array_access\", oE = \"valueLink\", aE = \"linkValue\", rE = \"self\", cE = \"procedure-call\", uE = \"Maybe\", iE = \"native\", lE = \"move\", fE = \"String\", EE = \"Array\", _E = \"import\", pE = \"library\", mE = \"constructor\", bE = \"destructor\", OE = \"free\", TE = \"block-end\", AE = \"default-block\", dE = \"continue\", IE = \"branch\", NE = \"statement\", SE = \"draw\", hE = \"now\", PE = \"size\", LE = \"concatenation\", RE = \"foreach\", kE = \"while\", CE = \"when\", vE = \"while-condition\", yE = \"foreach-condition\", UE = \"foreach-end\", BE = \"for\", DE = \"up_to\", ME = \"down_to\", FE = \"almost_up_to\", jE = \"almost_down_to\", YE = \"I32\", wE = \"U32\", gE = \"FP32\", VE = \"I16\", GE = \"U16\", $E = \"U8\", KE = \"I8\", HE = \"FP64\", zE = \"U64\", XE = \"I64\", WE = \"Char\", JE = \"block-start\", ZE = \"function-call\", qE = \"Bool\", QE = Object.freeze({\n    TYPES_ASSIGN: Bf,\n    TYPES_ARRAY: EE,\n    TYPES_ARITY_MATCH: Df,\n    TYPES_ARITY_STATUS: Mf,\n    TYPES_ARRAY_ASSIGNMENT: Ff,\n    TYPES_BRANCH_MATCH: jf,\n    TYPES_BRANCH_DEFAULT: Yf,\n    TYPES_CONDITION: wf,\n    TYPES_LOOP: gf,\n    TYPES_FOREACH_END: UE,\n    TYPES_WHILE_CONDITION: vE,\n    TYPES_FOREACH_CONDITION: yE,\n    TYPES_DATA: Vf,\n    TYPES_COMPARE: qf,\n    TYPES_GENERICS: Gf,\n    TYPES_ENUMERATION: $f,\n    TYPES_EXPRESSION: Kf,\n    TYPES_INSTANCE: Hf,\n    TYPES_LINK: zf,\n    TYPES_IMPORT: _E,\n    TYPES_LOCAL: Xf,\n    TYPES_OBJECT: Wf,\n    TYPES_PROCEDURE: Jf,\n    TYPES_RETURN: Zf,\n    TYPES_SELECT: Qf,\n    TYPES_MEMBER: xf,\n    TYPES_STORE: eE,\n    TYPES_BREAK: tE,\n    TYPES_LITERAL: sE,\n    TYPES_ARRAY_ACCESS: nE,\n    TYPES_LINK_TO: oE,\n    TYPES_VALUE_AT: aE,\n    TYPES_SELF: rE,\n    TYPES_LIBRARY: pE,\n    TYPES_DROP: cE,\n    TYPES_MAYBE: uE,\n    TYPES_NATIVE: iE,\n    TYPES_MOVE: lE,\n    TYPES_STRING: fE,\n    TYPES_CONSTRUCTOR: mE,\n    TYPES_FREE: OE,\n    TYPES_DEFAULT_BLOCK: AE,\n    TYPES_BLOCK_END: TE,\n    TYPES_CONTINUE: dE,\n    TYPES_BRANCH: IE,\n    TYPES_STATEMENT: NE,\n    TYPES_DESTRUCTOR: bE,\n    TYPES_DRAW: SE,\n    TYPES_NOW: hE,\n    TYPES_SIZE: PE,\n    TYPES_CONCAT: LE,\n    TYPES_FOREACH: RE,\n    TYPES_WHILE: kE,\n    TYPES_WHEN: CE,\n    TYPES_FOR: BE,\n    TYPES_UP_TO: DE,\n    TYPES_DOWN_TO: ME,\n    TYPES_ALMOST_UP_TO: FE,\n    TYPES_ALMOST_DOWN_TO: jE,\n    TYPES_I32: YE,\n    TYPES_FP32: gE,\n    TYPES_FP64: HE,\n    TYPES_U32: wE,\n    TYPES_I64: XE,\n    TYPES_U64: zE,\n    TYPES_I16: VE,\n    TYPES_U16: GE,\n    TYPES_I8: KE,\n    TYPES_U8: $E,\n    TYPES_CHAR: WE,\n    TYPES_BOOL: qE,\n    TYPES_BLOCK_BEGIN: JE,\n    TYPES_FUNCTION_CALL: ZE\n}), Ln = QE;\nvar xE = Object.freeze({\n    COLON: 58,\n    COMMA: 44,\n    DIGIT_ZERO: 48,\n    DIGIT_NINE: 57,\n    DOT: 46,\n    HASHTAG: 35,\n    HORIZONTAL_TAB: 9,\n    HYPHEN_MINUS: 45,\n    LEFT_CURLY_BRACKET: 123,\n    LEFT_PARENTHESIS: 40,\n    LEFT_SQUARE_BRACKET: 91,\n    LINE_BREAK: 10,\n    NULL: 0,\n    PLUS_SIGN: 43,\n    RIGHT_CURLY_BRACKET: 125,\n    RIGHT_PARENTHESIS: 41,\n    RIGHT_SQUARE_BRACKET: 93,\n    SEMICOLON: 59,\n    SPACE: 32,\n    E_SIGN: 101\n}), Ra = xE;\nvar e_ = \"assignment\", t_ = \"Flogram\", s_ = Object.freeze({\n    K_ASSIGNMENT: e_,\n    K_FLOGRAM: t_\n}), ka = s_;\nvar n_ = Object.freeze([\n    [\n        43\n    ],\n    [\n        45\n    ],\n    [\n        42\n    ],\n    [\n        47\n    ],\n    [\n        37\n    ],\n    [\n        110,\n        111,\n        116\n    ],\n    [\n        60\n    ],\n    [\n        62\n    ],\n    [\n        94\n    ],\n    [\n        111,\n        114\n    ],\n    [\n        33\n    ],\n    [\n        61,\n        61\n    ],\n    [\n        60,\n        61\n    ],\n    [\n        62,\n        61\n    ],\n    [\n        33,\n        61\n    ],\n    [\n        120,\n        111,\n        114\n    ],\n    [\n        97,\n        110,\n        100\n    ]\n]), o_ = n_, Ca = o_;\nvar a_ = Object.freeze({\n    INT_ARRAY_START: 9999991,\n    FLOAT_ARRAY_START: 9999981,\n    STRING_START: 8888891,\n    CHAR_START: 8888881,\n    NAT_ON_HORIZON: 7777791,\n    BIG_NAT_ON_HORIZON: 7777591,\n    FLOAT_ON_HORIZON: 7777771,\n    BIG_FLOAT_ON_HORIZON: 7777731,\n    END_OF_LINE: 66666661\n}), va = a_;\nvar r_ = Object.freeze({\n    ENUM_MEMORY_SIZE: 12,\n    ENUM_STACK_SIZE: 3,\n    ARRAY_MEMORY_SIZE: 12,\n    ARRAY_STACK_SIZE: 3,\n    ARRAY_DEFAULT_CAPACITY: 4,\n    STRING_MEMORY_SIZE: 8,\n    STRING_STACK_SIZE: 2,\n    OBJECT_MEMORY_SIZE: 8,\n    OBJECT_STACK_SIZE: 2,\n    NATIVE_MEMORY_SIZE: 4,\n    NATIVE_STACK_SIZE: 1,\n    NATIVE_SIZE: 4,\n    STEP: 4,\n    DOUBLE_STEP: 8,\n    TRIPPLE_STEP: 12\n}), ya = r_;\nvar c_ = Object.freeze([]), u_ = Object.freeze({}), it = \"\", i_ = \"\t\", l_ = `\n`, f_ = \"UTF-8\", Ua = Ln, E_ = Object.freeze({\n    EMPTY_ARRAY: c_,\n    EMPTY_OBJECT: u_,\n    EMPTY_STRING: it,\n    HORIZONTAL_TAB: i_,\n    LINE_BREAK: l_,\n    UNICODE_TEXT: f_,\n    Codes: Ra,\n    Keys: La,\n    Types: Ln,\n    Keywords: ka,\n    Operators: Ca,\n    DrawStates: va,\n    Sizes: ya\n}), qt = E_;\nfunction I(k, S = [], D = \"\") {\n    let W = S.map((ae, Ee)=>({\n            name: `operand${Ee + 1}`,\n            data: {\n                type: \"data\",\n                name: ae,\n                path: \"Flogram\"\n            }\n        })), X = {\n        type: \"native\",\n        name: k,\n        path: \"Flogram\",\n        description: {\n            inputs: W,\n            outputs: D && S.length <= 0 ? null : [\n                {\n                    name: \"result\",\n                    data: {\n                        type: \"data\",\n                        name: D || (S.length > 0 ? S[0] : \"\"),\n                        path: \"Flogram\"\n                    }\n                }\n            ]\n        }\n    };\n    return Object.freeze(X);\n}\nvar __ = Object.freeze({\n    \"+\": [\n        I(\"+\", [\n            \"FP64\",\n            \"FP64\"\n        ]),\n        I(\"+\", [\n            \"U64\",\n            \"U64\"\n        ]),\n        I(\"+\", [\n            \"I64\",\n            \"I64\"\n        ]),\n        I(\"+\", [\n            \"FP32\",\n            \"FP32\"\n        ]),\n        I(\"+\", [\n            \"U32\",\n            \"U32\"\n        ]),\n        I(\"+\", [\n            \"I32\",\n            \"I32\"\n        ]),\n        I(\"+\", [\n            \"U16\",\n            \"U16\"\n        ]),\n        I(\"+\", [\n            \"I16\",\n            \"I16\"\n        ]),\n        I(\"+\", [\n            \"U8\",\n            \"U8\"\n        ]),\n        I(\"+\", [\n            \"I8\",\n            \"I8\"\n        ]),\n        I(\"+\", [\n            \"any\",\n            \"any\"\n        ])\n    ],\n    \"-\": [\n        I(\"-\", [\n            \"FP64\",\n            \"FP64\"\n        ]),\n        I(\"-\", [\n            \"U64\",\n            \"U64\"\n        ]),\n        I(\"-\", [\n            \"I64\",\n            \"I64\"\n        ]),\n        I(\"-\", [\n            \"FP32\",\n            \"FP32\"\n        ]),\n        I(\"-\", [\n            \"U32\",\n            \"U32\"\n        ]),\n        I(\"-\", [\n            \"I32\",\n            \"I32\"\n        ]),\n        I(\"-\", [\n            \"U16\",\n            \"U16\"\n        ]),\n        I(\"-\", [\n            \"I16\",\n            \"I16\"\n        ]),\n        I(\"-\", [\n            \"U8\",\n            \"U8\"\n        ]),\n        I(\"-\", [\n            \"I8\",\n            \"I8\"\n        ]),\n        I(\"-\", [\n            \"any\",\n            \"any\"\n        ]),\n        I(\"-\", [\n            \"FP64\"\n        ]),\n        I(\"-\", [\n            \"I64\"\n        ]),\n        I(\"-\", [\n            \"FP32\"\n        ]),\n        I(\"-\", [\n            \"I32\"\n        ]),\n        I(\"-\", [\n            \"I16\"\n        ]),\n        I(\"-\", [\n            \"I8\"\n        ]),\n        I(\"-\", [\n            \"any\"\n        ])\n    ],\n    \"*\": [\n        I(\"*\", [\n            \"FP64\",\n            \"FP64\"\n        ]),\n        I(\"*\", [\n            \"U64\",\n            \"U64\"\n        ]),\n        I(\"*\", [\n            \"I64\",\n            \"I64\"\n        ]),\n        I(\"*\", [\n            \"FP32\",\n            \"FP32\"\n        ]),\n        I(\"*\", [\n            \"U32\",\n            \"U32\"\n        ]),\n        I(\"*\", [\n            \"I32\",\n            \"I32\"\n        ]),\n        I(\"*\", [\n            \"U16\",\n            \"U16\"\n        ]),\n        I(\"*\", [\n            \"I16\",\n            \"I16\"\n        ]),\n        I(\"*\", [\n            \"U8\",\n            \"U8\"\n        ]),\n        I(\"*\", [\n            \"I8\",\n            \"I8\"\n        ]),\n        I(\"*\", [\n            \"any\",\n            \"any\"\n        ])\n    ],\n    \"/\": [\n        I(\"/\", [\n            \"FP64\",\n            \"FP64\"\n        ]),\n        I(\"/\", [\n            \"U64\",\n            \"U64\"\n        ]),\n        I(\"/\", [\n            \"I64\",\n            \"I64\"\n        ]),\n        I(\"/\", [\n            \"FP32\",\n            \"FP32\"\n        ]),\n        I(\"/\", [\n            \"U32\",\n            \"U32\"\n        ]),\n        I(\"/\", [\n            \"I32\",\n            \"I32\"\n        ]),\n        I(\"/\", [\n            \"U16\",\n            \"U16\"\n        ]),\n        I(\"/\", [\n            \"I16\",\n            \"I16\"\n        ]),\n        I(\"/\", [\n            \"U8\",\n            \"U8\"\n        ]),\n        I(\"/\", [\n            \"I8\",\n            \"I8\"\n        ]),\n        I(\"/\", [\n            \"any\",\n            \"any\"\n        ])\n    ],\n    \"%\": [\n        I(\"%\", [\n            \"I64\",\n            \"I64\"\n        ]),\n        I(\"%\", [\n            \"U64\",\n            \"U64\"\n        ]),\n        I(\"%\", [\n            \"I32\",\n            \"I32\"\n        ]),\n        I(\"%\", [\n            \"U32\",\n            \"U32\"\n        ]),\n        I(\"%\", [\n            \"I16\",\n            \"I16\"\n        ]),\n        I(\"%\", [\n            \"U16\",\n            \"U16\"\n        ]),\n        I(\"%\", [\n            \"I8\",\n            \"I8\"\n        ]),\n        I(\"%\", [\n            \"U8\",\n            \"U8\"\n        ]),\n        I(\"%\", [\n            \"any\",\n            \"any\"\n        ])\n    ],\n    \"!=\": [\n        I(\"!=\", [\n            \"FP64\",\n            \"FP64\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"U64\",\n            \"U64\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"I64\",\n            \"I64\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"FP32\",\n            \"FP32\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"U32\",\n            \"U32\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"I32\",\n            \"I32\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"U16\",\n            \"U16\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"I16\",\n            \"I16\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"U8\",\n            \"U8\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"I8\",\n            \"I8\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"Char\",\n            \"Char\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"Bool\",\n            \"Bool\"\n        ], \"Bool\"),\n        I(\"!=\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    \"==\": [\n        I(\"==\", [\n            \"FP64\",\n            \"FP64\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"U64\",\n            \"U64\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"I64\",\n            \"I64\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"FP32\",\n            \"FP32\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"U32\",\n            \"U32\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"I32\",\n            \"I32\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"U16\",\n            \"U16\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"I16\",\n            \"I16\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"U8\",\n            \"U8\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"I8\",\n            \"I8\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"Char\",\n            \"Char\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"Bool\",\n            \"Bool\"\n        ], \"Bool\"),\n        I(\"==\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    \">\": [\n        I(\">\", [\n            \"FP64\",\n            \"FP64\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"U64\",\n            \"U64\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"I64\",\n            \"I64\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"FP32\",\n            \"FP32\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"U32\",\n            \"U32\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"I32\",\n            \"I32\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"U16\",\n            \"U16\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"I16\",\n            \"I16\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"U8\",\n            \"U8\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"I8\",\n            \"I8\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"Char\",\n            \"Char\"\n        ], \"Bool\"),\n        I(\">\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    \"<\": [\n        I(\"<\", [\n            \"FP64\",\n            \"FP64\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"U64\",\n            \"U64\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"I64\",\n            \"I64\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"FP32\",\n            \"FP32\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"U32\",\n            \"U32\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"I32\",\n            \"I32\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"U16\",\n            \"U16\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"I16\",\n            \"I16\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"U8\",\n            \"U8\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"I8\",\n            \"I8\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"Char\",\n            \"Char\"\n        ], \"Bool\"),\n        I(\"<\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    \">=\": [\n        I(\">=\", [\n            \"FP64\",\n            \"FP64\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"U64\",\n            \"U64\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"I64\",\n            \"I64\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"FP32\",\n            \"FP32\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"U32\",\n            \"U32\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"I32\",\n            \"I32\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"U16\",\n            \"U16\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"I16\",\n            \"I16\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"U8\",\n            \"U8\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"I8\",\n            \"I8\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"Char\",\n            \"Char\"\n        ], \"Bool\"),\n        I(\">=\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    \"<=\": [\n        I(\"<=\", [\n            \"FP64\",\n            \"FP64\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"U64\",\n            \"U64\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"I64\",\n            \"I64\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"FP32\",\n            \"FP32\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"U32\",\n            \"U32\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"I32\",\n            \"I32\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"U16\",\n            \"U16\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"I16\",\n            \"I16\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"U8\",\n            \"U8\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"I8\",\n            \"I8\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"Char\",\n            \"Char\"\n        ], \"Bool\"),\n        I(\"<=\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    and: [\n        I(\"and\", [\n            \"Bool\",\n            \"Bool\"\n        ], \"Bool\"),\n        I(\"and\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    xor: [\n        I(\"xor\", [\n            \"Bool\",\n            \"Bool\"\n        ], \"Bool\"),\n        I(\"xor\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    or: [\n        I(\"or\", [\n            \"Bool\",\n            \"Bool\"\n        ], \"Bool\"),\n        I(\"or\", [\n            \"any\",\n            \"any\"\n        ], \"any\")\n    ],\n    not: [\n        I(\"not\", [\n            \"Bool\"\n        ], \"Bool\"),\n        I(\"not\", [\n            \"any\"\n        ], \"any\")\n    ],\n    I32: [\n        I(\"I32\", [\n            \"FP64\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"U64\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"I64\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"FP32\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"U32\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"U16\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"I16\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"U8\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"I8\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"Char\"\n        ], \"I32\"),\n        I(\"I32\", [\n            \"any\"\n        ], \"any\")\n    ],\n    U32: [\n        I(\"U32\", [\n            \"FP64\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"U64\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"I64\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"FP32\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"I32\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"U16\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"I16\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"U8\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"I8\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"Char\"\n        ], \"U32\"),\n        I(\"U32\", [\n            \"any\"\n        ], \"any\")\n    ],\n    I64: [\n        I(\"I64\", [\n            \"FP64\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"U64\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"FP32\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"U32\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"I32\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"U16\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"I16\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"U8\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"I8\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"Char\"\n        ], \"I64\"),\n        I(\"I64\", [\n            \"any\"\n        ], \"any\")\n    ],\n    U64: [\n        I(\"U64\", [\n            \"FP64\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"I64\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"FP32\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"U32\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"I32\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"U16\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"I16\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"U8\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"I8\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"Char\"\n        ], \"U64\"),\n        I(\"U64\", [\n            \"any\"\n        ], \"any\")\n    ],\n    FP32: [\n        I(\"FP32\", [\n            \"FP64\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"U64\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"I64\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"U32\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"I32\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"U16\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"I16\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"U8\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"I8\"\n        ], \"FP32\"),\n        I(\"FP32\", [\n            \"any\"\n        ], \"any\")\n    ],\n    FP64: [\n        I(\"FP64\", [\n            \"U64\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"I64\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"FP32\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"U32\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"I32\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"U16\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"I16\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"U8\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"I8\"\n        ], \"FP64\"),\n        I(\"FP64\", [\n            \"any\"\n        ], \"any\"),\n        I(\"FP64\", [\n            \"any\"\n        ], \"any\")\n    ]\n}), Gt = __;\nvar Ba = Object.freeze([\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"!=\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"not\",\n    \"I32\",\n    \"U32\",\n    \"I64\",\n    \"U64\",\n    \"FP64\",\n    \"FP32\"\n]);\nvar p_ = Object.freeze([\n    \"FP64\",\n    \"U64\",\n    \"I64\",\n    \"FP32\",\n    \"U32\",\n    \"I32\",\n    \"U16\",\n    \"I16\",\n    \"U8\",\n    \"I8\",\n    \"Bool\",\n    \"Char\",\n    \"Array\",\n    \"String\",\n    \"Link\",\n    \"Maybe\"\n]), Qt = [\n    \"U8\",\n    \"U16\",\n    \"U32\"\n], Es = [\n    ...Qt,\n    \"I8\",\n    \"I16\",\n    \"I32\"\n], m_ = [\n    \"I64\",\n    \"U64\"\n], Rn = [\n    ...Es,\n    ...m_\n], b_ = [\n    \"FP32\",\n    \"FP64\"\n], _s = [\n    ...Rn,\n    ...b_\n], ht = p_;\nvar { EMPTY_STRING: O_, UNICODE_TEXT: yn } = qt;\nvar T_ = 48, A_ = 57, d_ = 46, Da = 45, Ma = 43, I_ = 65, N_ = 90, S_ = \"e\".charCodeAt(0), h_ = \"E\".charCodeAt(0), P_ = -1, L_ = 1, Fa = new TextDecoder(yn), R_ = new TextEncoder, k_ = qt.Operators, C_ = (k, S, D = 0, W = k.length | 0, X = 0, ae = S.length | 0)=>{\n    for(X = X | 0, D = D | 0, ae = ae | 0, W = W | 0;;){\n        let Ee = D >= W, be = X >= ae;\n        if (Ee || be) break;\n        let he = k[D], Oe = S[X];\n        if (D = D + 1 | 0, X = X + 1 | 0, he < Oe) return P_;\n        if (he > Oe) return L_;\n    }\n    return 0;\n}, Un = (k, S, D = 0, W = k.length | 0, X = 0, ae = S.length | 0)=>{\n    for(X = X | 0, D = D | 0, ae = ae | 0, W = W | 0;;){\n        let Ee = X >= ae, be = D >= W;\n        if (Ee || be) break;\n        S[X] = k[D], X = X + 1 | 0, D = D + 1 | 0;\n    }\n}, Bs = (k, S, D = 0, W = k.length | 0, X = 0, ae = S.length | 0)=>{\n    D = D | 0, X = X | 0, W = W | 0, ae = ae | 0;\n    let Ee = W - D | 0, be = ae - X | 0;\n    if (Ee !== be) return !1;\n    for(;;){\n        let ve = D >= W, he = X >= ae;\n        if (ve || he) break;\n        let Le = k[D], Re = S[X];\n        if (D = D + 1 | 0, X = X + 1 | 0, Le !== Re) return !1;\n    }\n    return !0;\n}, v_ = (k)=>{\n    k = k >>> 0;\n    let S = 0, D = 0;\n    for(; D = (D << 1 | 1) >>> 0, !(D > k);)S = S + 1 | 0;\n    return S;\n}, wa = Object.freeze([\n    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    97,\n    98,\n    99,\n    100,\n    101,\n    102\n]), vn = (k, S, D, W)=>{\n    for(k = k >>> 0, W = W ?? S.length | 0, D = D | 0, W = W | 0; k > 0 && W > D;)W = W - 1 | 0, S[W] = wa[k & 15], k = k >>> 4;\n}, Ds = (k, S, D, W)=>{\n    let X = D | 0, ae = D + W | 0;\n    if (W === 0) return !1;\n    let Ee = !1, be = !1, ve = !1, he = (Oe)=>Oe === Ma || Oe === Da;\n    for(; X < ae;){\n        let Oe = S[X];\n        X = X + 1 | 0;\n        let Le = T_ <= Oe && Oe <= A_, Re = Ma === Oe || Oe === Da, Ze = d_ === Oe, Rt = Y_ === Oe, ye = Oe === S_ || Oe === h_;\n        if (Le) {\n            ve = !0;\n            continue;\n        } else if (Re) {\n            if ((X === D + 1 || Ee && !be) && !ve) continue;\n        } else if ((Rt || Ze) && !Ee && !be || ye && !Ee) ye && (Ee = !0, X < ae && he(S[X]) && (X = X + 1 | 0, be = !0));\n        else return !1;\n    }\n    return ve && (!Ee || Ee && be);\n}, y_ = {\n    I8: [\n        ...Es\n    ],\n    U8: [\n        ...Qt\n    ],\n    I16: [\n        ...Es\n    ],\n    U16: [\n        ...Qt\n    ],\n    I32: [\n        ...Es\n    ],\n    U32: [\n        ...Qt\n    ],\n    I64: [\n        ...Rn\n    ],\n    U64: [\n        ...Qt\n    ],\n    FP32: _s,\n    FP64: _s\n}, Ms = (k, S)=>!_s.includes(k) || !_s.includes(S) ? !1 : y_[k].includes(S), Bn = (k)=>{\n    let S = k >= I_, D = k <= N_;\n    return S && D;\n}, Fs = 128, js = 127, ga = -1, xt = 64, Dn = (k)=>{\n    k = k | 0;\n    let S = [];\n    for(;;){\n        let D = k & js;\n        k = k >> 7;\n        let W = k === 0, X = (D & xt) === 0, ae = W && X, Ee = k === -1, be = (D & xt) !== 0;\n        if (ae || Ee && be) {\n            S.push(D);\n            break;\n        }\n        D = D | Fs, S.push(D);\n    }\n    return S;\n}, U_ = (k)=>{\n    let S = [], D = !0;\n    for(; D;){\n        let W = k & js;\n        k >>= 7, k === 0 && !(W & xt) || k === -1 && W & xt ? D = !1 : W |= Fs, S.push(W);\n    }\n    return S;\n}, Va = (k, S)=>{\n    S = S | 0;\n    let D = 0, W = 0;\n    for(;;){\n        let X = k[S] | 0;\n        S = S + 1 | 0;\n        let ae = (X & js) << W;\n        if (W = W + 7 | 0, D = D | ae, (X & Fs) === 0) {\n            let be = (X & xt) !== 0, ve = W < 32;\n            if (be && ve) {\n                let Oe = ga << W;\n                D = D | Oe;\n            }\n            break;\n        }\n    }\n    return D;\n}, B_ = (k, S)=>{\n    S = S | 0;\n    let D = 0, W = 0;\n    for(;;){\n        let X = k[S] | 0;\n        S = S + 1 | 0;\n        let ae = (X & js) << W;\n        if (W = W + 7 | 0, D = D | ae, !(X & Fs)) {\n            if (X & xt) {\n                let Ee = ga << W;\n                D = D | Ee;\n            }\n            break;\n        }\n    }\n    return D;\n}, f = (k)=>{\n    try {\n        return Fa.decode(k);\n    } catch  {\n        return Fa.decode(new Uint8Array([\n            k\n        ]));\n    }\n}, fe = (k)=>R_.encode(k), D_ = (k = O_)=>{\n    let S = k.length | 0, D = Dn(S), W = Buffer.from(k, yn);\n    return Object.freeze([\n        ...D,\n        ...W\n    ]);\n}, M_ = (k, S)=>{\n    S = S | 0;\n    let D = Va(k, S), W = Dn(D).length;\n    return S = S + W | 0, k.subarray(S, S + D | 0).toString(yn);\n}, F_ = 58, j_ = 46, Y_ = 95, ps = 32, kn = 48, w_ = 67, gt = new Uint8Array(w_), ja = gt.subarray(0, 8), Us = gt.subarray(10, 49), Ya = gt.subarray(51, 68), Cn = 16, g_ = 2;\ngt[8] = F_;\ngt[9] = ps;\ngt[49] = ps;\ngt[50] = ps;\nvar V_ = (k, S)=>{\n    S = S ?? console.log;\n    let D = 32, W = 126, X = k.length | 0, ae = 0;\n    for(; X > 0;){\n        ja.fill(kn), vn(ae, ja), Us.fill(ps), Ya.fill(ps);\n        let Ee = X >= Cn ? Cn : X;\n        X = X - Cn | 0;\n        let be = 0, ve = 0;\n        for(let Oe = 1; Oe <= Ee; Oe = Oe + 1 | 0){\n            let Le = k[ae] & 255;\n            Us[be + 0 | 0] = kn, Us[be + 1 | 0] = kn, vn(Le, Us, be, be + 2 | 0);\n            let Re = j_;\n            D <= Le && Le <= W && (Re = Le), Ya[ve] = Re, ae = ae + 1 | 0, be = be + 2 | 0, ve = ve + 1 | 0, Oe % g_ === 0 && (be = be + 1 | 0);\n        }\n        let he = String.fromCodePoint(...gt);\n        S(he);\n    }\n}, G_ = function*(k, S) {\n    let D = k.length | 0, W = S.length | 0, X = 0;\n    for(; X < D && X < W;){\n        let ae = k[X], Ee = S[X];\n        yield [\n            ae,\n            Ee\n        ], X = X + 1 | 0;\n    }\n}, $_ = function*(k, S, D) {\n    let W = k.length | 0, X = S.length | 0, ae = D.length | 0, Ee = 0;\n    for(; Ee < W && Ee < X && Ee < ae;){\n        let be = k[Ee], ve = S[Ee], he = D[Ee];\n        yield [\n            be,\n            ve,\n            he\n        ], Ee = Ee + 1 | 0;\n    }\n}, Mn = (k)=>{\n    for (let S of k_)if (Bs(k, S)) return !0;\n    return !1;\n}, dm = Object.freeze({\n    ARRAY_COMPARE: C_,\n    ARRAY_COPY: Un,\n    ARRAY_EQUAL: Bs,\n    BIT_DEPTH: v_,\n    HEX_DIGITS: wa,\n    HEX_ENCODE: vn,\n    IS_NUMBER: Ds,\n    IS_UPPERCASE: Bn,\n    IS_VALID_AUTO_CAST: Ms,\n    LEB128_DECODE: Va,\n    LEB128_DECODE_SIGNED: B_,\n    LEB128_ENCODE: Dn,\n    LEB128_ENCODE_SIGNED: U_,\n    UTF8_DECODE: f,\n    UTF8_ENCODE: fe,\n    WASM_STRING_ENCODE: D_,\n    WASM_STRING_DECODE: M_,\n    XXD_DUMP_HEX: V_,\n    ZIP2: G_,\n    ZIP3: $_,\n    IS_OPERATOR: Mn\n});\nvar { TYPES_ASSIGN: yt, TYPES_ARITY_MATCH: Fn, TYPES_ARITY_STATUS: Ga, TYPES_ARRAY: Fe, TYPES_ARRAY_ASSIGNMENT: $a, TYPES_BRANCH_MATCH: ms, TYPES_BRANCH_DEFAULT: bs, TYPES_CONDITION: jn, TYPES_LOOP: Ka, TYPES_DATA: Ce, TYPES_GENERICS: Ut, TYPES_ENUMERATION: Bt, TYPES_EXPRESSION: $t, TYPES_IMPORT: K_, TYPES_LIBRARY: H_, TYPES_LINK: Yn, TYPES_LOCAL: xe, TYPES_OBJECT: Me, TYPES_PROCEDURE: lt, TYPES_RETURN: pt, TYPES_SELECT: dt, TYPES_MEMBER: Dt, TYPES_NATIVE: z_, TYPES_STORE: wn, TYPES_BREAK: X_, TYPES_LITERAL: Ie, TYPES_ARRAY_ACCESS: Ys, TYPES_LINK_TO: Mt, TYPES_VALUE_AT: It, TYPES_SELF: ft, TYPES_DROP: Ha, TYPES_MAYBE: ws, TYPES_MOVE: gn, TYPES_STRING: tt, TYPES_CONSTRUCTOR: gs, TYPES_DESTRUCTOR: za, TYPES_SIZE: Vn, TYPES_FREE: W_, TYPES_DRAW: J_, TYPES_NOW: Vs, TYPES_CONCAT: es, TYPES_FOREACH: Xa, TYPES_WHILE: Wa, TYPES_WHEN: Ja, TYPES_FOR: Za, TYPES_UP_TO: na, TYPES_DOWN_TO: oa, TYPES_ALMOST_UP_TO: aa, TYPES_ALMOST_DOWN_TO: ra, TYPES_I32: Je, TYPES_U32: Z_, TYPES_FP32: _l, TYPES_FP64: ca, TYPES_I64: ks, TYPES_U64: q_, TYPES_I16: Q_, TYPES_U16: x_, TYPES_I8: ep, TYPES_U8: tp, TYPES_CHAR: Os, TYPES_BOOL: Kt, TYPES_UNREACHABLE: ts } = Ua, { ARRAY_DEFAULT_CAPACITY: sp } = qt.Sizes, Z = Bs, Gs = fe(\"=\"), np = fe(\"enum\"), op = fe(\"loop\"), ap = fe(\"break\"), rp = fe(\"if\"), $s = fe(\"else\"), Ts = fe(\"is\"), Ks = fe(\"->\"), ss = fe(`\n`), Gn = fe(\"object\"), Ht = fe(\"pass\"), qa = fe(\"fn\"), cp = fe(\"return\"), Qa = fe(\"size\"), xa = fe(\"at\"), er = fe(Fe), zt = fe(\"Link!!\"), ns = fe(\"Link\"), Hs = fe(\"LinkSmart\"), Xt = fe(\"mut\"), tr = fe(\"self\"), sr = fe(\"nocopy\"), up = fe(\"move\"), nr = fe(\"size\"), ip = fe(\"import\"), lp = fe(\"export\"), $n = fe(\"Maybe\"), Kn = fe(\"NONE\"), or = fe(\"SOME\"), ar = fe(\"free\"), fp = fe(\"free!!\"), Ep = fe(\"foreach\"), _p = fe(\"for\"), pp = fe(\"while\"), rr = fe(\"in\"), mp = fe(\"at\"), cr = fe(\"by\"), ur = fe(\"capacity\"), bp = fe(\"when\"), ce = 58, et = 61, Be = 44, st = 46, $e = 123, pe = 40, ee = 10, Op = 35, ze = 125, le = 41, He = 91, Ft = 93, On = 39, ls = 34, ua = 8216, ia = 8217, pl = [\n    226,\n    128,\n    156\n], ml = 8221, Tp = 64, Hn = 47, Ap = 92, dp = [\n    On,\n    ls,\n    ua,\n    ia,\n    pl,\n    ml\n], zn = [\n    On,\n    ua\n], Xn = [\n    On,\n    ia\n], Ip = [\n    On,\n    ua,\n    ia\n], Wn = [\n    ls,\n    pl\n], Jn = [\n    ls,\n    ml\n], Zn = 1, ir = 2, qn = 3, is = \"done\", we = \"fail\", Np = {\n    EVENT_DONE: is,\n    EVENT_FAIL: we\n}, bl = 1, Ol = 2, Tl = 3, Al = 4, dl = 5, Il = 6, Nl = 7, Sl = 8, hl = 9, Pl = 10, Ll = 11, Rl = 12, Sp = 13, hp = 14, kl = 15, Cl = 16, Pp = 17, vl = 18, yl = 19, Ul = 99, Xe = {\n    FAIL_UNRESOLVED_NAME: (k, S)=>`NameError: '${k}' is undefined on line ${S}. Verify the spelling and scope of your variables to ensure '${k}' is declared in the accessible scope.`,\n    FAIL_UNEXPECTED_TOKEN: (k, S, D, W)=>`Unexpected token '${S}' at position ${D} on line ${W}. Looking for ${k}, found ${S}. Please check the syntax.`,\n    FAIL_INDENTATION_MISMATCH: (k)=>`IndentationError: Unexpected indentation on line ${k}. Ensure this line's indentation matches the surrounding code block's expected indentation level.`,\n    FAIL_INDENTATION_NO_INCREASE: (k)=>`IndentationError: Line ${k} expects increased indentation. This typically occurs after block-defining statements (e.g., functions, loops, conditionals) but no indentation was detected. Ensure the subsequent line is properly indented.`,\n    FAIL_DUPLICATE_DATA: (k, S)=>`NameError: Variable '${k}' already defined on line ${S}. Choose a unique name for each variable to avoid conflicts.`,\n    FAIL_DUPLICATE_OBJECT_MEMBER: (k, S)=>`Error: Duplicate member '${k}' found in '${S}'. Ensure each member name within an object is unique.`,\n    FAIL_INVALID_IDENTIFIER: (k)=>`SyntaxError: '${k}' is an invalid identifier. Identifiers should start with a letter or underscore and can contain letters, numbers, and underscores. Examples: myVariable, _count, item1.`,\n    FAIL_RETURN_LENGTH_MISMATCH: (k, S, D)=>`ReturnValueError: Function '${D}' expected ${k} return value(s), got ${S} instead. Verify that the return statement matches the expected number of values.`,\n    FAIL_UNRESOLVED_OBJECT_MEMBER: (k, S)=>`ReferenceError: '${k}' is not a member of '${S}'. Verify that '${k}' exists and is correctly spelled in '${S}'. Check for typos or ensure the member is defined within the object.`,\n    FAIL_UNKNOWN_PROCEDURE_NAME: (k)=>`UndefinedProcedureError: '${k}' is undefined. Ensure the procedure is defined in the scope before it is called.`,\n    FAIL_IMMUTABLE_ASSIGNMENT: (k)=>`ImmutableVariableError: Cannot assign to '${k}', which is immutable. Verify that mutable variables are used for reassignments.`,\n    FAIL_RESERVED_KEYWORD_USAGE: (k)=>`SyntaxError: '${k}' is a reserved keyword and cannot be used as an identifier. Please select an alternative name.`,\n    FAIL_INPUT_TYPE_MISMATCH: (k, S)=>`TypeError: Line ${k} - Type mismatch in parameters. Nature functions require all parameters to have the same type. Provided types: ${S}.`,\n    FAIL_UNSUPPORTED_TYPE: (k)=>`TypeError: Unsupported type '${k}'. Ensure '${k}' is defined in this context or use a type native to Flogram. Check documentation for supported types.`,\n    FAIL_UNALLOWED_COPY: (k)=>`CopyError: '${k}' is uncopyable. Copy operations are prohibited for objects defined as uncopyable. Please check your object's definition.`,\n    FAIL_ASSIGNMENT_TYPE_MISMATCH: (k, S)=>`TypeError: Incompatible types. Cannot assign '${S}' to '${k}'. Ensure that the assigned value matches the expected type.`,\n    FAIL_INVALID_VARIABLE_TYPE: (k, S, D)=>`TypeError: Variable '${k}' is of type '${D}', but expected type '${S}'. Ensure the variable is assigned a value of the correct type.`,\n    FAIL_INVALID_EXPRESSION_TYPE_COMBINATION: (k, S)=>`TypeError: Unable to find expression matching: ${k} for ${S}`,\n    FAIL_INVALID_INPUT_LENGTH: (k, S, D)=>`Procedure '${D}' was provided with invalid number 0f inputs. '${D}' expects ${k} input(s) but was rather provided with ${S} input(s). Please make sure you are passing the right number of inputs to the procedure.`\n}, Lp = Object.freeze({\n    FAIL_UNRESOLVED_NAME: bl,\n    FAIL_UNEXPECTED_TOKEN: Ol,\n    FAIL_INDENTATION_MISMATCH: Tl,\n    FAIL_INDENTATION_NO_INCREASE: Al,\n    FAIL_DUPLICATE_DATA: dl,\n    FAIL_DUPLICATE_OBJECT_MEMBER: Il,\n    FAIL_INVALID_IDENTIFIER: Nl,\n    FAIL_RETURN_LENGTH_MISMATCH: Sl,\n    FAIL_UNRESOLVED_OBJECT_MEMBER: hl,\n    FAIL_UNKNOWN_PROCEDURE_NAME: Pl,\n    FAIL_IMMUTABLE_ASSIGNMENT: Ll,\n    FAIL_RESERVED_KEYWORD_USAGE: Rl,\n    FAIL_ASSIGNMENT_TYPE_MISMATCH: Cl,\n    FAIL_INVALID_VARIABLE_TYPE: Pp,\n    FAIL_UNALLOWED_COPY: kl,\n    FAIL_INVALID_EXPRESSION_TYPE_COMBINATION: vl,\n    FAIL_INVALID_INPUT_LENGTH: yl,\n    FAIL_CUSTOM: Ul\n}), Rp = new Set([\n    \"fn\",\n    \"object\",\n    \"pass\",\n    \"enum\",\n    \"size\"\n]), lr = new Set([\n    \"==\",\n    \"!=\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"not\",\n    \"and\",\n    \"or\"\n]), fr = [\n    na,\n    oa,\n    aa,\n    ra\n], zs = [\n    Je,\n    Z_,\n    _l,\n    ca,\n    ks,\n    q_,\n    Q_,\n    x_,\n    ep,\n    tp\n], rt = (k, S, D, W)=>{\n    if (W === 1) {\n        let ye = S[D], Nt = ye & 191, ut = ye & 223, kt = ut ^ 93, ue = ut ^ 91, jt = ye & 254, V = ye & 254 ^ 40, M = ye & 253 ^ 44, q = ye & 254 ^ 58;\n        return Nt === 0 || kt === 0 || ue === 0 || V === 0 || M === 0 || q === 0 || ye === ee;\n    }\n    return !1;\n}, Qn = (k, S, D, W)=>{\n    let X = S.subarray(D, D + W | 0), ae = f(X);\n    return Rp.has(ae) || ht.includes(ae);\n}, kp = 512, la = 1, Bl = 2, Tn = 3, fa = 4, Dl = 5, Ml = 6, Fl = 7, jl = 8, Yl = 9, Cp = 10, vp = 11, yp = 12, Up = 13, Bp = 14, Dp = 15, Mp = 16, Fp = 17, jp = 18, nt = Object.freeze([\n    la\n]), os = Object.freeze([\n    Bl\n]), Pt = Object.freeze([\n    Tn\n]), Er = Object.freeze([\n    Tn,\n    fa\n]), _r = Object.freeze([\n    Dl\n]), Yp = Object.freeze([\n    la,\n    Ml\n]), wp = Object.freeze([\n    Fl\n]), We = Object.freeze([\n    fa,\n    jl\n]), ot = Object.freeze([\n    Yl\n]), pr = Object.freeze([\n    Cp\n]), As = Object.freeze([\n    vp\n]), gp = Object.freeze([\n    Tn,\n    Yl\n]), ds = Object.freeze([\n    yp\n]), as = Object.freeze([\n    Up\n]), xn = Object.freeze([\n    Bp\n]), mr = Object.freeze([\n    Dp\n]), br = Object.freeze([\n    Mp\n]), eo = Object.freeze([\n    Fp\n]), Is = Object.freeze([\n    jp\n]), Vp = Object.freeze({\n    REASON_COLON_OPENS_SCOPE: la,\n    REASON_LINE_BREAK_BEFORE_OPEN_SCOPE: Bl,\n    REASON_CLOSING_LINE_BREAK: Tn,\n    REASON_SEQUENCE_SEPARATOR_COMMA: fa,\n    REASON_INTO_BETWEEN_INPUTS_OUTPUTS: Dl,\n    REASON_IS_OPENS_CONDITION_BRANCH_MATCH: Ml,\n    REASON_OPEN_STATEMENT_WITH_KEYWORD: Fl,\n    REASON_RIGHT_PARENTHESIS_CLOSES_LIST: jl\n}), Ne = 1, Or = 2, Ns = 3, Tr = 4, to = 5, Ar = 6, Ye = 7, mt = 8, ge = 9, Ss = 10, rs = 11, dr = 12, Ir = 13, hs = 1, Nr = 2, Se = 3, so = 4, Sr = 5, hr = 6, Pr = 7, Lr = 1, Rr = 2, kr = 3, Cr = 4, vr = 5, no = 6, yr = 7, Ur = 8, Br = 9, oo = 10, Dr = 11, Mr = 12, ao = 13, ro = 14, Ps = 1, Fr = 2, Xs = 3, jr = 4, co = 5, Yr = 6, wr = 7, Ls = 1, gr = 2, Ws = 3, Vr = 4, Gr = 6, $r = 1, Kr = 2, Hr = 3, zr = 4, Xr = 5, Wr = 6, uo = 7, Jr = 8, Zr = 9, Js = 10, qr = 11, Qr = 12, xr = 13, ec = 14, tc = 15, sc = 16, nc = 17, oc = 1, ac = 2, rc = 1, cc = 2, Gp = 3;\nvar uc = 7, io = 8, ic = 9, Zs = 1, qs = 2, Qs = 3, xs = 4, cs = 5, en = 6, tn = 7, us = 8, sn = 9, nn = 10, on = 11, Lt = 1, lc = 2, fc = 3, lo = 4, Ec = 5, _c = 6, pc = 7, fo = 8, mc = 9, bc = 10, Oc = 11, Tc = 12, Ac = 13, Eo = 14, _o = 15, dc = 16, Ic = 17, Nc = 18, Sc = 19, hc = 20, Pc = 21, po = 22, Lc = 23, mo = 24, bo = 25, Rc = 26, kc = 27, Oo = 28, Cc = 29, vc = 30, Rs = 31, an = 32, yc = 33, To = 34, Uc = 35, Bc = 36, Dc = 37, Mc = 38, Fc = 39, jc = 40, Yc = 41, Ao = 42, wc = 43, gc = 44, Vc = 45, Gc = 46, Io = 47, $c = 48, Kc = 49, No = 50, So = 51, Hc = 52, zc = 53, Xc = 54, Wc = 55, Jc = 56, Zc = 57, qc = 58, Qc = 59, xc = 60, eu = 61, tu = 62, su = 63, nu = 64, ho = 65, ou = 66, au = 67, ru = 68, Po = 69, cu = 70, uu = 71, iu = 72, lu = 73, fu = 74, Eu = 75, _u = 76, pu = 77, mu = 78, Lo = 79, bu = 80, Ou = 81, Tu = 82, Au = 83, Ro = 84, du = 85, Iu = 86, Nu = 87, Su = 88, hu = 89, Pu = 90, Lu = 91, Ru = 92, ku = 93, Cu = 94, ko = 95, vu = 96, Co = 97, yu = 98, Uu = 99, Bu = 100, ct = 1, Du = 2, Mu = 3, Fu = 4, vo = 5, ju = 6, rn = 1, Yu = 2, wu = 3, gu = 4, yo = 5, Et = 6, Vu = 7, Uo = 8, cn = 9, un = 10, ln = 11, Gu = 12, $u = 13, Bo = 14, Do = 15, Mo = 16, Ku = 17, Hu = 18, zu = 19, Fo = 20, jo = 21, Xu = 22, Yo = 23, Wu = 24, Ju = 25, Zu = 26, wo = 27, qu = 28, Qu = 29, go = 30, Vo = 31, Go = 32, xu = 33, $o = 34, ei = 35, ti = 36, si = 37, Ko = 38, Ho = 39, ni = 40, oi = 41, ai = 42, ri = 43, ci = 44, zo = 45, Xo = 46, ui = 47, fn = 48, ii = 49, li = 50, fi = 51, Ei = 52, _i = 53, pi = 54, mi = 55, bi = 56, Oi = 57, Ti = 58, Ai = 59, di = 60, Ii = 61, Ni = 62, Si = 63, Wo = 64, hi = 65, Jo = 66, Pi = 67, En = 68, Zo = 69, qo = 70, Li = 71, Ri = 72, ki = 73, Ci = 74, vi = 75, yi = 76, Ui = 77, Bi = 78, Di = 79, Mi = 80, Fi = 81, ji = 82, $p = 83, Yi = 84, Qo = 85, wi = 86, gi = 87, xo = 88, Vi = 89, Gi = 90, $i = 91, Ki = 92, Hi = 93, zi = 94, Xi = 95, Wi = 96, Ji = 97, ea = 98, Zi = 99, ta = 100, qi = 101, Qi = 102, xi = 103, el = 1;\nvar tl = 3;\nvar sl = 11, _n = 12, nl = 13, ol = 14, Kp = 15, al = 16, pn = 17, rl = 18, cl = 19, ul = 20, il = 21, { K_FLOGRAM: me } = qt.Keywords, Hp = \"0\", mn = \"any\", sa = \"data\", ll = \"code\", bn = (k)=>[\n        \"TRUE\",\n        \"FALSE\"\n    ].includes(k), Vt = !1, wl = (k)=>{\n    let S = [], D = [], W = [], X = {\n        name: \"draw\",\n        type: \"procedure\",\n        description: {\n            inputs: [\n                {\n                    name: \"a\",\n                    data: {\n                        type: \"data\",\n                        name: Je,\n                        path: me\n                    }\n                }\n            ],\n            locals: [],\n            outputs: []\n        }\n    }, ae = Object.freeze({\n        data: S,\n        code: D,\n        exports: W\n    });\n    class Ee {\n        constructor(){\n            this.ambiguityArray = new Uint8Array(kp), this.ambiguityQueue = [], this.ambiguityIndex = 0;\n        }\n    }\n    let be = [], ve = ()=>{\n        be.push(new Ee);\n    }, he = ()=>be.pop(), Oe = (c, o, e, l)=>{\n        let t = be[be.length - 1], s = Object.freeze({\n            position: c,\n            length: l\n        });\n        Un(o, t.ambiguityArray, e, e + l | 0, t.ambiguityIndex, t.ambiguityIndex + l | 0), t.ambiguityQueue.push(s), t.ambiguityIndex = t.ambiguityIndex + l | 0;\n    }, Le = ()=>{\n        let c = be[be.length - 1];\n        c.ambiguityIndex = 0;\n        let { ambiguityArray: o, ambiguityQueue: e } = c;\n        for(; e.length > 0;){\n            let l = e.shift(), { length: t, position: s } = l;\n            fs(s, o, c.ambiguityIndex, t), c.ambiguityIndex = c.ambiguityIndex + t | 0;\n        }\n        he();\n    }, Re = (c)=>{\n        !D.some((e)=>{\n            if (e.name === c.name && e.path === c.path && e.description.inputs.length === c.description.inputs.length && e.description.outputs.length === c.description.outputs.length) {\n                let l = c.description.inputs.every((s, n)=>{\n                    let r = e.description.inputs[n];\n                    return s.name === r.name && s.data.name === r.data.name && s.data.path === r.data.path;\n                }), t = c.description.outputs.every((s, n)=>{\n                    let r = e.description.outputs[n];\n                    return s.name === r.name && s.data.name === r.data.name && s.data.path === r.data.path;\n                });\n                return l && t;\n            }\n            return !1;\n        }) && D.push(c);\n    }, Ze = (c, o, e, l)=>{\n        let { description: t } = c, { members: s } = t, n = s.find((i)=>i.name === o[e]), r = S.find((i)=>i.name === n.data.name);\n        return r.type === Me && e < o.length - 1 ? Ze(r, o, e + 1, l) : n;\n    }, Rt = (c)=>{\n        let o = Number(c.replace(\",\", \"\"));\n        return isNaN(o) ? \"\" : c.includes(\".\") ? c.replace(\".\", \"\").length <= 7 ? _l : ca : Number.isInteger(o) ? o >= -Math.pow(2, 31) && o < Math.pow(2, 31) ? Je : o >= -Math.pow(2, 63) && o < Math.pow(2, 63) ? ks : ca : \"\";\n    }, ye = (c)=>{\n        switch(c.type){\n            case dt:\n                return c.value.name;\n            case wn:\n            case It:\n                return ye(c.link);\n            case Mt:\n                return ye(c.value);\n        }\n        return c.name;\n    }, Nt = (c, o)=>{\n        let e = Gt[c];\n        if (e) {\n            let l = e.find((t)=>t.description && Array.isArray(t.description.inputs) ? t.description.inputs.length !== o.length ? !1 : t.description.inputs.every((s, n)=>s.data.name === o[n].data.name) : !1);\n            if (l) return l;\n            b = T | 0, O = position - d | 0, Ct(c);\n            return;\n        } else {\n            b = T | 0, O = position - d | 0, dn(c);\n            return;\n        }\n    }, ut = ()=>{\n        let c = new Date, o = c.getHours().toString().padStart(2, \"0\"), e = c.getMinutes().toString().padStart(2, \"0\"), l = c.getSeconds().toString().padStart(2, \"0\"), t = c.getMilliseconds().toString().padStart(3, \"0\");\n        return `${o}_${e}_${l}_${t}`;\n    }, kt = (c)=>{\n        let o = a.procedure.description.inputs.find((e)=>e.name === c) || a.procedure.description.locals.find((e)=>e.name === c);\n        if (o) {\n            let e = S.find((l)=>l.type === Ut && l.name === o.data.name);\n            if (e) return {\n                data: e\n            };\n        }\n        return o;\n    }, ue = (c, o = !1)=>{\n        let e;\n        switch(c.type){\n            case dt:\n                {\n                    let l = a.stack.get(c.value.name || c.value.link, c.value.value);\n                    if (l) {\n                        let t = S.find((s)=>s.name === l.name);\n                        if (t.type === Bt) {\n                            let n = t.description.labels.find((i)=>i.props.find((E)=>E.name === c.trail[0]));\n                            if (!n) {\n                                b = T | 0, O = position - d | 0, Ot(c.trail[0], t.name);\n                                return;\n                            }\n                            let r = n.props.find((i)=>i.name === c.trail[0]);\n                            r.data?.type === Me && 0 < c.trail.length - 1 ? e = {\n                                data: Ze(r, c.trail, 0 + 1, o)?.data\n                            } : e = r;\n                        } else {\n                            let { description: s } = t, { members: n } = s, r = 0, i = n.find((m)=>m.name === c.trail[r]), E = S.find((m)=>m.name === i.data.name);\n                            if (E.type === Me && r < c.trail.length - 1) e = {\n                                data: Ze(E, c.trail, r + 1, o)?.data\n                            };\n                            else {\n                                if (i.data.freed) {\n                                    b = T | 0, O = position - d | 0, re(`Attempted to use '${c.trail.join(\".\")}', which has been freed. Ensure links are valid before use.`);\n                                    return;\n                                }\n                                if (o) {\n                                    let m = S.indexOf(t), N = JSON.parse(JSON.stringify(t)), R = t.description.members.indexOf(i);\n                                    R >= 0 && (N.description.members[R].data.freed = !0, S.splice(m, 1, N));\n                                }\n                                e = i;\n                            }\n                        }\n                    }\n                    break;\n                }\n            case It:\n                {\n                    e = ue(c.link);\n                    break;\n                }\n            case gn:\n            case Mt:\n                {\n                    e = ue(c.value);\n                    break;\n                }\n            case es:\n                {\n                    e = {\n                        data: {\n                            type: Ce,\n                            name: tt,\n                            path: me\n                        }\n                    };\n                    break;\n                }\n            case Vn:\n                {\n                    e = {\n                        data: {\n                            type: Ce,\n                            name: Je,\n                            path: me\n                        }\n                    };\n                    break;\n                }\n            case Ys:\n                {\n                    let l = ue(c.array).data;\n                    l && (e = {\n                        data: {\n                            ...l,\n                            name: l.name === tt && !l.contains && l.type !== Fe ? Os : l.name\n                        }\n                    });\n                    break;\n                }\n            case Dt:\n                {\n                    let l = z(0), t = q(l, c.trail, !1);\n                    t ? t.data.type === Fe ? e = {\n                        data: t.data\n                    } : e = {\n                        data: S.find((n)=>n.name === t.data.name && n.path === t.data.path)\n                    } : (b = T | 0, O = 0, Ot(c.trail[0], l.name ?? `${ft}(current object in definition)`));\n                    break;\n                }\n            case $t:\n                {\n                    let l = (s)=>D.find((n)=>n.type === lt && n.name === s.name)?.description.outputs[0], t = (s, n)=>{\n                        let r;\n                        for(let i = 0; n && i <= s.name.length - 2; i++)n = a.stack.get(s.name[i]), n && (r = S.find((E)=>E.type === Me && E.name === n.name));\n                        return r?.description.members?.find((i)=>i.name === s.name[s.name.length - 1])?.description.outputs[0];\n                    };\n                    if (c.path !== me) {\n                        if (typeof c.name === Me && c.name[0] === Dt) {\n                            let s = z(0), n = q(s, c.name.slice(1));\n                            n && n.type === lt && n.description.outputs.length > 0 ? e = n.description.outputs[0] : (b = T | 0, O = 0, Ot(c.trail[0], s.name ?? `${ft}(current object in definition)`));\n                            break;\n                        } else if (e = l(c), typeof c.name == \"object\") {\n                            let s = a.stack.get(c.name[0]);\n                            e = t(c, s);\n                            let n = c.name.length;\n                            c.name[n - 1] === gs && (e = {\n                                data: s\n                            });\n                        }\n                    } else if (c.name === Vs) e = {\n                        data: {\n                            type: Ce,\n                            name: ks,\n                            path: me\n                        }\n                    };\n                    else if (lr.has(c.name)) e = {\n                        data: {\n                            type: Ce,\n                            name: Kt,\n                            path: me\n                        }\n                    }, Ue(e.data.name);\n                    else {\n                        let s = c.inputs.map((r)=>ue(r)), n = D.find((r)=>r.description && Array.isArray(r.description.inputs) ? r.description.inputs.length !== s.length || r.name !== c.name || r.path !== c.path ? !1 : r.description.inputs.every((i, E)=>i.data.name === s[E].data.name) : !1);\n                        if (n) {\n                            let { description: r } = n, { outputs: i } = r;\n                            e = i[0];\n                        } else {\n                            b = T | 0, O = 0, ma(s.map((r)=>r.data.name), c.name);\n                            return;\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    e = kt(c.name);\n                    break;\n                }\n        }\n        if (!e) if (Ba.includes(c.name) && c.type === $t) {\n            let l = c.inputs.map((s)=>ue(s)), t = Nt(c.name, l);\n            e = {\n                data: {\n                    name: t.description.outputs[0].data.name,\n                    path: t.description.outputs[0].data.path\n                }\n            };\n        } else c.type === Ie && (e = {\n            data: {\n                type: Ie,\n                name: c.name,\n                literal: c.literal,\n                path: c.path\n            }\n        });\n        return e?.data?.name && Ue(e.data.name), e;\n    }, jt = (c, o, e, l)=>{\n        for(let t in c.description?.members){\n            let s = [\n                c.description.members[t].data.name,\n                ...o.map((n)=>n.description.members[t].data.name)\n            ];\n            if (s.some((n)=>!ht.includes(n))) {\n                let n = s.map((r)=>S.find((i)=>i.name === r));\n                if (n.every(Boolean)) return jt(c, n, e, l);\n            } else {\n                let n = e.find((r)=>r.description && Array.isArray(r.description.inputs) ? r.description.inputs.length !== s.length ? !1 : r.description.inputs.every((i, E)=>i.data.name === s[E]) : !1);\n                return n ? (Re(n), _t.set(l, n), !0) : !1;\n            }\n        }\n    }, Ve = (c)=>{\n        let o = ue(c);\n        return o && c.type !== dt && o.data.path === me && o.data.type !== Fe && o.data.mutable ? Object.seal({\n            type: It,\n            link: c\n        }) : c;\n    }, V = (c, o)=>{\n        let e = JSON.parse(JSON.stringify(c)), l = c.description.generics.map((s)=>s.name);\n        function t(s) {\n            for(let n in s)if (s[n] && typeof s[n] == \"object\") t(s[n]);\n            else if (n === \"name\" && l.includes(s[n])) {\n                let r = l.indexOf(s[n]);\n                s[n] = o[r].name, s.path = o[r].path;\n            } else if (n === \"path\" && s[n].split(\".\").includes(e.name)) {\n                let r = s[n].split(\".\"), i = r.indexOf(e.name), E = B(e.name, o);\n                r[i] = E, s[n] = r.join(\".\");\n            }\n        }\n        t(e);\n        for (let s of D){\n            let { description: n } = s, { inputs: r, outputs: i } = n, E = [\n                ...r,\n                ...i\n            ];\n            if (s.type === \"native\" && E.some((m)=>l.includes(m.data.name))) {\n                let m = JSON.parse(JSON.stringify(s));\n                t(m), Re(m);\n            }\n        }\n        return e;\n    }, B = (c, o)=>{\n        let l = o.map((t)=>`${t.name}${t.segment ? `_${t.segment}` : \"\"}`).join(\"__\");\n        return `${c}___${l}`;\n    }, M = (c)=>c.type === Mt && c.value !== ft || c.type === It && c.link !== ft, z = (c)=>{\n        if (c < g.length) {\n            let o = g[c];\n            return o.item?.object ? o.item.object : z(c + 1);\n        }\n        return !1;\n    }, q = (c, o, e = !0)=>{\n        let l = c.description.members.find((t)=>t.name === o[0]);\n        return l ? o.length === 1 ? l.type === lt || !e ? l : !1 : S.find((t)=>t.name === l.data.name && t.path === l.data.path).type !== Me ? !1 : q(S.find((t)=>t.name === l.data.name && t.path === l.data.path), o.slice(1), e) : !1;\n    }, { path: Te, imports: _e, files: ne, Tokenizer: Ge } = k, bt = new Map, _t = new Map, p = new Map, A = new Map, P = (c, o = \"\")=>{\n        let { name: e, path: l } = c, t = o || e, s = `${l}.${t}`;\n        p.set(s, c);\n        let n = A.get(t) || [];\n        n.push(c), A.set(t, n);\n    }, { data: L } = _e;\n    for (let c of L)P(c);\n    let v = [\n        Te\n    ], C = new fl.default, g = [], K = [], G = [], _ = !1, J = !1, de = !1, Pe = !0, ke = !1, De = !1, U = Ne, u = hs, a = null, Yt = null, Wt = [], Ke = 0, T = 1, d = 0, je = 1, Cs = null, b = 0, O = 0, St = (c, o, e, l)=>{\n        let t = o.subarray(e, e + l | 0), s = f(t);\n        return Qn(c, o, e, l) ? (b = T | 0, O = c - d | 0, An(s), !0) : rt(c, o, e, l) ? (b = T | 0, O = c - d | 0, qe(s), !0) : !1;\n    };\n    C.on(is, (c)=>{\n        for (let o of K)o(c);\n    }), C.on(we, (c)=>{\n        for (let o of G)o(c);\n    });\n    let Jt = (c)=>{\n        let o = Object.freeze({\n            type: dl,\n            message: Xe.FAIL_DUPLICATE_DATA(c, b),\n            failureRow: b,\n            failureColumn: O,\n            name: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, Ea = (c, o)=>{\n        let e = Object.freeze({\n            type: Il,\n            message: Xe.FAIL_DUPLICATE_OBJECT_MEMBER(c, o),\n            failureRow: b,\n            failureColumn: O,\n            property: c,\n            object: o\n        });\n        J = !0, de = !0, C.emit(we, e);\n    }, gl = (c)=>{\n        let o = je, e = wt(c), l = Object.freeze({\n            type: Tl,\n            message: Xe.FAIL_INDENTATION_MISMATCH(b),\n            failureRow: b,\n            failureColumn: O,\n            expected: o,\n            actual: e\n        });\n        J = !0, de = !0, C.emit(we, l);\n    }, _a = (c)=>{\n        let o = Object.freeze({\n            type: Al,\n            message: Xe.FAIL_INDENTATION_NO_INCREASE(b),\n            failureRow: b,\n            failureColumn: O,\n            indentation: je\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, qe = (c)=>{\n        let o = Object.freeze({\n            type: Nl,\n            message: Xe.FAIL_INVALID_IDENTIFIER(c),\n            failureRow: b,\n            failureColumn: O,\n            identifier: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, Vl = (c, o, e)=>{\n        let l = Object.freeze({\n            type: Sl,\n            message: Xe.FAIL_RETURN_LENGTH_MISMATCH(c, o, e),\n            failureRow: b,\n            failureColumn: O\n        });\n        de = !0, J = !0, C.emit(we, l);\n    }, Gl = (c)=>{\n        let o = Object.freeze({\n            type: Ll,\n            message: Xe.FAIL_IMMUTABLE_ASSIGNMENT(c),\n            failureRow: b,\n            failureColumn: O,\n            variable: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, An = (c)=>{\n        let o = Object.freeze({\n            type: Rl,\n            message: Xe.FAIL_RESERVED_KEYWORD_USAGE(c),\n            failureRow: b,\n            failureColumn: O,\n            keyword: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, Y = (c, o, e)=>{\n        let l = Object.freeze({\n            type: Ol,\n            message: Xe.FAIL_UNEXPECTED_TOKEN(c, o, O, b),\n            failureRow: b,\n            failureColumn: O,\n            reasons: e,\n            expected: c,\n            found: o\n        });\n        J = !0, de = !0, C.emit(we, l);\n    }, vs = (c)=>{\n        let o = Object.freeze({\n            type: bl,\n            message: Xe.FAIL_UNRESOLVED_NAME(c, b),\n            failureRow: b,\n            failureColumn: O,\n            name: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, Ot = (c, o)=>{\n        let e = Object.freeze({\n            type: hl,\n            message: Xe.FAIL_UNRESOLVED_OBJECT_MEMBER(c, o),\n            failureRow: b,\n            failureColumn: O,\n            name: c\n        });\n        J = !0, de = !0, C.emit(we, e);\n    }, dn = (c)=>{\n        let o = Object.freeze({\n            type: Pl,\n            message: Xe.FAIL_UNKNOWN_PROCEDURE_NAME(c),\n            failureRow: b,\n            failureColumn: O,\n            name: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, $l = (c)=>{\n        let o = Object.freeze({\n            type: kl,\n            message: Xe.FAIL_UNALLOWED_COPY(c),\n            failureRow: b,\n            failureColumn: O,\n            name: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, pa = (c, o, e)=>{\n        let l = Object.freeze({\n            type: yl,\n            message: Xe.FAIL_INVALID_INPUT_LENGTH(c, o, e),\n            failureRow: b,\n            failureColumn: O,\n            name: e,\n            expectedLength: o,\n            actualLength: c\n        });\n        J = !0, de = !0, C.emit(we, l);\n    }, ma = (c, o)=>{\n        let e = Object.freeze({\n            type: vl,\n            message: Xe.FAIL_INVALID_EXPRESSION_TYPE_COMBINATION(c, o),\n            failureRow: b,\n            failureColumn: O,\n            name: o,\n            types: c\n        });\n        J = !0, de = !0, C.emit(we, e);\n    }, ba = (c, o)=>{\n        let e = Object.freeze({\n            type: Cl,\n            message: Xe.FAIL_ASSIGNMENT_TYPE_MISMATCH(c, o),\n            failureRow: b,\n            failureColumn: O\n        });\n        J = !0, de = !0, C.emit(we, e);\n    }, re = (c)=>{\n        let o = Object.freeze({\n            type: Ul,\n            message: c,\n            failureRow: b,\n            failureColumn: O\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, In = (c)=>{\n        let o = Object.freeze({\n            type: Sp,\n            message: Xe.FAIL_INPUT_TYPE_MISMATCH(b, c),\n            failureRow: b,\n            failureColumn: O,\n            inputs: c\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, Ct = (c)=>{\n        let o = Object.freeze({\n            type: hp,\n            message: Xe.FAIL_UNSUPPORTED_TYPE(c),\n            failureRow: b,\n            failureColumn: O\n        });\n        J = !0, de = !0, C.emit(we, o);\n    }, wt = (c)=>c - d | 0, Nn = (c)=>{\n        let o = je | 0;\n        return wt(c) < o;\n    }, Sn = (c, o)=>{\n        let e = je | 0, l = wt(c);\n        switch(o){\n            case Zn:\n                return l <= e;\n            case ir:\n                return l !== e;\n        }\n        throw qn;\n    }, ys = (c, o = !0)=>{\n        let { name: e, path: l, type: t } = c, s = `${l}.${e}`;\n        if (!bt.has(s)) {\n            let n = S.length;\n            l === me ? n = S.findIndex((r)=>r.path !== me) : t === Ut ? n = S.findIndex((r)=>r.path !== me && r.type !== Ut) : o && (n = S.findIndex((r)=>r.path !== me && r.type !== Ut)), n === -1 || n === S.length ? S.push(c) : S.splice(n, 0, c), bt.set(s, c), p.has(s) || P(c);\n        }\n    }, Ue = (c)=>{\n        let o = A.get(c);\n        if (!o) return null;\n        if (o.length === 1) {\n            let [e] = o;\n            return ys(e), e;\n        }\n        if (o.length > 0 && o[0].type === Ut) {\n            let [e] = o;\n            return ys(e), e;\n        }\n        throw qn;\n    }, Xp = (c, o)=>{\n        let { description: e } = c, { inputs: l, locals: t } = e, { name: s } = o;\n        for (let n of l)if (n.name === s) return n.data;\n        for (let n of t)if (n.name === s) return n.data;\n        return null;\n    }, Kl = (c, o, e, l)=>{\n        switch(u){\n            case hs:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (a && a.export && (je = wt(c), Cs && Cs !== je && (y(), a = null, h(), Cs = null, je = 1), Cs = je), Z(t, ip)) {\n                        h(), U = Ir, u = rc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, lp)) {\n                        h(), je = wt(c), a = Object.freeze({\n                            export: !0,\n                            indentation: je\n                        }), u = hr;\n                        return;\n                    }\n                    if (Z(t, np)) {\n                        h(), U = Or, u = Lr, _ = !0;\n                        return;\n                    }\n                    if (Z(t, Gn) || Z(t, sr)) {\n                        h(), U = Tr, u = $r, _ = !0;\n                        return;\n                    }\n                    if (Z(t, Ht)) {\n                        h(), U = to, u = oc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, qa)) {\n                        h(), U = Ar, u = Zs, _ = !0;\n                        return;\n                    }\n                    if (o[e] === ee) return;\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t);\n                    Y(\"export/import statement, type, or function definition\", s, os);\n                    break;\n                }\n            case hr:\n                {\n                    if (o[e] === ce) {\n                        u = hs, h(), u = Pr;\n                        return;\n                    }\n                    _ = !0, u = hs;\n                    break;\n                }\n            case Pr:\n                {\n                    if (o[e] === ee) {\n                        u = hs;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = os;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case Nr:\n                {\n                    De = !1;\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(t, rp)) {\n                        U = Ye, u = fc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, $s)) {\n                        U = Ye, u = Nc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, op)) {\n                        U = Ye, u = Dc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, Ep)) {\n                        U = Ye, u = eu, _ = !0;\n                        return;\n                    }\n                    if (Z(t, _p)) {\n                        U = Ye, u = fu, _ = !0;\n                        return;\n                    }\n                    if (Z(t, pp)) {\n                        U = Ye, u = cu, _ = !0;\n                        return;\n                    }\n                    if (Z(t, bp)) {\n                        U = Ye, u = Lu, _ = !0;\n                        return;\n                    }\n                    if (Z(t, ap)) {\n                        U = Ye, u = Yc;\n                        return;\n                    }\n                    if (Z(t, xa)) {\n                        U = Ye, u = Rc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, ns) || Z(t, zt) || Z(t, Hs)) {\n                        b = T | 0, O = c - d | 0;\n                        let r = f(t), i = Is;\n                        if (Qn(c, o, e, l)) {\n                            An(r);\n                            return;\n                        }\n                        Y(\"statement declarer\", r, i);\n                        return;\n                    }\n                    if (Z(t, Ht)) {\n                        U = Ye, u = Sc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, cp)) {\n                        U = Ye, u = Pc, _ = !0;\n                        return;\n                    }\n                    if (Z(t, ar) || Z(t, fp)) {\n                        U = Ye, u = Jc, _ = !0;\n                        return;\n                    }\n                    if (!St(c, o, e, l)) {\n                        U = Ye, u = Vc, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = wp;\n                    if (Qn(c, o, e, l)) {\n                        An(s);\n                        return;\n                    }\n                    Y(\"statement declarer\", s, n);\n                    break;\n                }\n            case Se:\n                {\n                    let t = o[e], s = o.subarray(e, e + l | 0), n = f(s);\n                    if (S.find((i)=>i.type === Bt && i.description.labels.find((E)=>E.name === n))) {\n                        U = ge, u = Go, _ = !0;\n                        return;\n                    }\n                    if (Bn(t) && !bn(f(s))) {\n                        if (S.find((m)=>m.name === n && m.type === Me)) {\n                            U = ge, u = $u, _ = !0;\n                            return;\n                        }\n                        if (S.find((m)=>m.type === Bt && m.name === n)) {\n                            U = ge, u = Go, _ = !0;\n                            return;\n                        }\n                    }\n                    if (Z(s, $n)) {\n                        U = ge, u = ei, _ = !0;\n                        return;\n                    }\n                    if (Z(s, tr)) {\n                        U = ge, u = Zu, _ = !0;\n                        return;\n                    }\n                    if (Z(s, xa)) {\n                        U = ge, u = wu, _ = !0;\n                        return;\n                    }\n                    if (Z(s, ns)) {\n                        U = ge, u = rn, _ = !0;\n                        return;\n                    }\n                    if (Z(s, zt)) {\n                        U = ge, u = rn, _ = !0;\n                        return;\n                    }\n                    if (Z(s, Hs)) {\n                        U = ge, u = rn, _ = !0;\n                        return;\n                    }\n                    if (Z(s, er)) {\n                        U = ge, u = qo, _ = !0;\n                        return;\n                    }\n                    if (Z(s, up)) {\n                        U = ge, u = pi, _ = !0;\n                        return;\n                    }\n                    if (Z(s, nr)) {\n                        U = ge, u = Di, _ = !0;\n                        return;\n                    }\n                    if (t === He) {\n                        U = ge, u = jo, _ = !0;\n                        return;\n                    }\n                    if (t === pe) {\n                        U = ge, u = Vi, _ = !0;\n                        return;\n                    }\n                    if (Ds(c, o, e, l) || dp.includes(t) || bn(n)) {\n                        U = ge, u = yo, _ = !0;\n                        return;\n                    }\n                    u = so, ve(), _ = !0;\n                    break;\n                }\n            case so:\n                {\n                    Oe(c, o, e, l), h(), a = o[e], u = Sr;\n                    break;\n                }\n            case Sr:\n                {\n                    Oe(c, o, e, l);\n                    let t = a;\n                    y();\n                    let s = o[e];\n                    if (s === pe) {\n                        U = ge, u = cn, Le();\n                        return;\n                    }\n                    if (s === He) {\n                        U = ge, u = Xu, Le();\n                        return;\n                    }\n                    if (s === $e && !Wn.includes(t)) {\n                        U = ge, u = cn, Le();\n                        return;\n                    }\n                    if (s === st) {\n                        u = so;\n                        return;\n                    }\n                    U = ge, u = yo, Le();\n                    break;\n                }\n        }\n    }, Hl = (c, o, e, l)=>{\n        switch(u){\n            case Lr:\n                {\n                    let t = v.join(\".\"), s = Object.seal({\n                        labels: [],\n                        generics: []\n                    }), n = Object.seal({\n                        type: Bt,\n                        name: it,\n                        path: t,\n                        description: s\n                    });\n                    a = Object.seal({\n                        enumeration: n\n                    }), u = Rr;\n                    break;\n                }\n            case Rr:\n                {\n                    let { enumeration: t } = a, s = o.subarray(e, e + l | 0), n = f(s);\n                    if (St(c, o, e, l)) return;\n                    t.name = n, u = kr;\n                    break;\n                }\n            case kr:\n                {\n                    let t = o[e];\n                    if (t === ce) {\n                        u = Cr;\n                        return;\n                    }\n                    if (t === $e) {\n                        let { enumeration: i } = a, { description: E } = i, { generics: m } = E;\n                        h(), a = m, U = Ss, u = Ls, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(`${f(ce)} or ${f($e)} for generics`, n, r);\n                    break;\n                }\n            case Cr:\n                {\n                    if (o[e] === ee) {\n                        u = vr;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = os;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case vr:\n                {\n                    je = wt(c), u = no, _ = !0;\n                    break;\n                }\n            case no:\n                {\n                    let { enumeration: t } = a;\n                    if (Nn(c)) {\n                        if (ys(t), y(), a && a.export) {\n                            let s = Object.freeze({\n                                name: t.name,\n                                type: t.type,\n                                path: sa\n                            });\n                            W.push(s);\n                            let n = je;\n                            y(), je === n && y(), je < n && h();\n                        }\n                        _ = !0;\n                        return;\n                    }\n                    u = yr, _ = !0;\n                    break;\n                }\n            case yr:\n                {\n                    let { enumeration: t } = a, { description: s } = t, { labels: n } = s, r = o.subarray(e, e + l | 0), i = f(r);\n                    if (St(c, o, e, l)) return;\n                    let E = {\n                        name: i,\n                        props: []\n                    };\n                    n.push(E), u = no, h(), a = {\n                        label: E\n                    }, u = Ur;\n                    break;\n                }\n            case Ur:\n                {\n                    let t = o[e];\n                    if (_ = !0, t === pe) {\n                        u = Br;\n                        return;\n                    }\n                    u = ro;\n                    break;\n                }\n            case Br:\n                {\n                    if (o[e] === pe) {\n                        u = oo;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case oo:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (rt(c, o, e, l)) {\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    let { props: n } = a.label;\n                    h();\n                    let r = Object.seal({\n                        name: s,\n                        data: null\n                    });\n                    n.push(r), a = {\n                        prop: r\n                    }, u = Dr;\n                    break;\n                }\n            case Dr:\n                {\n                    if (o[e] === ce) {\n                        u = Mr, h(), a = Object.seal({\n                            data: null\n                        }), h(), U = mt, u = ct;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case Mr:\n                {\n                    let { data: t } = a;\n                    y();\n                    let { prop: s } = a;\n                    s.data = t, u = ao;\n                    let n = o[e];\n                    if (n === le) {\n                        y(), u = ao, _ = !0;\n                        return;\n                    }\n                    if (n === Be) {\n                        y(), u = oo;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = o.subarray(e, e + l | 0), i = f(r), E = We;\n                    Y(`${f(le)} or ${f(le)}`, i, E);\n                    break;\n                }\n            case ao:\n                {\n                    if (o[e] === le) {\n                        u = ro;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = We;\n                    Y(f(le), n, r);\n                    break;\n                }\n            case ro:\n                {\n                    if (o[e] === ee) {\n                        y();\n                        return;\n                    }\n                    break;\n                }\n        }\n    }, zl = (c, o, e, l)=>{\n        switch(u){\n            case Ls:\n                {\n                    u = gr, _ = !0;\n                    break;\n                }\n            case gr:\n                {\n                    if (o[e] === $e) {\n                        u = Ws;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f($e), n, r);\n                    break;\n                }\n            case Ws:\n                {\n                    let t = o[e];\n                    if (t === ee) return;\n                    if (t === ze) {\n                        y();\n                        return;\n                    }\n                    u = Vr, _ = !0;\n                    break;\n                }\n            case Vr:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (St(c, o, e, l)) return;\n                    h();\n                    let n = Object.seal({\n                        type: Ut,\n                        name: s,\n                        path: Te\n                    });\n                    a = Object.seal({\n                        name: s,\n                        data: n\n                    }), P(a.data, a.name), u = Gr;\n                    break;\n                }\n            case Gr:\n                {\n                    let t = a;\n                    y(), a.push(t);\n                    let n = o[e];\n                    if (n === ze) {\n                        u = Ws, _ = !0;\n                        return;\n                    }\n                    if (n === Be) {\n                        u = Ws;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = o.subarray(e, e + l | 0), i = f(r), E = We;\n                    Y(f(le), i, E);\n                    break;\n                }\n        }\n    }, Xl = (c, o, e, l)=>{\n        switch(u){\n            case Ps:\n                {\n                    u = Fr, _ = !0;\n                    break;\n                }\n            case Fr:\n                {\n                    if (o[e] === pe) {\n                        u = Xs;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case Xs:\n                {\n                    let t = o[e];\n                    if (t === ee) return;\n                    if (t === le) {\n                        y();\n                        return;\n                    }\n                    u = jr, _ = !0;\n                    break;\n                }\n            case jr:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (h(), Z(Xt, t)) {\n                        a = Object.seal({\n                            name: null,\n                            mutable: !0,\n                            data: null\n                        }), u = co;\n                        return;\n                    }\n                    a = Object.seal({\n                        name: null,\n                        data: null\n                    }), u = co, _ = !0;\n                    break;\n                }\n            case co:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (St(c, o, e, l)) return;\n                    a.name = s, u = Yr;\n                    break;\n                }\n            case Yr:\n                {\n                    if (o[e] === ce) {\n                        u = wr, h(), U = mt, u = ct;\n                        return;\n                    }\n                    break;\n                }\n            case wr:\n                {\n                    let t = a;\n                    y();\n                    let s = a, { mutable: n, ...r } = t;\n                    s.push(r);\n                    let i = o[e];\n                    if (i === le) {\n                        u = Xs, _ = !0;\n                        return;\n                    }\n                    if (i === Be) {\n                        u = Xs;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = We;\n                    Y(`${f(le)} or ${f(Be)}`, m, N);\n                    break;\n                }\n        }\n    }, Wl = (c, o, e, l)=>{\n        switch(u){\n            case $r:\n                {\n                    let t = v.join(\".\"), s = Object.seal({\n                        members: [],\n                        generics: []\n                    }), n = Object.seal({\n                        type: Me,\n                        name: it,\n                        copy: !0,\n                        path: t,\n                        description: s\n                    });\n                    a = Object.seal({\n                        mapNameMember: new Map,\n                        object: n\n                    }), Ue(Je), u = Kr, _ = !0;\n                    break;\n                }\n            case Kr:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (u = Hr, Z(t, sr)) {\n                        a.object.copy = !1;\n                        return;\n                    }\n                    _ = !0;\n                    break;\n                }\n            case Hr:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(t, Gn)) {\n                        u = zr;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = nt;\n                    Y(f(Gn), s, n);\n                    break;\n                }\n            case zr:\n                {\n                    let { object: t } = a, s = o.subarray(e, e + l | 0), n = f(s);\n                    if (St(c, o, e, l)) return;\n                    let r = Ue(n);\n                    if (r && v.join(\".\") === r.path && (b = T | 0, O = c - d | 0, Jt(n)), Z(s, Xt)) {\n                        b = T | 0, O = c - d | 0, failReservedKeyword(n);\n                        return;\n                    }\n                    t.name = n, ys(t, !1), u = Xr;\n                    break;\n                }\n            case Xr:\n                {\n                    if (o[e] === $e) u = Wr, _ = !0;\n                    else if (o[e] === ce) u = uo, _ = !0;\n                    else {\n                        let t = o.subarray(e, e + l | 0), s = f(t);\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    break;\n                }\n            case Wr:\n                {\n                    let { object: t } = a, { description: s } = t, { generics: n } = s;\n                    u = uo, h(), a = n, U = Ss, u = Ls, _ = !0;\n                    break;\n                }\n            case uo:\n                {\n                    if (o[e] === ce) {\n                        u = Jr;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case Jr:\n                {\n                    if (o[e] === ee) {\n                        u = Zr;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = os;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case Zr:\n                {\n                    if (Sn(c, Zn)) {\n                        let t = g.length;\n                        if (g.length < 1 || g[t - 1].item.indentation >= je) {\n                            b = T | 0, O = c - d | 0, _a(c);\n                            return;\n                        }\n                    }\n                    je = wt(c), u = Js, _ = !0;\n                    break;\n                }\n            case Js:\n                {\n                    let { object: t } = a;\n                    if (Nn(c)) {\n                        if (y(), a && a.export) {\n                            let s = Object.freeze({\n                                name: t.name,\n                                type: t.type,\n                                path: sa\n                            });\n                            W.push(s);\n                            let n = je;\n                            y(), je === n && y(), je < n && h();\n                        }\n                        _ = !0;\n                        return;\n                    }\n                    if (Sn(c, ir)) {\n                        b = T | 0, O = c - d | 0, gl(c);\n                        return;\n                    }\n                    u = qr, _ = !0;\n                    break;\n                }\n            case qr:\n                {\n                    let { object: t, mapNameMember: s } = a, { description: n } = t, { members: r } = n, i = o.subarray(e, e + l | 0), E = f(i);\n                    if (u = Qr, Z(i, Xt)) {\n                        h(), a = Object.freeze({\n                            mutable: !0\n                        });\n                        return;\n                    }\n                    _ = !0;\n                    break;\n                }\n            case Qr:\n                {\n                    let t;\n                    a.mutable && (t = a.mutable, y());\n                    let { object: s, mapNameMember: n } = a, { description: r } = s, { members: i } = r, E = o.subarray(e, e + l | 0), m = f(E);\n                    if (Z(qa, E)) {\n                        u = Js, h(), U = dr, u = Zs, _ = !0;\n                        return;\n                    }\n                    if (St(c, o, e, l)) return;\n                    n.has(m) && (b = T | 0, O = c - d | 0, Ea(m, s.name));\n                    let N = {\n                        name: m,\n                        data: null\n                    };\n                    t && (N.mutable = t), i.push(N), n.set(m, N), u = Js, h(), a = Object.seal({\n                        member: N\n                    }), u = xr;\n                    break;\n                }\n            case xr:\n                {\n                    if (o[e] === ce) {\n                        u = ec;\n                        return;\n                    }\n                    break;\n                }\n            case ec:\n                {\n                    u = nc, h(), a = Object.seal({\n                        data: null\n                    }), h(), U = mt, u = ct, _ = !0;\n                    break;\n                }\n            case nc:\n                {\n                    let t = o[e], { data: s } = a;\n                    y();\n                    let { member: n } = a;\n                    if (n.data = s, n.mutable && (n.data = {\n                        ...s,\n                        mutable: n.mutable\n                    }), t === ee) {\n                        y();\n                        return;\n                    }\n                    if (t === et) {\n                        u = tc;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = o.subarray(e, e + l | 0), i = f(r), E = Pt;\n                    Y(`${f(ee)} or ${f(et)}`, i, E);\n                    break;\n                }\n            case tc:\n                {\n                    let { stack: t } = a;\n                    u = sc, h(), a = {\n                        stack: new Map,\n                        procedure: null,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case sc:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { member: s } = a;\n                    s.value = t, y();\n                    break;\n                }\n        }\n    }, Jl = (c, o, e, l)=>{\n        switch(u){\n            case Zs:\n                {\n                    let { mapNameMember: t, object: s } = a, { name: n } = s, r = new Map(t), i = `${v.join(\".\")}.${n}`, E = Object.seal({\n                        generics: [],\n                        inputs: [],\n                        locals: [],\n                        outputs: [],\n                        statements: []\n                    }), m = Object.seal({\n                        type: lt,\n                        name: it,\n                        path: i,\n                        description: E\n                    });\n                    a = Object.seal({\n                        procedure: m,\n                        stack: r\n                    }), u = qs;\n                    break;\n                }\n            case qs:\n                {\n                    let { procedure: t } = a, s = o.subarray(e, e + l | 0), n = f(s);\n                    if (St(c, o, e, l)) return;\n                    if (Z(s, Xt)) {\n                        b = T | 0, O = c - d | 0, failReservedKeyword(n);\n                        return;\n                    }\n                    t.name = n, u = Qs;\n                    break;\n                }\n            case Qs:\n                {\n                    if (o[e] === $e) u = xs, _ = !0;\n                    else if (o[e] === pe) u = cs, _ = !0;\n                    else {\n                        let t = o.subarray(e, e + l | 0), s = f(t);\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    break;\n                }\n            case xs:\n                {\n                    let { procedure: t } = a, { description: s } = t, { generics: n } = s;\n                    u = cs, h(), a = n, U = Ss, u = Ls, _ = !0;\n                    break;\n                }\n            case cs:\n                {\n                    let { procedure: t } = a, { description: s } = t, { inputs: n } = s;\n                    u = en, h(), a = n, U = Ns, u = Ps, _ = !0;\n                    break;\n                }\n            case en:\n                {\n                    let { procedure: t, stack: s } = a, { description: n } = t, { inputs: r } = n;\n                    for (let R of r){\n                        let { name: F, data: w } = R;\n                        s.set(F, w);\n                    }\n                    r.length > 0 && a.procedure.name === za && (b = T | 0, O = c - d | 0, re(\"Destructors should not return any values. Your destructor appears to return a number. Please adhere to Flogram's conventions and correct your code.\"));\n                    let i = o.subarray(e, e + l | 0), E = o[e];\n                    if (Z(i, Ks)) {\n                        u = tn;\n                        return;\n                    }\n                    if (E === ce) {\n                        u = us, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let m = f(i), N = _r;\n                    Y(`${f(Ks)} or ${f(ce)}`, m, N);\n                    break;\n                }\n            case tn:\n                {\n                    let { procedure: t } = a, { description: s } = t, { outputs: n } = s;\n                    u = us, h(), a = n, U = Ns, u = Ps, _ = !0;\n                    break;\n                }\n            case us:\n                {\n                    let t = o[e], { outputs: s } = a.procedure.description;\n                    if (s.length > 0 && a.procedure.name === gs && (b = T | 0, O = c - d | 0, re(`Constructors in Flogram should not return any values. Your constructor seems to return ${s.length} outputs. Please correct your code according to Flogram rules.`)), s.length > 0 && a.procedure.name === za && (b = T | 0, O = c - d | 0, re(`Destructors in Flogram should not return any values. Your destructor seems to return ${s.length} outputs. Please correct your code according to Flogram rules.`)), t === ce) {\n                        u = sn;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = o.subarray(e, e + l | 0), r = f(n), i = nt;\n                    Y(f(ce), r, i);\n                    break;\n                }\n            case sn:\n                {\n                    if (o[e] === ee) {\n                        u = nn;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = os;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case nn:\n                {\n                    let { procedure: t, stack: s } = a, { description: n } = t, { statements: r } = n;\n                    u = on, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        statements: r\n                    }), U = Ye, u = Lt, _ = !0;\n                    break;\n                }\n            case on:\n                {\n                    let { procedure: t } = a, { name: s } = t;\n                    y();\n                    let { object: n, mapNameMember: r } = a, { description: i } = n, { members: E } = i;\n                    r.has(s) && (b = T | 0, O = c - d | 0, Ea(s, n.name));\n                    let m = Object.seal({\n                        name: t.name,\n                        data: {\n                            name: t.name,\n                            type: t.type,\n                            path: t.path\n                        }\n                    });\n                    E.push(t), r.set(s, m), _ = !0;\n                    break;\n                }\n        }\n    }, Zl = (c, o, e, l)=>{\n        switch(u){\n            case oc:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(t, Ht)) {\n                        h(), U = to, u = ac, _ = !0;\n                        return;\n                    }\n                    break;\n                }\n            case ac:\n                {\n                    if (o[e] === ee) {\n                        y();\n                        return;\n                    }\n                    break;\n                }\n        }\n    }, ql = (c, o, e, l)=>{\n        switch(u){\n            case Zs:\n                {\n                    let t = new Map, s = v.join(\".\"), n = Object.seal({\n                        generics: [],\n                        inputs: [],\n                        locals: [],\n                        outputs: [],\n                        statements: []\n                    }), r = Object.seal({\n                        type: lt,\n                        name: it,\n                        path: s,\n                        hasArity: !1,\n                        description: n\n                    });\n                    a = Object.seal({\n                        procedure: r,\n                        stack: t\n                    }), u = qs;\n                    break;\n                }\n            case qs:\n                {\n                    let { procedure: t } = a, s = o.subarray(e, e + l | 0), n = f(s);\n                    if (St(c, o, e, l)) return;\n                    if (Z(s, Xt)) {\n                        b = T | 0, O = c - d | 0, failReservedKeyword(n);\n                        return;\n                    }\n                    t.name = n, u = Qs;\n                    break;\n                }\n            case Qs:\n                {\n                    if (o[e] === $e) u = xs, _ = !0;\n                    else if (o[e] === pe) u = cs, _ = !0;\n                    else {\n                        let t = o.subarray(e, e + l | 0), s = f(t);\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    break;\n                }\n            case xs:\n                {\n                    let { procedure: t } = a, { description: s } = t, { generics: n } = s;\n                    u = cs, h(), a = n, U = Ss, u = Ls, _ = !0;\n                    break;\n                }\n            case cs:\n                {\n                    let { procedure: t } = a, { description: s } = t, { inputs: n } = s;\n                    u = en, h(), a = n, U = Ns, u = Ps, _ = !0;\n                    break;\n                }\n            case en:\n                {\n                    let { procedure: t, stack: s } = a, { description: n } = t, { inputs: r } = n;\n                    for (let R of r){\n                        let { name: F, data: w } = R;\n                        s.set(F, w);\n                    }\n                    let i = o.subarray(e, e + l | 0), E = o[e];\n                    if (Z(i, Ks)) {\n                        u = tn;\n                        return;\n                    }\n                    if (E === ce) {\n                        u = us, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let m = f(i), N = _r;\n                    Y(`${f(Ks)} or ${f(ce)}`, m, N);\n                    break;\n                }\n            case tn:\n                {\n                    let { procedure: t } = a, { description: s } = t, { outputs: n } = s;\n                    u = us, h(), a = n, U = Ns, u = Ps, _ = !0;\n                    break;\n                }\n            case us:\n                {\n                    let t = o[e], { procedure: s } = a;\n                    if (Re(s), t === ce) {\n                        u = sn;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = o.subarray(e, e + l | 0), r = f(n), i = nt;\n                    Y(f(ce), r, i);\n                    break;\n                }\n            case sn:\n                {\n                    if (o[e] === ee) {\n                        u = nn;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = os;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case nn:\n                {\n                    let { procedure: t, stack: s } = a, { description: n } = t, { statements: r } = n;\n                    u = on, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        statements: r\n                    }), U = Ye, u = Lt, _ = !0;\n                    break;\n                }\n            case on:\n                {\n                    let i = function(E, m = !0) {\n                        let N = [\n                            Wa,\n                            Xa,\n                            Ka,\n                            Za\n                        ], R = !1;\n                        if (E.find((w)=>w.type === pt)) return !0;\n                        for(let w = E.length - 1; w >= 0; w--){\n                            let j = E[w];\n                            if (N.includes(j.type) && j.statements) i(j.statements, !1) && (R = !0);\n                            else if (j.type === Ja) {\n                                let H = 0;\n                                for (let Ae of j.matches)i(Ae.statements) && H++;\n                                let { data: $ } = ue(j.value), ie = S.find((Ae)=>Ae.name === $.name && Ae.path === $.path);\n                                j.matches.find((Ae)=>Ae.type === bs) && H === j.matches.length || ie && ie.type === Bt && j.matches.length === ie.description.labels.length ? R = !0 : H > 0 && (b = T | 0, O = c - d | 0, re(`ReturnError: Procedure \"${t.name}\" has condition-specific returns; it will not return if conditions are not met.`));\n                            } else if (j.type === jn) if (j.branches && j.branches.length > 0) {\n                                let H = E.some(($)=>$.type === pt);\n                                if (m && !H && j.branches.length < 2) return b = T | 0, O = c - d | 0, re(`ReturnError: Procedure \"${t.name}\" has condition-specific returns; it will not return if conditions are not met.`), !1;\n                                if (!H) {\n                                    for (let $ of j.branches)if (!$.statements || !i($.statements, !1)) return b = T | 0, O = c - d | 0, re(`Procedure ${t.name} does not have a return statement. Please make sure your return values are marked as defined in the procedure definition.`), !1;\n                                    w !== E.length - 1 && E[E.length - 1].type !== ts && (b = T | 0, O = c - d | 0, re(`Code after return statement will not be executed. Procedure ${t.name} has defined statements after a return statements which makes them unreachable.`));\n                                }\n                                R = !0;\n                            } else return console.error(\"Error: Condition does not have branches\"), !1;\n                            else j.type === pt && (w !== E.length - 1 && E[E.length - 1].type !== ts && (b = T | 0, O = c - d | 0, re(`Code after return statement will not be executed. Procedure ${t.name} has defined statements after a return statements which makes them unreachable.`)), R = !0);\n                            if (R == !0) break;\n                        }\n                        return m && !R && (b = T | 0, O = c - d | 0, re(`Procedure ${t.name} does not have a return statement. Please make sure your return values are marked as defined in the procedure definition.`)), R;\n                    }, { procedure: t } = a, { description: s } = t, { statements: n, outputs: r } = s;\n                    if (t.hasArity) {\n                        let E = Object.freeze({\n                            name: s.locals.find((N)=>N.purpose === Fn).name,\n                            type: xe\n                        }), m = Object.freeze({\n                            type: pt,\n                            values: [\n                                E\n                            ]\n                        });\n                        n.push(m);\n                    }\n                    if (r.length !== 0 && i(n), r.length === 0 && !n.find((E)=>E.type === pt) && n.push(Object.freeze({\n                        type: pt,\n                        values: []\n                    })), y(), a && a.export) {\n                        let E = Object.freeze({\n                            name: t.name,\n                            type: t.type,\n                            path: ll\n                        });\n                        W.push(E);\n                        let m = je;\n                        y(), je === m && y(), je < m && h();\n                    }\n                    _ = !0;\n                    break;\n                }\n        }\n    }, Ql = (c, o, e, l)=>{\n        switch(u){\n            case Lt:\n                {\n                    if (Sn(c, Zn)) {\n                        b = T | 0, O = c - d | 0, _a(c);\n                        return;\n                    }\n                    je = wt(c), u = lc, _ = !0;\n                    break;\n                }\n            case lc:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Nn(c)) {\n                        y(), _ = !0;\n                        return;\n                    }\n                    h(), U = Ne, u = Nr, _ = !0;\n                    break;\n                }\n            case Yc:\n                {\n                    let { statements: t } = a, s = {\n                        type: X_\n                    };\n                    t.push(s), y();\n                    break;\n                }\n            case cu:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.seal({\n                        type: Wa,\n                        condition: null,\n                        statements: []\n                    });\n                    n.push(r), h(), a = Object.seal({\n                        blockWhile: r,\n                        procedure: t,\n                        stack: s\n                    }), u = uu;\n                    break;\n                }\n            case uu:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = iu, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case iu:\n                {\n                    if (o[e] === ce) {\n                        let { value: i } = a;\n                        y();\n                        let { blockWhile: E } = a;\n                        E.condition = i, u = lu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case lu:\n                {\n                    let { blockWhile: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = Po, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case Lu:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.seal({\n                        type: Ja,\n                        value: null,\n                        matches: []\n                    });\n                    n.push(r), h(), a = Object.seal({\n                        blockWhen: r,\n                        procedure: t,\n                        stack: s\n                    }), u = Ru;\n                    break;\n                }\n            case Ru:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = ku, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case ku:\n                {\n                    if (o[e] === ce) {\n                        let { value: i } = a;\n                        y();\n                        let { blockWhen: E } = a;\n                        E.value = i, u = Cu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case Cu:\n                {\n                    if (o[e] === ee) {\n                        u = ko;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = Pt;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case ko:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(t, Ts)) {\n                        let { stack: s, procedure: n, blockWhen: r } = a, { matches: i } = r;\n                        h();\n                        let E = Object.seal({\n                            type: ms,\n                            value: null,\n                            statements: []\n                        });\n                        i.push(E), a = {\n                            procedure: n,\n                            stack: s,\n                            match: E,\n                            blockWhen: r\n                        }, u = vu, h(), a = {\n                            stack: s,\n                            procedure: n,\n                            value: null\n                        }, h(), u = Se, U = Ne;\n                        return;\n                    }\n                }\n            case vu:\n                {\n                    if (o[e] === ce) {\n                        let { value: i } = a;\n                        y();\n                        let { match: E, blockWhen: m } = a, N = ue(m.value), R = ue(i);\n                        if (R.data.path != N.data.path || R.data?.name != N.data?.name) {\n                            b = T | 0, O = c - d | 0, re(`TypeError: Type mismatch in when block. When value's ${N.data.name} is being compared against match value's ${R.data.name}. To avoid unexpected behaviours. Use when with I32 or Enums, and if for other type conditions`);\n                            return;\n                        }\n                        E.value = i, u = Co;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case Co:\n                {\n                    let { match: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = yu, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case Uu:\n                {\n                    let { stack: t, procedure: s, blockWhen: n } = a, { matches: r } = n, i = o.subarray(e, e + l | 0);\n                    if (Z(i, $s)) {\n                        h();\n                        let N = Object.seal({\n                            type: bs,\n                            statements: []\n                        });\n                        r.push(N), a = {\n                            procedure: s,\n                            stack: t,\n                            match: N\n                        }, u = Bu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = f(i), m = [];\n                    Y(f($s), E, m);\n                    break;\n                }\n            case Bu:\n                {\n                    if (o[e] == ce) {\n                        u = Co;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case yu:\n                {\n                    y();\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(t, Ts)) {\n                        u = ko, _ = !0;\n                        return;\n                    }\n                    if (Z(t, $s)) {\n                        u = Uu, _ = !0;\n                        return;\n                    }\n                    let { blockWhen: s } = a, n = s.matches.every((r)=>r.statements.some((i)=>i.type === pt || i.type === ts)) && s.matches.some((r)=>r.type === bs);\n                    y(), n && a.statements.push(Object.freeze({\n                        type: ts\n                    })), y(), _ = !0;\n                    break;\n                }\n            case fu:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.seal({\n                        type: Za,\n                        limit: null,\n                        variable: null,\n                        modifier: it,\n                        initializer: null,\n                        step: null,\n                        statements: []\n                    });\n                    n.push(r), h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        blockFor: r\n                    }), u = Eu, ve();\n                    break;\n                }\n            case Eu:\n                {\n                    Oe(c, o, e, l);\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (o[e] === ce) {\n                        u = _u, Le();\n                        return;\n                    }\n                    if (fr.includes(s)) {\n                        u = Tu, Le();\n                        return;\n                    }\n                    if (o[e] === et) {\n                        b = T | 0, O = c - d | 0;\n                        let n = o.subarray(e, e + l | 0);\n                        re(\"Unexpected behavior: Existing variables can not be updated in for loop definition. Please update the value before you define the loop or declare a brand new variable.\");\n                        return;\n                    }\n                    break;\n                }\n            case _u:\n                {\n                    let { stack: t, blockFor: s } = a, n = o.subarray(e, e + l | 0), r = f(n);\n                    if (t.has(r)) {\n                        b = T | 0, O = c - d | 0, Jt(r);\n                        return;\n                    }\n                    s.variable = Object.freeze({\n                        type: xe,\n                        name: r\n                    }), u = pu;\n                    break;\n                }\n            case pu:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (o[e] === ce) {\n                        let { blockFor: i, stack: E } = a, { name: m } = i.variable;\n                        if (E.has(m)) {\n                            b = T | 0, O = c - d | 0, Jt(m);\n                            return;\n                        }\n                        if (o[e + 1] === et && l > 1) {\n                            u = Lo, _ = !0;\n                            return;\n                        }\n                        u = mu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = pr;\n                    Y(`${f(ce)} or ${f([\n                        ce,\n                        et\n                    ])}`, s, r);\n                    break;\n                }\n            case mu:\n                {\n                    let { blockFor: t, procedure: s, stack: n } = a, { variable: r } = t, { description: i } = s, { locals: E } = i, m = o.subarray(e, e + l | 0), N = f(m);\n                    if (rt(c, o, e, l)) {\n                        b = T | 0, O = c - d | 0, qe(N);\n                        return;\n                    }\n                    let R = Ue(N);\n                    if (R) {\n                        let F = Object.seal({\n                            type: Ce,\n                            name: R.name,\n                            path: R.path\n                        }), w;\n                        if (r.mutable ? w = Object.freeze({\n                            name: r.name,\n                            data: {\n                                ...F,\n                                mutable: target.mutable\n                            }\n                        }) : w = Object.freeze({\n                            name: r.name,\n                            data: F\n                        }), !zs.includes(r.data.name)) {\n                            b = T | 0, O = c - d | 0;\n                            let j = o.subarray(e, e + l | 0), H = f(j);\n                            re(`Error: 'For' loop counter must be a numeric type. The current counter type is '${H}', which is not supported. Please use a numeric type (e.g., integer or floating-point) for the loop counter.`);\n                            return;\n                        }\n                        n.set(r.name, r.data), E.push(w), u = Lo;\n                        break;\n                    }\n                }\n            case Lo:\n                {\n                    if (o[e] === et || o[e] === ce && o[e + 1 | 0] === et) {\n                        u = bu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    Y(et, s, []);\n                    break;\n                }\n            case bu:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = Ou, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Ou:\n                {\n                    let { stack: t, procedure: s, value: n } = a, { description: r } = s, { locals: i } = r;\n                    y();\n                    let { blockFor: E } = a, { variable: m } = E, { data: N } = ue(n), R = t.get(E.variable.name);\n                    if (R) {\n                        if (R.name !== N.name) {\n                            if (N.type !== Ie) {\n                                b = T | 0, O = c - d | 0, ba(R.name, N.name);\n                                return;\n                            }\n                            if (!zs.includes(m.data.name)) {\n                                b = T | 0, O = c - d | 0;\n                                let F = o.subarray(e, e + l | 0), w = f(F);\n                                re(`Error: 'For' loop counter must be a numeric type. The current counter type is '${w}', which is not supported. Please use a numeric type (e.g., integer or floating-point) for the loop counter.`);\n                                return;\n                            }\n                        }\n                    } else t.set(m.name, N), i.push({\n                        name: m.name,\n                        data: N.type === Ie ? {\n                            type: Ce,\n                            name: N.name,\n                            path: N.path\n                        } : N\n                    });\n                    E.initializer = Object.freeze({\n                        target: m,\n                        type: yt,\n                        source: n.type === Ie ? {\n                            ...n,\n                            name: R?.name || n.name\n                        } : n\n                    }), u = Ro, _ = !0;\n                    break;\n                }\n            case Tu:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = Au, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Au:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { blockFor: s } = a;\n                    s.variable = Ve(t), u = Ro, _ = !0;\n                    break;\n                }\n            case Ro:\n                {\n                    let { blockFor: t } = a, s = o.subarray(e, e + l | 0), n = f(s);\n                    if (fr.includes(n)) {\n                        t.modifier = n, u = du;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = f(s), i = [];\n                    Y(`'For' loop modifiers (e.g., ${na}, ${oa}, ${aa}, or ${ra})`, r, i);\n                    break;\n                }\n            case du:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = Iu, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Iu:\n                {\n                    let { value: t } = a, { data: s } = ue(t);\n                    if (!zs.includes(s.name)) {\n                        b = T | 0, O = c - d | 0;\n                        let F = o.subarray(e, e + l | 0), w = f(F);\n                        re(`Error: 'For' loop limit must be a numeric type. The current limit type is '${w}', which is not supported. Please use a numeric type (e.g., integer or floating-point) for the loop limit.`);\n                        return;\n                    }\n                    y();\n                    let { blockFor: n } = a, { modifier: r } = n;\n                    n.limit = Ve(t);\n                    let i = (F, w)=>w.find((j)=>j.description && Array.isArray(j.description.inputs) ? j.description.inputs.length !== 2 ? !1 : j.description.inputs.every((H, $)=>H.data.name === F.name) : !1), E = {\n                        [na]: {\n                            stepper: \"+\",\n                            conditioner: \"<=\"\n                        },\n                        [aa]: {\n                            stepper: \"+\",\n                            conditioner: \"<\"\n                        },\n                        [oa]: {\n                            stepper: \"-\",\n                            conditioner: \">=\"\n                        },\n                        [ra]: {\n                            stepper: \"-\",\n                            conditioner: \">\"\n                        }\n                    };\n                    if (E.hasOwnProperty(r)) {\n                        let { stepper: F, conditioner: w } = E[r], j = i(s, Gt[F]), H = i(s, Gt[w]);\n                        Re(j), Re(H);\n                    }\n                    let m = o.subarray(e, e + l | 0);\n                    if (Z(m, cr)) {\n                        u = Nu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let N = f(m), R = [];\n                    Y(f(cr), N, R);\n                    break;\n                }\n            case Nu:\n                {\n                    let { procedure: t, stack: s } = a;\n                    u = Su, h(), a = {\n                        stack: s,\n                        procedure: t,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Su:\n                {\n                    if (o[e] === ce) {\n                        let { value: i } = a;\n                        y();\n                        let { blockFor: E } = a;\n                        E.step = Ve(i);\n                        let { data: m } = ue(i);\n                        if (!zs.includes(m.name)) {\n                            b = T | 0, O = c - d | 0;\n                            let N = o.subarray(e, e + l | 0), R = f(N);\n                            re(`Error: 'For' loop step must be a numeric type. The current step type is '${R}', which is not supported. Please use a numeric type (e.g., integer or floating-point) for the loop step.`);\n                            return;\n                        }\n                        u = hu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case hu:\n                {\n                    let { blockFor: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = Pu, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case Pu:\n                {\n                    y(), y(), _ = !0;\n                    break;\n                }\n            case eu:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.seal({\n                        type: Xa,\n                        iterator: null,\n                        index: `j_${ut()}`,\n                        collection: null,\n                        statements: []\n                    }), i = {\n                        name: r.index,\n                        data: {\n                            type: Ce,\n                            name: Je,\n                            path: me\n                        }\n                    };\n                    s.set(i.name, i.data), n.push(r), Ue(i.data.name), h(), a = Object.seal({\n                        blockForeach: r,\n                        procedure: t,\n                        stack: new Map(JSON.parse(JSON.stringify(Array.from(s))))\n                    }), u = tu;\n                    break;\n                }\n            case tu:\n                {\n                    let t = o.subarray(e, e + l | 0), { blockForeach: s, stack: n } = a, r = f(t);\n                    if (n.has(r)) {\n                        Jt(r), b = T | 0, O = c - d | 0;\n                        return;\n                    }\n                    s.iterator = r, u = su;\n                    break;\n                }\n            case su:\n                {\n                    let { blockForeach: t, stack: s, procedure: n } = a, { description: r } = n, { locals: i } = r, E = o.subarray(e, e + l | 0);\n                    if (Z(mp, E)) {\n                        s.delete(t.index), u = nu;\n                        return;\n                    }\n                    _ = !0, u = ho;\n                    break;\n                }\n            case nu:\n                {\n                    let { blockForeach: t, stack: s, procedure: n } = a, { description: r } = n, { locals: i } = r, E = o.subarray(e, e + l | 0), m = f(E);\n                    if (s.has(m)) {\n                        Jt(m), b = T | 0, O = c - d | 0;\n                        return;\n                    }\n                    let N = {\n                        name: m,\n                        data: {\n                            type: Ce,\n                            name: Je,\n                            path: me\n                        }\n                    };\n                    s.set(m, N.data), i.push(N), Ue(N.data.name), t.index = m, u = ho;\n                    break;\n                }\n            case ho:\n                {\n                    let { blockForeach: t, stack: s, procedure: n } = a, { description: r } = n, { locals: i } = r, E = o.subarray(e, e + l | 0);\n                    if (Z(rr, E)) {\n                        s.has(t.index) && !i.find((R)=>R.name === t.index) && i.push({\n                            name: t.index,\n                            data: s.get(t.index)\n                        }), u = ou;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let m = f(E), N = nt;\n                    Y(f(rr), m, N);\n                    break;\n                }\n            case ou:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = au, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case au:\n                {\n                    if (o[e] === ce) {\n                        let { value: i, stack: E, procedure: m } = a, { description: N } = m, { locals: R } = N;\n                        y();\n                        let { blockForeach: F } = a;\n                        F.collection = i;\n                        let { data: w } = ue(i), j = {\n                            name: F.iterator,\n                            data: {\n                                type: w.contains || Ce,\n                                name: w?.name === tt ? Os : w?.name,\n                                path: w?.path,\n                                layout: w.contains\n                            }\n                        };\n                        E.set(j.name, j.data), R.push(j), u = ru;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case ru:\n                {\n                    let { blockForeach: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = Po, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case Po:\n                {\n                    y(), y(), _ = !0;\n                    break;\n                }\n            case Dc:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.freeze({\n                        type: Ka,\n                        statements: []\n                    });\n                    n.push(r), h(), a = Object.seal({\n                        blockLoop: r,\n                        procedure: t,\n                        stack: new Map(JSON.parse(JSON.stringify(Array.from(s)))),\n                        value: 0\n                    }), u = Mc;\n                    break;\n                }\n            case Mc:\n                {\n                    if (o[e] === ce) {\n                        u = Fc;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(f(ce), n, r);\n                    break;\n                }\n            case Fc:\n                {\n                    let { blockLoop: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = jc, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case jc:\n                {\n                    y(), y(), _ = !0;\n                    break;\n                }\n            case fc:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.freeze({\n                        type: jn,\n                        branches: [],\n                        values: []\n                    });\n                    n.push(r), h(), a = Object.seal({\n                        blockCondition: r,\n                        procedure: t,\n                        stack: new Map(JSON.parse(JSON.stringify(Array.from(s)))),\n                        value: 0\n                    }), u = Tc;\n                    break;\n                }\n            case Tc:\n                {\n                    if (o[e] === pe) {\n                        let { stack: t, procedure: s } = a;\n                        u = Eo, h(), a = {\n                            stack: t,\n                            procedure: s,\n                            value: null\n                        }, h(), u = Se, U = Ne, _ = !0;\n                        return;\n                    }\n                    ve(), Oe(c, o, e, l), u = Ac;\n                    break;\n                }\n            case Ac:\n                {\n                    Oe(c, o, e, l);\n                    let t = o[e], s = o.subarray(e, e + l | 0);\n                    if (t === pe || t === ce) {\n                        let { stack: n, procedure: r } = a;\n                        u = Eo, h(), a = {\n                            stack: n,\n                            procedure: r,\n                            value: null\n                        }, h(), u = Se, U = Ne, _ = !0, Le();\n                        return;\n                    }\n                    if (Z(s, Ts)) {\n                        let { stack: n, procedure: r } = a;\n                        u = lo, h(), a = {\n                            stack: n,\n                            procedure: r,\n                            value: null\n                        }, h(), u = Se, U = Ne, _ = !0, Le();\n                        return;\n                    }\n                    break;\n                }\n            case Eo:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { blockCondition: s, stack: n, procedure: r } = a, { branches: i } = s, E = Object.seal({\n                        type: ms,\n                        statements: [],\n                        values: [\n                            Ve(t)\n                        ]\n                    });\n                    i.push(E), a = Object.seal({\n                        blockCondition: s,\n                        branch: E,\n                        stack: n,\n                        value: t,\n                        procedure: r\n                    }), u = _o, _ = !0;\n                    break;\n                }\n            case Nc:\n                {\n                    let { stack: t, branches: s, procedure: n } = a, r = {\n                        type: bs,\n                        statements: [],\n                        values: []\n                    };\n                    s.push(r), a = Object.seal({\n                        branch: r,\n                        stack: t,\n                        procedure: n\n                    }), u = _o;\n                    break;\n                }\n            case _o:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === ce) {\n                        u = dc;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = As;\n                    Y(f(ce), s, n);\n                    break;\n                }\n            case dc:\n                {\n                    let { branch: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = Ic, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case Ic:\n                {\n                    if (a.blockCondition) {\n                        let { blockCondition: t } = a, { branches: s } = t;\n                        y(), y(), a = Object.seal({\n                            ...a,\n                            branches: s\n                        });\n                    } else {\n                        y();\n                        let { branches: t, ...s } = a;\n                        if (t.length == 2 && t[0].type === ms && t[0].statements.find((n)=>n.type === pt) && t[1].type === bs && !t[1].statements.find((n)=>n.type === pt)) {\n                            let n = `arity_${ut()}`, r = `status_${ut()}`, i = Object.freeze({\n                                type: Ce,\n                                name: Kt,\n                                path: me,\n                                mutable: !0\n                            }), E = Object.freeze({\n                                name: r,\n                                purpose: Ga,\n                                data: i\n                            }), m = Object.freeze({\n                                name: n,\n                                purpose: Fn,\n                                data: {\n                                    ...s.procedure.description.outputs[0].data,\n                                    mutable: !0\n                                }\n                            });\n                            s.procedure.description.locals.push(m, E);\n                            let N = Object.freeze({\n                                type: xe,\n                                name: n\n                            }), R = Object.freeze({\n                                type: yt,\n                                source: t[0].statements.find((H)=>H.type === pt).values[0],\n                                target: N\n                            }), F = Object.freeze({\n                                type: yt,\n                                source: Object.freeze({\n                                    type: Ie,\n                                    literal: \"TRUE\",\n                                    name: Kt,\n                                    path: me\n                                }),\n                                target: Object.freeze({\n                                    type: xe,\n                                    name: r\n                                })\n                            });\n                            t[0].statements.pop(), t[0].statements.push(R, F), s.statements.push(...t[1].statements), t.pop();\n                            let { stack: w } = s;\n                            w.set(n, m.data), w.set(r, i);\n                            let j = Object.freeze({\n                                type: yt,\n                                source: Object.freeze({\n                                    type: Ie,\n                                    name: Kt,\n                                    literal: \"FALSE\",\n                                    path: me\n                                }),\n                                target: Object.freeze({\n                                    type: xe,\n                                    name: r\n                                })\n                            });\n                            s.statements.unshift(j), s.procedure.hasArity = !0;\n                        }\n                        t.every((n)=>n.statements.some((r)=>r.type === pt || r.type === ts)) && s.statements.push(Object.freeze({\n                            type: ts\n                        })), a = Object.seal(s);\n                    }\n                    _ = !0;\n                    break;\n                }\n            case lo:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { blockCondition: s, stack: n } = a, { values: r } = s, i = o.subarray(e, e + l | 0), E = f(i);\n                    r.push(t), u = Ec, _ = !0;\n                    break;\n                }\n            case Ec:\n                {\n                    if (o[e] === Be) {\n                        let { stack: i, procedure: E } = a;\n                        u = lo, h(), a = {\n                            stack: i,\n                            procedure: E,\n                            value: null\n                        }, h(), u = Se, U = Ne, _ = !0;\n                        return;\n                    }\n                    let s = o.subarray(e, e + l | 0);\n                    if (Z(s, Ts)) {\n                        u = _c, h(), u = pc, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = f(s), r = Yp;\n                    Y(`${f(Ts)} or ${f(Be)}`, n, r);\n                    break;\n                }\n            case _c:\n                {\n                    y(), y(), _ = !0;\n                    break;\n                }\n            case pc:\n                {\n                    let { blockCondition: t, procedure: s, stack: n } = a, { branches: r } = t, i = Object.seal({\n                        type: ms,\n                        statements: [],\n                        values: []\n                    });\n                    r.push(i), a = Object.seal({\n                        blockCondition: t,\n                        branchMatch: i,\n                        procedure: s,\n                        stack: n\n                    }), u = fo;\n                    break;\n                }\n            case fo:\n                {\n                    let { blockCondition: t, branchMatch: s, stack: n } = a, { values: r } = t, { values: i } = s, E = o.subarray(e, e + l | 0), m = f(E);\n                    if (St(c, o, e, l) && !Z(E, nr)) {\n                        b = T | 0, O = c - d | 0;\n                        let N = o.subarray(e, e + l | 0), R = f(N);\n                        Y(\"match value\", R, nt);\n                        return;\n                    }\n                    if (n.has(m)) {\n                        let N = Object.freeze({\n                            type: xe,\n                            name: m\n                        });\n                        i.push(N);\n                    } else if (bn(m)) {\n                        let N = Object.freeze({\n                            type: Ie,\n                            literal: m,\n                            name: Kt,\n                            path: me\n                        });\n                        i.push(N), Ue(N.name);\n                    } else {\n                        let { procedure: N } = a, { description: R } = N, { outputs: F } = R, w = m, { name: j, path: H } = F[0].data, $ = Object.freeze({\n                            type: Ie,\n                            literal: w,\n                            name: j,\n                            path: H\n                        });\n                        i.push($);\n                    }\n                    u = mc;\n                    break;\n                }\n            case mc:\n                {\n                    let t = o[e];\n                    if (t === Be) {\n                        u = fo;\n                        return;\n                    }\n                    if (t === ce) {\n                        u = bc;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = nt;\n                    Y(`${f(Be)} or ${f(ce)}`, n, r);\n                    break;\n                }\n            case bc:\n                {\n                    let { branchMatch: t, procedure: s, stack: n } = a, { statements: r } = t;\n                    if (o[e] === ee) {\n                        u = Oc, h(), a = Object.seal({\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), U = Ye, u = Lt;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = Pt;\n                    Y(f(ee), m, N);\n                    break;\n                }\n            case Oc:\n                {\n                    y();\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    _ = !0;\n                    break;\n                }\n            case Sc:\n                {\n                    u = hc;\n                    break;\n                }\n            case hc:\n                {\n                    if (o[e] === ee) {\n                        y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = Pt;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case Pc:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.seal({\n                        type: pt,\n                        values: []\n                    });\n                    n.push(r), h();\n                    let i = T | 0, E = c - d | 0, m = Object.freeze({\n                        row: i,\n                        column: E\n                    });\n                    a = Object.seal({\n                        commandReturn: r,\n                        coordinates: m,\n                        procedure: t,\n                        stack: s\n                    }), u = po;\n                    break;\n                }\n            case po:\n                {\n                    let { stack: t, procedure: s } = a;\n                    if (o[e] === ee) {\n                        u = mo, _ = !0;\n                        return;\n                    }\n                    u = Lc, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Lc:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { commandReturn: s, stack: n, procedure: r } = a, { values: i } = s;\n                    i.push(Ve(t));\n                    let E = o[e];\n                    if (E === ee) {\n                        u = mo, _ = !0;\n                        return;\n                    }\n                    if (E === Be) {\n                        u = po;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let m = o.subarray(e, e + l | 0), N = f(m), R = Er;\n                    Y(`${f(ee)} or ${f(Be)}`, N, R);\n                    break;\n                }\n            case mo:\n                {\n                    let { commandReturn: t, coordinates: s, procedure: n } = a, { values: r } = t, { description: i } = n, { outputs: E } = i;\n                    if (r.length !== E.length) {\n                        b = s.row | 0, O = s.column | 0, Vl(E.length, r.length, n.name);\n                        return;\n                    }\n                    for (let m of E){\n                        let N = E.indexOf(m), R = ue(r[N]);\n                        if (R && R.data.name != m.data.name) {\n                            b = s.row | 0, O = s.column | 0, re(`Mismatching types provided on procedure's return. Procedure expected ${m.data.name} at index ${N} but was provided with a rather ${R.data.name}. Please review to provide matching types.`);\n                            return;\n                        }\n                    }\n                    if (n.hasArity) {\n                        let m = Object.freeze({\n                            name: i.locals.find((j)=>j.purpose === Fn).name,\n                            type: xe\n                        }), N = Object.freeze({\n                            name: i.locals.find((j)=>j.purpose === Ga).name,\n                            type: xe\n                        }), R = Object.freeze({\n                            type: yt,\n                            source: r[0],\n                            target: m\n                        }), F = Object.freeze({\n                            type: ms,\n                            statements: [\n                                R\n                            ],\n                            values: [\n                                N\n                            ]\n                        }), w = Object.freeze({\n                            type: jn,\n                            branches: [\n                                F\n                            ],\n                            values: []\n                        });\n                        i.statements.pop(), i.statements.push(w);\n                    }\n                    y(), y();\n                    break;\n                }\n            case Vc:\n                {\n                    let t = o.subarray(e, e + l | 0), { procedure: s, stack: n, statements: r } = a, i = {\n                        type: xe,\n                        name: null\n                    }, E = Object.seal({\n                        type: yt,\n                        target: i,\n                        source: null\n                    });\n                    if (a = Object.freeze({\n                        declarationValue: E,\n                        procedure: s,\n                        stack: n,\n                        statements: r,\n                        target: i\n                    }), Z(Xt, t)) i.mutable = !0, u = bo;\n                    else {\n                        _ = !0, u = So, ve();\n                        return;\n                    }\n                    break;\n                }\n            case So:\n                {\n                    Oe(c, o, e, l), u = Hc;\n                    break;\n                }\n            case Hc:\n                {\n                    if (Oe(c, o, e, l), o[e] === pe) {\n                        let { procedure: t, stack: s, statements: n } = a;\n                        u = zc;\n                        let r = Object.seal({\n                            type: Ha,\n                            expression: null\n                        });\n                        a = Object.seal({\n                            stack: s,\n                            procedure: t,\n                            drop: r,\n                            value: null,\n                            statements: n\n                        }), h(), U = ge, u = cn, Le();\n                        return;\n                    }\n                    if (o[e] === st) {\n                        u = So;\n                        return;\n                    }\n                    u = bo, Le();\n                    break;\n                }\n            case zc:\n                {\n                    let { statements: t, drop: s, value: n } = a;\n                    s.expression = n, t.push(s), y();\n                    break;\n                }\n            case bo:\n                {\n                    let { stack: t } = a, s = o.subarray(e, e + l | 0), n = f(s), r = t.get(n);\n                    if (t.has(n) && !r.mutable && (De = !0), Z(tr, s)) {\n                        _ = !0, u = Gc;\n                        return;\n                    }\n                    let { target: i } = a;\n                    i.name = n, u = Oo;\n                    break;\n                }\n            case Oo:\n                {\n                    let t = o[e], { procedure: s, stack: n, statements: r, target: i } = a;\n                    if (t === He) {\n                        let R = a.declarationValue, F = {\n                            type: yt,\n                            target: {\n                                type: $a,\n                                array: {\n                                    type: xe,\n                                    name: R.target.name\n                                },\n                                index: null\n                            },\n                            source: null\n                        };\n                        a = Object.seal({\n                            declarationValue: F,\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), _ = !0, u = To;\n                        return;\n                    }\n                    if (t === st) {\n                        let R = a.declarationValue, F = [], w = R.target;\n                        a = Object.seal({\n                            declarationValue: {\n                                type: yt,\n                                target: {\n                                    type: dt,\n                                    value: w,\n                                    trail: F\n                                },\n                                source: null\n                            },\n                            procedure: s,\n                            stack: n,\n                            statements: r\n                        }), h(), a = Object.seal({\n                            stack: n,\n                            trail: F,\n                            value: w\n                        }), u = Ao;\n                        return;\n                    }\n                    if (t === ce) {\n                        _ = !0, u = Cc;\n                        return;\n                    }\n                    if (t === le) {\n                        let { declarationValue: R } = a;\n                        y(), a.declarationValue.target = R.target, _ = !0;\n                        return;\n                    }\n                    if (t === et) {\n                        let R = a.declarationValue?.target && ye(a.declarationValue?.target);\n                        if (R && R !== ft && !n.get(R)) {\n                            b = T | 0, O = c - d | 0, vs(R);\n                            return;\n                        }\n                        u = an;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = As;\n                    Y(`${f(He)} or ${f(le)} or ${f(et)} or ${f(et)} or ${f(st)}`, m, N);\n                    break;\n                }\n            case Gc:\n                {\n                    a.target.type = Dt, a.target.trail = [], delete a.target.name, u = Io;\n                    break;\n                }\n            case Io:\n                {\n                    if (o[e] === st) {\n                        u = $c;\n                        return;\n                    }\n                    u = No, _ = !0;\n                    break;\n                }\n            case $c:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    a.target.trail.push(s), u = Kc;\n                    break;\n                }\n            case Kc:\n                {\n                    if (_ = !0, o[e] === st) {\n                        u = Io;\n                        return;\n                    }\n                    if (o[e] == He) {\n                        u = To;\n                        let t = Object.seal({\n                            type: $a,\n                            array: a.target,\n                            index: null\n                        });\n                        a.declarationValue.target = t;\n                        return;\n                    }\n                    u = No;\n                    break;\n                }\n            case No:\n                {\n                    u = Rs, _ = !0;\n                    break;\n                }\n            case To:\n                {\n                    if (o[e] === He) {\n                        u = Uc;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = xn;\n                    Y(f(He), n, r);\n                    break;\n                }\n            case Uc:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = Bc, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Bc:\n                {\n                    if (o[e] === Ft) {\n                        let { value: i } = a;\n                        y();\n                        let E = ue(i);\n                        if (E.data.mutable && i.type !== dt ? a.declarationValue.target.index = Object.seal({\n                            type: It,\n                            link: i\n                        }) : a.declarationValue.target.index = i, !E || ![\n                            Je,\n                            \"U32\",\n                            \"I16\",\n                            \"U16\",\n                            \"U8\",\n                            \"I8\"\n                        ].includes(E.data.name)) {\n                            b = T | 0, O = c - d | 0, re(\"Invalid index. Array index must be a valid I32 variable\");\n                            return;\n                        }\n                        u = Rs;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = mr;\n                    Y(f(Ft), n, r);\n                    break;\n                }\n            case Rc:\n                {\n                    let { procedure: t, stack: s, statements: n } = a, r = Object.seal({\n                        type: wn,\n                        link: null\n                    }), i = Object.seal({\n                        type: yt,\n                        target: r,\n                        source: null\n                    });\n                    a = Object.freeze({\n                        declarationValue: i,\n                        procedure: t,\n                        stack: s,\n                        statements: n\n                    }), u = Xc;\n                    break;\n                }\n            case Xc:\n                {\n                    if (o[e] === pe) {\n                        u = kc;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = ot;\n                    Y(f(pe), s, n);\n                    break;\n                }\n            case kc:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = Wc, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Wc:\n                {\n                    if (o[e] === le) {\n                        let { value: r } = a;\n                        y(), a.declarationValue.target.link = r, u = Oo;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = We;\n                    Y(f(le), s, n);\n                    break;\n                }\n            case wc:\n                {\n                    if (o[e] !== st) {\n                        y(), _ = !0;\n                        return;\n                    }\n                    u = Ao;\n                    break;\n                }\n            case Ao:\n                {\n                    let { stack: t, value: s, trail: n } = a, r = o.subarray(e, e + l | 0), i = f(r), E, m, N = !1;\n                    if (s.type === xe) {\n                        let { name: R } = s;\n                        E = t.get(R);\n                    }\n                    if (E) {\n                        let { name: R, path: F } = E, w = `${F}.${R}`, j = p.get(w);\n                        j.type === Me && (m = j);\n                    }\n                    if (m) {\n                        let { description: R } = m, { members: F } = R;\n                        for (let w of F)if (w.name === i) {\n                            N = !0;\n                            break;\n                        }\n                        if (!N) {\n                            b = T | 0, O = c - d | 0, Ot(i, s.name);\n                            return;\n                        }\n                    }\n                    if (s.value === ft || s.link === ft) {\n                        if (!t.get(i)) {\n                            b = T | 0, O = c - d | 0, Ot(i, `${ft}(current object in definition)`);\n                            return;\n                        }\n                        N = !0;\n                    }\n                    if (!N) {\n                        b = T | 0, O = c - d | 0, Ot(i, s.name);\n                        return;\n                    }\n                    n.push(i), u = wc;\n                    break;\n                }\n            case Cc:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (o[e] === ce) {\n                        let { target: i, stack: E } = a, { name: m } = i;\n                        if (E.has(m)) {\n                            b = T | 0, O = c - d | 0, Jt(m);\n                            return;\n                        }\n                        if (o[e + 1] === et && l > 1) {\n                            u = gc, _ = !0;\n                            return;\n                        }\n                        u = vc, h(), a = Object.seal({\n                            data: null\n                        }), h(), U = mt, u = ct;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = pr;\n                    Y(`${f(ce)} or ${f([\n                        ce,\n                        et\n                    ])}`, s, r);\n                    break;\n                }\n            case vc:\n                {\n                    let { data: t } = a;\n                    y();\n                    let { declarationValue: s, procedure: n, stack: r, statements: i } = a, { target: E } = s, { description: m } = n, { locals: N } = m, R, F;\n                    if (t.type !== Ce) E.mutable ? R = Object.freeze({\n                        name: E.name,\n                        data: {\n                            ...t,\n                            mutable: E.mutable\n                        }\n                    }) : R = Object.freeze({\n                        name: E.name,\n                        data: t\n                    }), t.type === Fe | t.layout === Fe && (F = !0);\n                    else {\n                        let w = Ue(t.name);\n                        if (w) {\n                            let j = Object.seal({\n                                type: Ce,\n                                name: w.name,\n                                path: w.path\n                            });\n                            E.mutable ? R = Object.freeze({\n                                name: E.name,\n                                data: {\n                                    ...j,\n                                    mutable: E.mutable\n                                }\n                            }) : R = Object.freeze({\n                                name: E.name,\n                                data: j\n                            });\n                        } else if (t.name === Fe) F = !0;\n                        else {\n                            b = T | 0, O = c - d | 0, Ct(name);\n                            return;\n                        }\n                    }\n                    if (F) {\n                        let w;\n                        E.mutable ? (w = {\n                            name: E.name,\n                            mutable: E.mutable,\n                            data: R.data\n                        }, delete E.mutable) : w = Object.seal({\n                            name: E.name,\n                            data: R.data\n                        }), r.set(E.name, w.data), N.push(w), a = Object.seal({\n                            declarationValue: s,\n                            procedure: n,\n                            stack: r,\n                            statements: i,\n                            inferenceValue: w\n                        }), u = Rs, _ = !0;\n                        return;\n                    }\n                    r.set(E.name, R.data), N.push(R), u = Rs, _ = !0;\n                    break;\n                }\n            case gc:\n                {\n                    let { declarationValue: t, procedure: s, stack: n, statements: r } = a, { target: i } = t, { description: E } = s, { locals: m } = E, N;\n                    i.mutable ? (N = {\n                        name: i.name,\n                        mutable: i.mutable,\n                        data: null\n                    }, delete i.mutable) : N = Object.seal({\n                        name: i.name,\n                        data: null\n                    }), n.set(i.name, N.data), m.push(N), a = Object.seal({\n                        declarationValue: t,\n                        procedure: s,\n                        stack: n,\n                        statements: r,\n                        inferenceValue: N\n                    }), u = an;\n                    break;\n                }\n            case Rs:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(t, Gs)) {\n                        u = an;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = As;\n                    Y(f(Gs), s, n);\n                    break;\n                }\n            case an:\n                {\n                    let { procedure: t, stack: s, target: n } = a, r = o[e];\n                    if (rt(c, o, e, l) && r !== pe && r !== He) {\n                        let i = o.subarray(e, e + l | 0), E = f(i);\n                        b = T | 0, O = c - d | 0, qe(E);\n                        return;\n                    }\n                    u = yc, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        value: null\n                    }), h(), U = Ne, u = Se, _ = !0;\n                    break;\n                }\n            case yc:\n                {\n                    if (o[e] === ee) {\n                        let { value: i } = a;\n                        y();\n                        let { declarationValue: E, statements: m, stack: N } = a;\n                        if (a.inferenceValue) {\n                            let x = function(Q) {\n                                let te;\n                                switch(Q.type){\n                                    case xe:\n                                        {\n                                            let oe = N.get(Q.name);\n                                            oe.type === Ce ? te = oe : oe.type === Ie ? (te = {\n                                                type: Ce,\n                                                name: oe.name,\n                                                path: oe.path\n                                            }, Q.mutable && (te.mutable = Q.mutable), Q.contains && (te.contains = Q.contains)) : (oe.type === Fe || oe.type === \"Link\") && (te = oe);\n                                            let { moved: Tt, ...Qe } = te;\n                                            te = Qe;\n                                            break;\n                                        }\n                                    case es:\n                                        {\n                                            te = {\n                                                type: Ce,\n                                                name: tt,\n                                                path: me\n                                            };\n                                            break;\n                                        }\n                                    case Ie:\n                                        {\n                                            te = {\n                                                type: Ce,\n                                                name: Q.name,\n                                                path: Q.path\n                                            }, Q.layout === Fe && (te.type = Fe, te.quantity = Q.quantity, Ue(te.name)), Q.contains && (te.contains = Q.contains);\n                                            break;\n                                        }\n                                    case Vn:\n                                        {\n                                            te = {\n                                                type: Ce,\n                                                name: Je,\n                                                path: me\n                                            };\n                                            break;\n                                        }\n                                    case ws:\n                                        {\n                                            te = {\n                                                type: Q.type,\n                                                name: Q.data.name,\n                                                path: Q.data.path\n                                            }, Q.data.contains && (te.contains = Q.data.contains);\n                                            break;\n                                        }\n                                    case gn:\n                                        {\n                                            te = x(Q.value);\n                                            break;\n                                        }\n                                    case $t:\n                                        {\n                                            if (Q.name === Vs) return Ue(ks), {\n                                                type: Ce,\n                                                name: ks,\n                                                path: me\n                                            };\n                                            let oe = (Qe)=>D.find((At)=>At.type === lt && At.name === Qe.name)?.description.outputs[0]?.data, Tt = (Qe, At)=>{\n                                                let at;\n                                                for(let vt = 0; At && vt <= Qe.name.length - 2; vt++)At = N.get(Qe.name[vt]), At && (at = S.find((Zt)=>Zt.type === Me && Zt.name === At.name));\n                                                return at?.description.members?.find((vt)=>vt.name === Qe.name[Qe.name.length - 1])?.description.outputs[0]?.data;\n                                            };\n                                            if (typeof Q.name === Me && Q.name[0] === Dt) {\n                                                let Qe = z(0);\n                                                Qe && (te = q(Qe, Q.name.slice(1)).description?.outputs[0]?.data);\n                                            } else if (Q.path !== me) {\n                                                if (te = oe(Q), typeof Q.name == \"object\") {\n                                                    let Qe = N.get(Q.name[0]);\n                                                    te = Tt(Q, Qe);\n                                                }\n                                                if (!te) {\n                                                    b = T | 0, O = c - d | 0, re(`TypeError: can not infer type from a function '${Q.name}' as it does not have a return type.`);\n                                                    return;\n                                                }\n                                            } else if (lr.has(Q.name)) te = {\n                                                type: Ce,\n                                                name: Kt,\n                                                path: me\n                                            }, Ue(te.name);\n                                            else {\n                                                let Qe = Q.inputs.map((at)=>ue(at)), At = D.find((at)=>at.description && Array.isArray(at.description.inputs) ? at.description.inputs.length !== Qe.length || at.name != Q.name ? !1 : at.description.inputs.every((vt, Zt)=>vt.data.name === Qe[Zt].data.name) : !1);\n                                                if (At) {\n                                                    let { description: at } = At, { outputs: vt } = at, Zt = vt[0], { data: of } = Zt, { name: af, path: rf } = of;\n                                                    te = {\n                                                        type: Ce,\n                                                        name: af,\n                                                        path: rf\n                                                    };\n                                                } else {\n                                                    b = T | 0, O = c - d | 0, ma(Qe.map((at)=>at.data.name), Q.name);\n                                                    return;\n                                                }\n                                            }\n                                            break;\n                                        }\n                                    case Mt:\n                                        {\n                                            te = {\n                                                ...x(Q.value),\n                                                type: Yn\n                                            }, Q.unsafe && (te.unsafe = Q.unsafe), Q.smart && (te.smart = Q.smart);\n                                            break;\n                                        }\n                                    case It:\n                                        {\n                                            let oe = N.get(Q.link);\n                                            te = {\n                                                type: Ce,\n                                                name: oe.name,\n                                                path: oe.path\n                                            }, oe.contains && (te.contains = oe.contains);\n                                            break;\n                                        }\n                                    case Ys:\n                                        {\n                                            let oe = ue(Q.array).data;\n                                            te = {\n                                                type: Ce,\n                                                name: oe.name,\n                                                path: oe.path\n                                            }, oe.contains && (te.contains = oe.contains);\n                                            break;\n                                        }\n                                    case dt:\n                                        return ue(Q)?.data;\n                                    case Me:\n                                        return {\n                                            type: Ce,\n                                            name: Q.name,\n                                            path: Q.path\n                                        };\n                                    default:\n                                        {\n                                            b = T | 0, O = c - d | 0, re(\"Error: unhandled inference type: \", Q.type);\n                                            return;\n                                        }\n                                }\n                                return te;\n                            }, { inferenceValue: se } = a;\n                            se.data = x(i), se.mutable && (se.data.mutable = se.mutable, delete se.mutable), N.set(se.name, se.data);\n                        }\n                        let { target: R } = E, F = ye(R), w = ye(i);\n                        if (N.has(w)) {\n                            let se = S.find((x)=>x.name === N.get(w).name && x.type === Me);\n                            se && !se.copy && (b = T | 0, O = c - d | 0, $l(w));\n                        }\n                        F && F !== ft && ((se)=>{\n                            if (!N.get(se)?.mutable && De) {\n                                b = T | 0, O = c - d | 0, Gl(se);\n                                return;\n                            }\n                        })(F), E.source = i;\n                        let H = ue(R), $ = ue(i), ie = (se, x)=>{\n                            if (se === x) return !0;\n                            if (typeof se != \"object\" || se === null || typeof x != \"object\" || x === null) return !1;\n                            if (se.type === \"local\" && x.type === \"local\") return se.name === x.name;\n                            let Q = Object.keys(se).filter((oe)=>oe !== \"mutable\"), te = Object.keys(x).filter((oe)=>oe !== \"mutable\");\n                            if (Q.length !== te.length) return !1;\n                            for (let oe of Q)if (!te.includes(oe) || !ie(se[oe], x[oe])) return !1;\n                            return !0;\n                        }, Ae = (se, x)=>se.some((Q)=>ie(Q, x));\n                        if (H && $) {\n                            H.data?.mutable && H.data.path === me && H.data.type !== Fe && R.type != dt && (Ae(Wt, R) || a.procedure.description.inputs.some((x)=>x.name === H.name || x.name === ye(R)) ? E.target = Object.seal({\n                                type: wn,\n                                link: R\n                            }) : $.data.path === me && $.data.type !== Fe && (E.source = Object.seal({\n                                type: Mt,\n                                value: i\n                            }), Wt.push(R))), $.data?.mutable && $.data.path === me && $.data.type !== Fe && i.type !== dt && (E.source = Object.seal({\n                                type: It,\n                                link: E.source\n                            }));\n                            let se = (x, Q)=>x.slice(1) === x.slice(1) || x.charAt(0) === x.charAt(0) || (x === \"FP64\" || x === \"FP32\" || x === \"I64\" || x === \"U64\" || x === Je || x === \"U32\" || x === \"I16\" || x === \"U16\" || x === \"I8\" || x === \"U8\") && Q === Je || x === \"FP64\" && Q == \"FP32\";\n                            if (H.data.name !== $.data.name && !(H.data.type === $.data.name || H.data.name === $.data.type) && !($.data.type === Ie && se(H.data.name, $.data.name))) {\n                                b = T | 0, O = c - d | 0, ba(H.data.name, $.data.name);\n                                return;\n                            }\n                        }\n                        m.push(E), y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = gp;\n                    Y(f(ee), n, r);\n                    break;\n                }\n            case Jc:\n                {\n                    let { stack: t, procedure: s } = a, n = Object.seal({\n                        type: W_,\n                        unsafe: !0,\n                        value: null\n                    }), r = o.subarray(e, e + l | 0);\n                    Z(r, ar) && (n.unsafe = !1), h(), a = Object.seal({\n                        free: n,\n                        stack: t,\n                        procedure: s\n                    }), u = Zc;\n                    break;\n                }\n            case Zc:\n                {\n                    if (o[e] === pe) {\n                        let { stack: i, procedure: E } = a;\n                        u = qc, h(), a = {\n                            stack: i,\n                            procedure: E,\n                            value: null\n                        }, h(), u = Se, U = Ne;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case qc:\n                {\n                    let { value: t, stack: s } = a;\n                    y();\n                    let { free: n } = a;\n                    n.value = Ve(t);\n                    let r = !0, { name: i, data: E } = ue(t, r);\n                    if (b = T | 0, O = c - d | 0, E.type !== Yn) {\n                        re(`Variable '${i}' is not a link and cannot be freed. Only 'unsafe' links are freeable.`);\n                        return;\n                    }\n                    if (E.unsafe !== n.unsafe) {\n                        re(`Improper free method used for link '${i}'. Unsafe links are unsafely freed with 'free!!' while safe ones are freed with 'free'. Your link(${i}) is ${E.unsafe ? \"un\" : \"\"}safe.`);\n                        return;\n                    }\n                    let m = s.get(i);\n                    m && s.set(i, {\n                        ...m,\n                        freed: !0\n                    }), u = Qc, _ = !0;\n                    break;\n                }\n            case Qc:\n                {\n                    if (o[e] === le) {\n                        let { free: i } = a;\n                        y();\n                        let { statements: E } = a;\n                        E.push(i), u = xc;\n                        break;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = We;\n                    Y(f(le), n, r);\n                    break;\n                }\n            case xc:\n                {\n                    y();\n                    break;\n                }\n        }\n    }, xl = (c, o, e, l)=>{\n        switch(u){\n            case ct:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (u = Du, o[e] === He) {\n                        h(), _ = !0, u = el, U = rs;\n                        return;\n                    }\n                    if (rt(c, o, e, l) && !ht.includes(s)) {\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    if (Z(zt, t)) {\n                        h(), a = {\n                            data: null\n                        }, _ = !0, u = _n, U = rs;\n                        return;\n                    }\n                    if (Z(ns, t)) {\n                        h(), a = {\n                            data: null\n                        }, _ = !0, u = _n, U = rs;\n                        return;\n                    }\n                    if (Z($n, t)) {\n                        h(), a = {\n                            data: null\n                        }, _ = !0, u = rl, U = rs;\n                        return;\n                    }\n                    let n = Ue(s);\n                    if (n) {\n                        n.type === Ut ? a.data = Object.seal({\n                            type: Ce,\n                            name: s,\n                            path: n.path\n                        }) : a.data = Object.seal({\n                            type: Ce,\n                            name: n.name,\n                            path: n.path\n                        }), a.mutable && (a.data = Object.seal({\n                            ...a.data,\n                            type: f(ns),\n                            unsafe: !0,\n                            mutable: a.mutable\n                        }));\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0, vs(s), y();\n                    break;\n                }\n            case Du:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === $e) {\n                        _ = !0, u = Mu;\n                        return;\n                    }\n                    y(), _ = !0;\n                    break;\n                }\n            case Mu:\n                {\n                    if (o[e] === $e) {\n                        u = Fu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ds;\n                    Y(f($e), n, r);\n                    break;\n                }\n            case Fu:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = Ue(s);\n                    if (n) {\n                        let { data: i } = a, { unsafe: E, type: m, smart: N } = i, R = fe(m);\n                        if (Z(R, zt)) a.data = Object.seal({\n                            type: m.replace(/!!$/, \"\"),\n                            name: n.name,\n                            path: n.path,\n                            segment: it,\n                            unsafe: E\n                        });\n                        else if (Z(R, ns)) a.data = Object.seal({\n                            type: m,\n                            name: n.name,\n                            path: n.path,\n                            segment: it\n                        });\n                        else if (Z(R, Hs)) a.data = Object.seal({\n                            type: m,\n                            name: n.name,\n                            path: n.path,\n                            segment: it,\n                            smart: N\n                        });\n                        else {\n                            if (S.find((w)=>w.type === Me && w.name === i.name)) {\n                                u = ju, h(), a = [], h(), a = {\n                                    data: null\n                                }, h(), _ = !0, u = ct;\n                                return;\n                            }\n                            a.data = Object.seal({\n                                type: m,\n                                name: n.name,\n                                path: n.path\n                            });\n                        }\n                        a.mutable && (a.data = Object.seal({\n                            ...a.data,\n                            mutable: a.mutable\n                        }));\n                        return;\n                    }\n                    let r = o[e];\n                    if (r === Be) return;\n                    if (r === ze) {\n                        _ = !0, u = vo;\n                        return;\n                    }\n                    a.data.segment !== void 0 && (a.data.segment = s), u = vo;\n                    break;\n                }\n            case ju:\n                {\n                    let t = o[e], { data: s } = a;\n                    if (y(), a.push(s), t === Be) {\n                        h(), a = {\n                            data: null\n                        }, h(), u = ct;\n                        return;\n                    }\n                    if (t === ze) {\n                        let E = a;\n                        y();\n                        let m = S.find((R)=>R.type === Me && R.name === a.data.name);\n                        if (!(m.description?.generics?.length === E.length)) {\n                            b = T | 0, O = c - d | 0, re(`Generic object '${name}' was provided with fewer or more than expect number of types. Expected: ${m.description.generics.length}. Got: ${E.length}`);\n                            return;\n                        }\n                        a.data.name = B(a.data.name, E), y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = o.subarray(e, e + l | 0), r = f(n), i = as;\n                    Y(`${f(Be)} or ${f(ze)}`, r, i);\n                    break;\n                }\n            case vo:\n                {\n                    if (o[e] === ze) {\n                        y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = as;\n                    Y(f(ze), n, r);\n                    break;\n                }\n        }\n    }, ef = (c, o, e, l)=>{\n        switch(u){\n            case el:\n                {\n                    if (o[e] === He) {\n                        let i = Object.seal({\n                            type: Fe,\n                            name: null,\n                            details: null,\n                            path: me,\n                            quantity: {\n                                size: null,\n                                capacity: null\n                            }\n                        });\n                        a = Object.seal({\n                            ...a,\n                            type: i\n                        }), u = tl, h(), a = {\n                            data: null\n                        }, h(), U = mt, u = ct;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ds;\n                    Y(f(He), n, r);\n                    break;\n                }\n            case tl:\n                {\n                    let { data: t } = a;\n                    y(), a.type.name = t.name, a.type.path = t.path, a.type.details = t, _ = !0, u = sl;\n                    break;\n                }\n            case sl:\n                {\n                    if (o[e] !== Ft) {\n                        let s = o.subarray(e, e + l | 0);\n                        b = T | 0, O = c - d | 0;\n                        let n = f(s), r = as;\n                        Y(f(Ft), n, r);\n                        return;\n                    }\n                    let { type: t } = a;\n                    y(), a.data = t;\n                    return;\n                }\n            case _n:\n                {\n                    let t = o.subarray(e, e + l | 0), n = {\n                        type: f(t).replace(/!!$/, \"\"),\n                        path: me,\n                        details: null\n                    };\n                    Z(t, zt) && (n.unsafe = !0), n = Object.seal({\n                        ...n,\n                        name: null,\n                        segment: null\n                    });\n                    let { declarationValue: r, stack: i, procedure: E } = a;\n                    a = Object.seal({\n                        declarationValue: r,\n                        stack: i,\n                        procedure: E,\n                        type: n\n                    }), u = nl;\n                    break;\n                }\n            case nl:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === $e) {\n                        u = ol, h(), a = {\n                            data: null\n                        }, h(), U = mt, u = ct;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = ds;\n                    Y(f($e), s, n);\n                    break;\n                }\n            case ol:\n                {\n                    let { data: t } = a;\n                    y(), Ue(t.name), t.type !== Ce ? a.type.name = t.type : a.type.name = t.name, a.type.path = t.path, a.type.details = t, _ = !0, u = pn;\n                    break;\n                }\n            case Kp:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === Be) {\n                        u = al;\n                        return;\n                    }\n                    if (o[e] === ze) {\n                        u = pn, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = We;\n                    Y(`${Be} or ${f(ze)}`, s, n);\n                    break;\n                }\n            case al:\n                {\n                    if (rt(c, o, e, l)) {\n                        let n = o.subarray(e, e + l | 0), r = f(n);\n                        b = T | 0, O = c - d | 0, qe(r);\n                        return;\n                    }\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    a.type.segment = s, u = pn;\n                    break;\n                }\n            case pn:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === ze) {\n                        let { type: r } = a;\n                        y(), a.data = r;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = as;\n                    Y(f(ze), s, n);\n                    break;\n                }\n            case rl:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = Object.seal({\n                        type: s,\n                        path: null,\n                        name: null,\n                        details: null\n                    }), { declarationValue: r, stack: i, procedure: E } = a;\n                    a = Object.seal({\n                        type: n\n                    }), u = cl;\n                    break;\n                }\n            case cl:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === $e) {\n                        u = ul, h(), a = {\n                            data: null\n                        }, h(), U = mt, u = ct;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = ds;\n                    Y(f($e), s, n);\n                    break;\n                }\n            case ul:\n                {\n                    let { data: t } = a;\n                    y(), Ue(t.name), t.type !== Ce ? a.type.name = t.type : a.type.name = t.name, a.type.path = t.path, a.type.details = t, _ = !0, u = il;\n                    break;\n                }\n            case il:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === ze) {\n                        let { type: r } = a;\n                        y(), a.data = r;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = as;\n                    Y(f(ze), s, n);\n                    break;\n                }\n        }\n    }, tf = (c, o, e, l)=>{\n        switch(u){\n            case rn:\n                {\n                    let t = Object.seal({\n                        type: Mt,\n                        unsafe: null,\n                        smart: null,\n                        value: null\n                    }), s = o.subarray(e, e + l | 0);\n                    Z(s, zt) && (t.unsafe = !0), Z(s, Hs) && (t.smart = !0), a.value = t, u = Ai;\n                    break;\n                }\n            case Ai:\n                {\n                    if (o[e] === pe) {\n                        u = Yu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = ot;\n                    Y(f(pe), s, n);\n                    break;\n                }\n            case Yu:\n                {\n                    let { stack: t, procedure: s } = a, n = o.subarray(e, e + l | 0), r = f(n), i = t.get(r);\n                    i && i.moved && (b = T | 0, O = c - d | 0, re(`Moved variable used as value. Variable '${r}' was used while having been moved before.`)), u = di, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case di:\n                {\n                    if (o[e] === le) {\n                        let { value: r } = a;\n                        y(), a.value.value = Ve(r), y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = ot;\n                    Y(f(le), s, n);\n                    break;\n                }\n            case wu:\n                {\n                    let t = Object.seal({\n                        type: It,\n                        link: null\n                    });\n                    a.value = t, u = Ii;\n                    break;\n                }\n            case Ii:\n                {\n                    if (o[e] === pe) {\n                        u = gu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = ot;\n                    Y(f(pe), s, n);\n                    break;\n                }\n            case gu:\n                {\n                    let { stack: t, procedure: s } = a, n = o.subarray(e, e + l | 0), r = f(n), i = t.get(r);\n                    i && i.moved && (b = T | 0, O = c - d | 0, re(`Moved variable used as value. Variable '${r}' was used while having been moved before.`)), u = Ni, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Ni:\n                {\n                    if (o[e] === le) {\n                        let { value: r } = a;\n                        y(), a.value.link = Ve(r), y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = We;\n                    Y(f(le), s, n);\n                    break;\n                }\n            case Zu:\n                {\n                    let t = Object.seal({\n                        type: Dt,\n                        trail: []\n                    });\n                    a.value = t, u = wo;\n                    break;\n                }\n            case wo:\n                {\n                    if (o[e] === st) {\n                        u = qu;\n                        return;\n                    }\n                    u = go, _ = !0;\n                    break;\n                }\n            case qu:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    a.value.trail.push(s), u = Qu;\n                    break;\n                }\n            case Qu:\n                {\n                    if (o[e] === st) {\n                        u = wo, _ = !0;\n                        return;\n                    }\n                    u = go, _ = !0;\n                    break;\n                }\n            case go:\n                {\n                    u = Et, _ = !0;\n                    break;\n                }\n            case $u:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = S.find((N)=>N.name === s);\n                    if (!n) {\n                        b = T | 0, O = c - d | 0, vs(s);\n                        return;\n                    }\n                    let { description: r } = n, { members: i } = r, E = i.some((N)=>N.name === \"constructor\" && N.type === lt), m = Object.seal({\n                        type: Ie,\n                        explicitConstructor: E,\n                        name: s,\n                        literal: [],\n                        path: n.path\n                    });\n                    a.value = m, u = li;\n                    break;\n                }\n            case li:\n                {\n                    let t = o[e];\n                    if (t === pe) {\n                        u = Bo, _ = !0;\n                        return;\n                    }\n                    if (t === $e) {\n                        u = fi;\n                        return;\n                    }\n                    break;\n                }\n            case fi:\n                {\n                    h(), a = [], u = Ei, _ = !0;\n                    break;\n                }\n            case Ei:\n                {\n                    u = _i, h(), a = {\n                        data: null\n                    }, h(), U = mt, u = ct, _ = !0;\n                    break;\n                }\n            case _i:\n                {\n                    let t = o[e], { data: s } = a;\n                    if (y(), a.push(s), t === Be) {\n                        u = fn;\n                        return;\n                    }\n                    if (t === ze) {\n                        let n = a;\n                        y();\n                        let { value: r } = a, { name: i } = r, E = S.find((m)=>m.type === Me && m.name === i);\n                        if (E) {\n                            if (!(E.description.generics.length === n.length)) {\n                                b = T | 0, O = c - d | 0, re(`Generic procedure '${i}' was provided with fewer or more than expect number of types. Expected: ${genericProcedure.description.generics.length}. Got: ${n.length}`);\n                                return;\n                            }\n                            let N = B(E.name, n);\n                            if (!S.some((R)=>R.name === N)) {\n                                let R = V(E, n);\n                                R.name = N, R.description.generics = [], S.push(R), P(R);\n                            }\n                            r.name = N;\n                        }\n                        u = Bo;\n                        break;\n                    }\n                }\n            case Bo:\n                {\n                    let { value: t } = a, { explicitConstructor: s, ...n } = t;\n                    if (t = Object.seal(n), o[e] === pe) {\n                        if (s) {\n                            u = Si;\n                            return;\n                        }\n                        u = Do;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let i = o.subarray(e, e + l | 0), E = f(i), m = ot;\n                    Y(f(pe), E, m);\n                    break;\n                }\n            case Do:\n                {\n                    if (o[e] === ee) return;\n                    if (o[e] === Be) {\n                        u = Mo;\n                        return;\n                    }\n                    u = Mo, _ = !0;\n                    break;\n                }\n            case Mo:\n                {\n                    if (o[e] === ee) return;\n                    let t = o.subarray(e, e + l | 0), s = f(t), { stack: n, procedure: r } = a;\n                    h();\n                    let i = Object.seal({\n                        name: s,\n                        value: null\n                    });\n                    a = {\n                        procedure: r,\n                        stack: n,\n                        prop: i\n                    }, u = Ku;\n                    break;\n                }\n            case Ku:\n                {\n                    let { stack: t, procedure: s } = a;\n                    if (o[e] === et) {\n                        u = Hu, h(), a = {\n                            stack: t,\n                            procedure: s,\n                            value: null\n                        }, h(), u = Se, U = Ne;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let r = o.subarray(e, e + l | 0), i = f(r), E = As;\n                    Y(f(et), i, E);\n                    break;\n                }\n            case Hu:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { prop: s } = a;\n                    s.value = Ve(t), y();\n                    let n = new Set(Fe, tt, Me);\n                    if (t.type === Ie && !n.has(t.name) && t.path === me) {\n                        let { description: i } = S.find((m)=>m.name === a.value.name), E = i.members.find((m)=>m.name === s.name);\n                        s.value = {\n                            ...s.value,\n                            name: E.data.name\n                        };\n                    }\n                    if (a.value.literal.push(s), o[e] === Be) {\n                        u = Do;\n                        return;\n                    }\n                    _ = !0, u = zu;\n                    break;\n                }\n            case zu:\n                {\n                    if (o[e] === ee) {\n                        u = Fo;\n                        return;\n                    }\n                    _ = !0, u = Fo;\n                    break;\n                }\n            case Fo:\n                {\n                    let t = o[e];\n                    if (b = T | 0, O = c - d | 0, t === le) {\n                        let j = function($, ie) {\n                            let Ae = new Set($.map((se)=>se.name));\n                            for (let se of ie)if (!Ae.has(se.name)) return se.name;\n                            return null;\n                        }, i = ($)=>{\n                            let ie = new Set;\n                            for (let Ae of $){\n                                if (ie.has(Ae.name)) return Ae.name;\n                                ie.add(Ae.name);\n                            }\n                            return !1;\n                        }, { value: E } = a, { literal: m } = E, N = S.find(($)=>$.name === E.name && $.type === Me), R = i(m);\n                        if (R) {\n                            re(`Propery ${R} of ${N.name} was initialized multiple times during object declaration. Please remove unnecessary value.`);\n                            return;\n                        }\n                        let F = N.description.members.filter(($)=>$.type !== lt), w = N.description.members.filter(($)=>$.type !== lt && $.value === void 0), H = j(m, w);\n                        if (H) {\n                            re(`Property '${H}' of '${N.name}' is missing in object initialization whilst not having a default value in definition. Please give a value in initialization or provide a default value in type definition`);\n                            return;\n                        }\n                        for (let $ of m){\n                            let ie = ue($.value), Ae = m.indexOf($), se = F.find((x)=>x.name === $.name);\n                            se || re(`Invalid member name. Name ${$.name} does not exist on object ${N.name}`), ie.data.type !== Ie && ie.data.name !== se.data.name && re(`Type mismatch in input for Object ${N.name}. At index ${Ae}, expected ${se.data.name} but received ${ie.data.name}.`);\n                        }\n                        y();\n                        return;\n                    }\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = We;\n                    Y(f(le), n, r);\n                    break;\n                }\n            case Si:\n                {\n                    let i = function(m) {\n                        console.log(m);\n                        let N = m.data.name;\n                        if (N === Yn) return {\n                            type: Mt,\n                            value: i({\n                                data: m.data.details\n                            })\n                        };\n                        if (N === ws) return {\n                            type: ws,\n                            layout: f(Kn),\n                            value: i({\n                                data: m.data.details\n                            })\n                        };\n                        let R = S.find((F)=>F.name === N);\n                        if (R.type === Me) {\n                            let F = [], { members: w } = R.description;\n                            console.log(r, w);\n                            for (let j of w)if (j.data) {\n                                let H = `${j.data.path}.${j.data.name}`;\n                                if (r.has(H)) console.log(\"aslreadyh exisistng \\u{1F923}\\u{1F979}\\u{1F972}\\u{1F480}\"), F.push({\n                                    name: j.name,\n                                    value: r.get(H)\n                                });\n                                else {\n                                    let $ = i(j);\n                                    F.push({\n                                        name: j.name,\n                                        value: $\n                                    }), r.set(H, $);\n                                }\n                            }\n                            return {\n                                type: Ie,\n                                name: N,\n                                literal: F,\n                                path: m.data.path\n                            };\n                        } else {\n                            if (m.data.type === Fe) return {\n                                type: Ie,\n                                literal: [],\n                                name: N,\n                                layout: Fe,\n                                path: m.data.path\n                            };\n                            if (m.data.type === tt) {\n                                let F = parseInt(m.data.length, 10);\n                                return {\n                                    type: Ie,\n                                    literal: Array(F).fill(it),\n                                    name: N,\n                                    path: m.data.path\n                                };\n                            } else return {\n                                type: Ie,\n                                literal: Hp,\n                                name: N,\n                                path: m.data.path\n                            };\n                        }\n                    }, { value: t } = a, { literal: s, name: n } = t, r = new Map, E = S.find((m)=>m.name === n);\n                    if (E) {\n                        let { description: m } = E, { members: N } = m;\n                        for (let se of N)se.data && s.push({\n                            name: se.name,\n                            value: i(se)\n                        });\n                        y(), y();\n                        let { stack: R, procedure: F, statements: w, declarationValue: j, inferenceValue: H } = a, $ = j?.target.name;\n                        if (!$) {\n                            $ = \"literalObjectConstructor\";\n                            let se = ue(t), { literal: x, ...Q } = se.data, { locals: te } = F.description;\n                            te.push({\n                                name: $,\n                                data: Q\n                            }), R.set($, Q);\n                        }\n                        H && (H.data = {\n                            type: Ce,\n                            name: n,\n                            path: E.path\n                        }, H.mutable && (H.data.mutable = H.mutable), $ && a.stack.set($, H.data)), j && (j.source = t, w.push(j)), h();\n                        let ie = Object.seal({\n                            type: $t,\n                            name: [\n                                $,\n                                gs\n                            ],\n                            path: E.path,\n                            inputs: []\n                        }), Ae = Object.seal({\n                            type: Ha,\n                            expression: ie\n                        });\n                        a = {\n                            stack: R,\n                            procedure: F,\n                            drop: Ae,\n                            value: ie\n                        }, u = Wo, U = ge, _ = !0;\n                        return;\n                    }\n                    break;\n                }\n            case Wo:\n                {\n                    let { stack: t, procedure: s } = a, n = o[e];\n                    if (n === ee) return;\n                    if (n === le) {\n                        u = Jo, _ = !0;\n                        return;\n                    }\n                    u = hi, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case hi:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { value: s, stack: n, procedure: r } = a, { inputs: i } = s;\n                    i.push(Ve(t)), u = xi, _ = !0;\n                    break;\n                }\n            case xi:\n                {\n                    let t = o[e];\n                    if (t === ee) return;\n                    if (t === le) {\n                        u = Jo, _ = !0;\n                        return;\n                    }\n                    if (t === Be) {\n                        u = Wo;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = Er;\n                    Y(`${f(Be)} or ${f(le)}`, n, r);\n                    break;\n                }\n            case Jo:\n                {\n                    let { value: t, stack: s } = a, n = s.get(t?.name[0]);\n                    if (n) {\n                        let r = S.find((N)=>N.name === n.name), i = r.description.members.find((N)=>N.name === gs), E = t.inputs.filter((N)=>N.type === Ie);\n                        for (let N of E){\n                            let R = t.inputs.indexOf(N);\n                            R >= 0 && t.inputs[R] && (t.inputs[R] = {\n                                ...t.inputs[R],\n                                name: i.description.inputs[R]?.data?.name || N.name,\n                                path: i.description.inputs[R]?.data?.path || N.path\n                            });\n                        }\n                        let m = t.inputs.map((N)=>ue(N)) || [];\n                        if (i.description.inputs.length !== m.length) {\n                            b = T | 0, O = c - d | 0, re(`Mismatching number of parameters passed to constructor of object '${r.name}'. Expected: ${i.description.inputs.length}, Got: ${m.length}`);\n                            return;\n                        }\n                        for (let N of i.description.inputs){\n                            let R = i.description.inputs.indexOf(N);\n                            if (N.data.name !== m[R].data.name) {\n                                b = T | 0, O = c - d | 0, re(`Input type mismatch on index '${R + 1}'. '${r.name}' expected ${N.data.name}, but was provided with a rather ${m[R].data.name}`);\n                                return;\n                            }\n                        }\n                    }\n                    u = Pi;\n                    break;\n                }\n            case Pi:\n                {\n                    if (o[e] === ee) {\n                        let { drop: N } = a;\n                        y();\n                        let { statements: R } = a;\n                        R || y(), R && R.push(N), y();\n                        return;\n                    }\n                    let { value: s, stack: n, procedure: r } = a, i = y();\n                    if (u === Zo) {\n                        h(), a = {\n                            stack: n,\n                            procedure: r,\n                            value: s\n                        }, _ = !0;\n                        return;\n                    }\n                    g.push(i);\n                    let { drop: E } = a;\n                    y();\n                    let { statements: m } = a;\n                    m || y(), m && m.push(E), y(), f(ee);\n                    return;\n                }\n            case yo:\n                {\n                    let { stack: t } = a, s = o[e], n = o.subarray(e, e + l | 0), r = f(n);\n                    if (t && t.has(r) && t.get(r)?.type && !Vt) {\n                        let F = t.get(r);\n                        if (F && (F.moved && (b = T | 0, O = c - d | 0, re(`Moved variable used as value. Variable '${r}' was used while having been moved before.`)), F.freed)) {\n                            b = T | 0, O = c - d | 0, re(`Attempted to use '${r}', which has been freed. Ensure links are valid before use.`);\n                            return;\n                        }\n                        let w = Object.freeze({\n                            type: xe,\n                            name: r\n                        });\n                        a.value = w, u = Et;\n                        return;\n                    }\n                    let i = (F)=>{\n                        let w = g[F];\n                        if (w.item.target) {\n                            let j = w.item.target, H = m.item.stack.get(j.name);\n                            if (H) return H.name;\n                        } else return w.item.value?.type === \"expression\" ? i(F - 1) : null;\n                    }, E = g.length, m = g[E - 2], N;\n                    if (m.item.target) {\n                        let F = m.item.target;\n                        if (F.name || F.trail?.length === 1) {\n                            let w = m.item.stack.get(F.name || F.trail[0]);\n                            w && (N = F.name ? w.name : w.data?.name);\n                        }\n                        if (F.trail?.length > 1) {\n                            let w = JSON.parse(JSON.stringify(F.trail)), j = m.item.stack.get(F.trail[0]), H = S.find((ie)=>ie.name === j.data.name && ie.path === j.data.path), $ = 1;\n                            for(let ie = 1; ie < w.length; ie++)j = H.description.members.find((Ae)=>Ae.name === w[ie]), ie < w.length - 1 && (H = S.find((Ae)=>Ae.name === j.data.name && Ae.path === j.data.path));\n                            N = j.data.name;\n                        }\n                    } else m.item.value?.type === \"expression\" && (N = i(E - 4));\n                    if (Ds(c, o, e, l) && !Vt) {\n                        let F = r.replaceAll(\"_\", \"\"), w = Rt(F), j = Object.freeze({\n                            type: Ie,\n                            literal: F,\n                            name: N || w,\n                            path: me\n                        });\n                        if (!w) {\n                            b = T | 0, O = c - d | 0;\n                            let H = o.subarray(e, e + l | 0), $ = f(H);\n                            Y(\"value\", $, Is);\n                        }\n                        Ue(j.name), a.value = j, u = Et;\n                        return;\n                    }\n                    if (bn(r) && !Vt) {\n                        let F = Object.freeze({\n                            type: Ie,\n                            literal: r,\n                            name: Kt,\n                            path: me\n                        });\n                        a.value = F, Ue(F.name), u = Et;\n                        return;\n                    }\n                    if (Wn.includes(s)) {\n                        u = Yi, _ = !0;\n                        return;\n                    }\n                    let R = f(n);\n                    if (Ip.includes(s)) {\n                        if (Vt) if (Xn.includes(s)) {\n                            if (Vt = !1, u = Et, a.value.literal.length > 1) {\n                                b = T | 0, O = c - d | 0, re(\"Type Mismatch: Use single quotes for a Char (one character) in Flogram. For Strings, use double quotes or ensure there's only one character within single quotes.\");\n                                return;\n                            }\n                        } else b = T | 0, O = c - d | 0, Y(`${f(Xn[0])} or ${f(Xn[1])}`, R, []);\n                        else !Vt && zn.includes(s) ? Vt = !0 : (b = T | 0, O = c - d | 0, Y(`${f(zn[0])} or ${f(zn[1])}`, R, []));\n                        return;\n                    }\n                    if (Vt) {\n                        let F = Object.freeze({\n                            type: Ie,\n                            literal: r,\n                            name: Os,\n                            path: me\n                        });\n                        Ue(F.name), a.value = F;\n                        return;\n                    }\n                    if (o[e] === He) {\n                        u = jo, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0, vs(r), y();\n                    break;\n                }\n            case Yi:\n                {\n                    let t = o[e];\n                    if (Wn.includes(t)) {\n                        u = Qo;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(ls), n, r);\n                    break;\n                }\n            case Qo:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (l === 0) return;\n                    if (u = gi, o[e] === $e) {\n                        _ = !0;\n                        return;\n                    }\n                    let n = Object.seal({\n                        type: Ie,\n                        literal: s,\n                        name: tt,\n                        path: me\n                    });\n                    Jn.includes(o[e]) && (n.literal = \"\", _ = !0), a.value && a.value.type === es ? a.value.values.push(n) : a.value = n, Ue(n.name), Ue(Je);\n                    break;\n                }\n            case gi:\n                {\n                    let { stack: t, procedure: s } = a;\n                    if (Jn.includes(o[e])) {\n                        if (a.value.type === es && Jn.includes(o[e + 1])) {\n                            u = wi;\n                            return;\n                        }\n                        y();\n                        return;\n                    } else if (o[e] === $e) {\n                        if (e > 0 && o[e - 1] === Ap) {\n                            u = xo, h();\n                            let m = Object.freeze({\n                                name: tt,\n                                literal: \"{\",\n                                type: Ie,\n                                path: me\n                            });\n                            a = Object.seal({\n                                procedure: s,\n                                stack: t,\n                                value: m,\n                                omitLast: !0\n                            }), _ = !0;\n                            return;\n                        }\n                        u = xo, h(), a = Object.seal({\n                            procedure: s,\n                            stack: t,\n                            value: null\n                        }), h(), U = Ne, u = Se;\n                        return;\n                    }\n                    console.log(\"what did we find here??!!!\"), b = T | 0, O = c - d | 0;\n                    let n = o.subarray(e, e + l | 0), r = f(n), i = ot;\n                    if (Z(n, Ht)) {\n                        b -= 1;\n                        let E = f(ee);\n                        Y(f(ls), E, i);\n                        return;\n                    }\n                    Y(`'${f(ze)}' or '${f(ls)}'`, r, i);\n                    break;\n                }\n            case xo:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), { value: n, omitLast: r } = a;\n                    if (y(), !a.value || a.value.type !== es) {\n                        let E = Object.seal({\n                            type: es,\n                            values: []\n                        });\n                        a.value && E.values.push(a.value), a.value = E;\n                    }\n                    let i = a.value.values.length;\n                    if (r && i > 0 && a.value.values[i - 1].type === Ie) {\n                        let E = a.value.values[i - 1], m = E.literal, N = {\n                            ...E,\n                            literal: m.slice(0, -1)\n                        };\n                        a.value.values.pop(), a.value.values.push(N);\n                    }\n                    a.value.values.push(n), u = Qo;\n                    break;\n                }\n            case wi:\n                {\n                    y();\n                    break;\n                }\n            case qo:\n                {\n                    h(), u = Li, a = {\n                        data: null\n                    }, h(), U = mt, u = ct, _ = !0;\n                    break;\n                }\n            case Li:\n                {\n                    let t = o[e], { data: s } = a;\n                    y();\n                    let { stack: n, procedure: r } = a, i = Object.seal({\n                        type: Ie,\n                        literal: [],\n                        name: s.name,\n                        quantity: {\n                            size: null,\n                            capacity: null\n                        },\n                        layout: s.type,\n                        path: s.path\n                    });\n                    if (h(), a = {\n                        stack: n,\n                        procedure: r,\n                        value: i\n                    }, t === pe) {\n                        u = Ri;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = ot;\n                    Y(f(pe), m, N);\n                    break;\n                }\n            case Ri:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(Qa, t)) {\n                        u = ki;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = eo;\n                    Y(f(Qa), s, n);\n                    break;\n                }\n            case ki:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (Z(Gs, t)) {\n                        u = Ci;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = f(t), n = As;\n                    Y(f(Gs), s, n);\n                    break;\n                }\n            case Ci:\n                {\n                    let { procedure: t, stack: s } = a;\n                    if (rt(c, o, e, l)) {\n                        let n = o.subarray(e, e + l | 0), r = f(n);\n                        b = T | 0, O = c - d | 0, qe(r);\n                        return;\n                    }\n                    u = yi, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        value: null\n                    }), h(), U = Ne, u = Se, _ = !0;\n                    break;\n                }\n            case yi:\n                {\n                    let { value: t } = a;\n                    y(), a.value.length = {\n                        capacity: t,\n                        size: t\n                    };\n                    let s = o[e];\n                    if (s === Be) {\n                        let { stack: E, procedure: m } = a, N = [];\n                        h(), a = {\n                            stack: E,\n                            procedure: m,\n                            value: N\n                        }, u = Ui;\n                        return;\n                    }\n                    if (s === le) {\n                        let { value: E } = a;\n                        y(), a.value = E, u = Et;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = o.subarray(e, e + t | 0), r = f(n), i = We;\n                    Y(`${f(Be)} or ${f(le)}`, r, i);\n                    break;\n                }\n            case Ui:\n                {\n                    if (o[e] === He) {\n                        u = Bi;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = xn;\n                    Y(f(He), s, n);\n                    break;\n                }\n            case Bi:\n                {\n                    if (u = vi, o[e] === Ft) return;\n                    _ = !0;\n                    break;\n                }\n            case vi:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (o[e] === le) {\n                        let { value: s } = a;\n                        y();\n                        let { value: n } = a;\n                        y(), n.literal = s, a.value = n, y();\n                        return;\n                    }\n                    h(), u = En, _ = !0;\n                    break;\n                }\n            case jo:\n                {\n                    if (o[e] === He) {\n                        a.value = Object.seal({\n                            quantity: {\n                                size: null,\n                                capacity: null\n                            },\n                            data: []\n                        }), u = Et, h(), u = En;\n                        return;\n                    }\n                    break;\n                }\n            case En:\n                {\n                    let { stack: t, procedure: s } = a;\n                    if (o[e] === ee) return;\n                    if (u = Zo, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, o[e] === Ft) {\n                        _ = !0;\n                        break;\n                    }\n                    h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Zo:\n                {\n                    let t = o[e], { value: s } = a;\n                    if (y(), s !== null && a.value.data.push(s), t === Be) {\n                        u = En;\n                        return;\n                    }\n                    if (t === ee) {\n                        let { procedure: n, stack: r } = a;\n                        h(), a = {\n                            procedure: n,\n                            stack: r,\n                            value: null\n                        }, h(), u = $i;\n                        return;\n                    }\n                    if (t === Ft) {\n                        if (o[e + 1] === pe) {\n                            a.value.quantity.size = Object.seal({\n                                type: Ie,\n                                name: Je,\n                                literal: `${a.value.data.length}`,\n                                path: me\n                            }), u = zi;\n                            return;\n                        }\n                        a.value.quantity.size = Object.seal({\n                            type: Ie,\n                            name: Je,\n                            literal: `${a.value.data.length}`,\n                            path: me\n                        }), a.value.quantity.capacity = Object.seal({\n                            type: Ie,\n                            name: Je,\n                            literal: `${Math.max(a.value.data.length * 2, sp)}`,\n                            path: me\n                        }), u = ea, _ = !0;\n                        return;\n                    }\n                    break;\n                }\n            case zi:\n                {\n                    if (o[e] !== pe) {\n                        b = T | 0, O = c - d | 0;\n                        let t = o.subarray(e, e + l | 0), s = f(t), n = We;\n                        Y(`${f(le)}`, s, n);\n                        return;\n                    }\n                    u = Xi;\n                    break;\n                }\n            case Xi:\n                {\n                    let t = o.subarray(e, e + l | 0);\n                    if (!Z(t, ur)) {\n                        b = T | 0, O = c - d | 0;\n                        let s = o.subarray(e, e + l | 0), n = f(s), r = We;\n                        Y(`${f(ur)}`, n, r);\n                        return;\n                    }\n                    u = Wi;\n                    break;\n                }\n            case Wi:\n                {\n                    let { stack: t, procedure: s } = a;\n                    if (o[e] !== et) {\n                        b = T | 0, O = c - d | 0;\n                        let r = o.subarray(e, e + l | 0), i = f(r);\n                        Y(et, i, []);\n                        return;\n                    }\n                    u = Ji, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne;\n                    break;\n                }\n            case Ji:\n                {\n                    if (o[e] !== le) {\n                        b = T | 0, O = c - d | 0;\n                        let s = o.subarray(e, e + l | 0), n = f(s), r = We;\n                        Y(`${f(le)}`, n, r);\n                        return;\n                    }\n                    let { value: t } = a;\n                    y(), a.value.quantity.capacity = t, u = ea, _ = !0;\n                    break;\n                }\n            case ea:\n                {\n                    let t = g.length, s = g[t - 3], n = s.item.declarationValue?.target, r = s.item.stack.get(n?.name);\n                    if (s.situationSection !== qo) {\n                        let i = !1, E;\n                        if (!r) {\n                            if (a.value?.length >= 1 || a.value?.data?.length >= 1) if (E = ue(a.value[0] || a.value?.data[0]), E) {\n                                (E.data.layout === Fe || E.data.type === Fe || Array.isArray(E.data.literal)) && (i = !0);\n                                for(let N = 1; N < a.value.length; N++){\n                                    let R = ue(a.value[N]);\n                                    if ((R.data.layout === Fe || R.data.type === Fe || Array.isArray(R.data.literal)) && (i = !0), R.data.name !== E.data.name || R.data.path !== E.data.path) {\n                                        b = T | 0, O = c - d | 0, re(`Type mismatch in array initialization. Expected all items to be of type ${E.data.name} from ${E.data.path}, but found type ${R.data.name} from ${R.data.path} at position ${N}. Ensure all items in the array have the same type.`);\n                                        return;\n                                    }\n                                }\n                            } else {\n                                b = T | 0, O = c - d | 0;\n                                let N = o.subarray(e, e + l | 0), R = f(N);\n                                Y(\"Inferred Type\", R, Is);\n                                return;\n                            }\n                            else E = {\n                                data: {\n                                    name: \"FP32\",\n                                    path: \"Flogram\"\n                                }\n                            };\n                            Ue(E.data.name);\n                        }\n                        if (a.value.quantity.capacity.type === Ie && a.value.data.length > parseInt(a.value.quantity.capacity.literal, 10)) {\n                            b = T | 0, O = c - d | 0, re(`ValueError: Too much data for an array. Array is defined to have a maximum of ${r.length} but value assigned has ${a.value.length}. Consider increasing size of the array or reducing the number of elements.`);\n                            return;\n                        }\n                        let m = Object.freeze({\n                            type: Ie,\n                            name: r?.name || E.data.name,\n                            path: r?.path || E.data.path,\n                            literal: a.value.data,\n                            quantity: a.value.quantity,\n                            layout: Fe,\n                            contains: i ? Fe : null\n                        });\n                        Ue(Je), a.value = m;\n                    }\n                    y();\n                    return;\n                }\n            case $i:\n                {\n                    o[e] !== ee && (y(), _ = !0);\n                    break;\n                }\n            case Et:\n                {\n                    let t = o[e], s = o.subarray(e, e + l | 0);\n                    if (Mn(s)) {\n                        u = Ki, _ = !0;\n                        return;\n                    }\n                    if (t === st) {\n                        let { procedure: n, stack: r, value: i } = a, E = [], m = Object.freeze({\n                            type: dt,\n                            value: i,\n                            trail: E\n                        });\n                        a.value = m, h(), a = Object.seal({\n                            stack: r,\n                            trail: E,\n                            value: i,\n                            procedure: n\n                        }), u = Uo;\n                        return;\n                    } else if (t === He) {\n                        let { value: n } = a, r = Object.seal({\n                            type: Ys,\n                            array: n,\n                            index: null\n                        });\n                        ue(n)?.data.name === tt && Ue(Os), a.value = r, _ = !0, u = Yo;\n                        return;\n                    } else if (t === pe && a.value.type === Dt) {\n                        let n = z(0);\n                        if (n) {\n                            let r = [\n                                a.value.type,\n                                ...a.value.trail\n                            ], i = q(n, a.value.trail);\n                            if (Te) {\n                                a.value = Object.seal({\n                                    type: $t,\n                                    name: r,\n                                    path: i.path,\n                                    inputs: []\n                                }), u = un, _ = !0;\n                                return;\n                            }\n                        }\n                    }\n                    y(), _ = !0;\n                    break;\n                }\n            case Vu:\n                {\n                    if (o[e] !== st) {\n                        let s = o.subarray(e, e + l | 0), n = f(s);\n                        y(), _ = !0;\n                        return;\n                    }\n                    u = Uo;\n                    break;\n                }\n            case Uo:\n                {\n                    let { stack: t, value: s, trail: n } = a, r = o.subarray(e, e + l | 0), i = f(r), E, m, N = !1, R = ()=>{\n                        n.push(i), u = Vu;\n                    };\n                    try {\n                        let j = ue(s);\n                        j && (E = j.data);\n                    } catch (j) {\n                        console.error(j);\n                    }\n                    let F = S.find((j)=>j.name === E.name);\n                    if (F.type === Bt && F.description.labels.find((H)=>H.props.find(($)=>$.name === i))) {\n                        R();\n                        return;\n                    }\n                    let w = F?.description?.members?.find((j)=>j.data && S.find((H)=>H.type === Me && H.name === j.data.name && H.path === j.data.path));\n                    if ((s.type === xe || s.type === It || s.type === Mt || M(s)) && (!E || w)) {\n                        let j = ye(s);\n                        if (n.length === 0) E = t.get(j);\n                        else {\n                            let H = n.length - 1, $ = t.get(j), ie = S.find((te)=>te.name === $.name), { description: Ae } = ie, { members: se } = Ae, x = se.find((te)=>te.name === n[H]), { data: Q } = x;\n                            if (E = Q, Q.freed) {\n                                b = T | 0, O = c - d | 0, re(`Attempted to use '${n.join(\".\")}', which has been freed. Ensure links are valid before use.`);\n                                return;\n                            }\n                        }\n                    }\n                    if (E) {\n                        let { name: j, path: H } = E, $ = `${H}.${j}`, ie = p.get($);\n                        ie.type === Me && (m = ie);\n                    }\n                    if (m) {\n                        let { description: j } = m, { members: H } = j;\n                        for (let $ of H)if ($.name === i) {\n                            N = !0;\n                            break;\n                        }\n                        if (!N) {\n                            b = T | 0, O = c - d | 0, Ot(i, s.name);\n                            return;\n                        }\n                    }\n                    if (s.value === ft || s.link === ft) {\n                        if (!t.get(i)) {\n                            b = T | 0, O = c - d | 0, Ot(i, `${ft}(current object in definition)`);\n                            return;\n                        }\n                        N = !0;\n                    }\n                    if (!N) {\n                        b = T | 0, O = c - d | 0, Ot(i, s.name);\n                        return;\n                    }\n                    R();\n                    break;\n                }\n            case Xu:\n                {\n                    let { stack: t } = a, s = o.subarray(e, e + l | 0), n = f(s);\n                    if (t.has(n)) {\n                        let r = Object.seal({\n                            type: Ys,\n                            array: {\n                                type: xe,\n                                name: n\n                            },\n                            index: null\n                        });\n                        a.value = r, ue(r.array)?.data.name === tt && Ue(Os);\n                    }\n                    u = Yo;\n                    break;\n                }\n            case Yo:\n                {\n                    if (o[e] === He) {\n                        u = Wu;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = xn;\n                    Y(f(He), n, r);\n                    break;\n                }\n            case Wu:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = Ju, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case Ju:\n                {\n                    if (o[e] === Ft) {\n                        let { value: i } = a;\n                        y();\n                        let E = ue(i);\n                        if (E.data.mutable && i.type !== dt ? a.value.index = Object.seal({\n                            type: It,\n                            link: i\n                        }) : a.value.index = i, !E || ![\n                            Je,\n                            \"U32\",\n                            \"I16\",\n                            \"U16\",\n                            \"U8\",\n                            \"I8\"\n                        ].includes(E.data.name)) {\n                            b = T | 0, O = c - d | 0, re(\"Invalid index. Array index must be a valid I32 variable\");\n                            return;\n                        }\n                        u = Et;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = mr;\n                    Y(f(Ft), n, r);\n                    break;\n                }\n            case cn:\n                {\n                    let { stack: t } = a, s = o.subarray(e, e + l | 0), n = f(s), r = D.find((E)=>E.type === lt && E.name === n), i = Object.seal({\n                        type: $t,\n                        name: n,\n                        path: r?.path || me,\n                        inputs: []\n                    });\n                    if (a.value = i, t.has(n)) {\n                        a.value.name = [\n                            n\n                        ], u = Vo;\n                        return;\n                    } else if (n === ft) {\n                        a.value.name = [\n                            Dt\n                        ], u = Vo;\n                        return;\n                    }\n                    u = Xo;\n                    break;\n                }\n            case Vo:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = o[e];\n                    if (n === st) return;\n                    if (n === pe) {\n                        if (a.value.name[0] === Dt) {\n                            let r = z(0);\n                            a.value.path = r.path + \".\" + r.name;\n                        }\n                        u = Xo, _ = !0;\n                        return;\n                    }\n                    if (rt(c, o, e, l)) {\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    a.value.name.push(s);\n                    break;\n                }\n            case Xo:\n                {\n                    let t = o[e];\n                    if (t === pe) {\n                        u = un, _ = !0;\n                        return;\n                    }\n                    if (t === $e) {\n                        u = ui;\n                        return;\n                    }\n                    break;\n                }\n            case un:\n                {\n                    if (o[e] === pe) {\n                        u = ln;\n                        return;\n                    }\n                    break;\n                }\n            case ui:\n                {\n                    h(), a = [], u = fn, _ = !0;\n                    break;\n                }\n            case fn:\n                {\n                    u = ii, h(), a = {\n                        data: null\n                    }, h(), U = mt, u = ct, _ = !0;\n                    break;\n                }\n            case ii:\n                {\n                    let t = o[e], { data: s } = a;\n                    if (y(), a.push(s), t === Be) {\n                        u = fn;\n                        return;\n                    }\n                    if (t === ze) {\n                        let n = a;\n                        y();\n                        let { value: r } = a, { name: i } = r, E = D.find((m)=>m.type === lt && m.name === i);\n                        if (E) {\n                            if (!(E.description.generics.length === n.length)) {\n                                b = T | 0, O = c - d | 0, re(`Generic procedure '${i}' was provided with fewer or more than expect number of types. Expected: ${E.description.generics.length}. Got: ${n.length}`);\n                                return;\n                            }\n                            let N = B(E.name, n);\n                            if (!D.some((R)=>R.name === N)) {\n                                let R = V(E, n);\n                                R.name = N, R.description.generics = [], Re(R);\n                            }\n                            r.name = N;\n                        }\n                        u = un;\n                        break;\n                    }\n                }\n            case ln:\n                {\n                    let t = o[e], s = o.subarray(e, e + l | 0), { procedure: n, stack: r } = a;\n                    if (t === ee) return;\n                    if (Z(s, Xt)) {\n                        h(), a = Object.seal({\n                            procedure: n,\n                            stack: r,\n                            mutable: !0\n                        });\n                        return;\n                    }\n                    if (t === le) {\n                        let i = a.value?.inputs?.map((H)=>ue(H)) || [], { value: E } = a, { name: m } = E;\n                        if (i.indexOf(void 0) != -1) {\n                            b = T | 0, O = c - d | 0, re(`Unkown/Invalid value type given as value to function '${m}' at index ${i.indexOf(void 0)}`);\n                            return;\n                        }\n                        !i.find((H)=>H?.data.path !== me) && Gt[m] && (E.path = me);\n                        let [R, ...F] = i, w = i.find((H)=>H?.data.type != Ie) || R, j = Gt[m];\n                        if (j && E.path === me) {\n                            let H = j.find(($)=>$.description && Array.isArray($.description.inputs) ? $.description.inputs.length !== i.length ? !1 : $.description.inputs.every((ie, Ae)=>ie.data.name === i[Ae].data.name) : !1);\n                            if (j) {\n                                for(let $ = 0; $ < i.length; $++)if (i[$].data.name != w.data.name) {\n                                    if (i[$].data.type === Ie && Ms(w.data.name, i[$].data.name)) {\n                                        expression.inputs[$] = Object.freeze({\n                                            ...expression.inputs[$],\n                                            name: w.data.name\n                                        }), i[$].data.name = w.data.name;\n                                        continue;\n                                    }\n                                    b = T | 0, O = c - d | 0, In(i.map((ie)=>ie.data?.name)?.join(\", \"));\n                                    return;\n                                }\n                            }\n                            if (H) Re(H), _t.set(m, H);\n                            else if (i.length >= 1) {\n                                if (i.some(($)=>$.data.name !== R.data.name)) {\n                                    b = T | 0, O = c - d | 0, In(i.map(($)=>$.data?.name)?.join(\", \"));\n                                    return;\n                                }\n                                if (i[0]?.data.type === Ut) {\n                                    let $ = j.find((Ae)=>Ae.description.inputs.length === i.length && i.length > 0 ? Ae.description.inputs[0].data.name === mn : !0), ie = JSON.parse(JSON.stringify($).replace(new RegExp(mn, \"g\"), i[0].data.name));\n                                    Re(ie), _t.set(m, ie);\n                                } else if (!ht.includes(R.data.name) || F.some(($)=>!ht.includes($.data.name))) {\n                                    let $ = S.find((Ae)=>Ae.name === R.data.name), ie = F.map((Ae)=>S.find((se)=>se.name === Ae.data.name));\n                                    if ($ && ie.every(Boolean) && jt($, ie, j, m)) {\n                                        let Ae = S.find((x)=>x.name === i[0].data.name && x.path === i[0].data.path && x.type === Me), se = (x)=>{\n                                            let Q = S.find((oe)=>oe.name === x.data.name && oe.path === x.data.path), { members: te } = Q.description;\n                                            te.forEach((oe)=>{\n                                                ht.includes(oe.data.name) ? Re(j.find((Tt)=>Tt.description.inputs[0].data.name === oe.data.name)) : se(oe);\n                                            });\n                                        };\n                                        if (Ae && [\n                                            \"==\",\n                                            \"!=\"\n                                        ].includes(m)) {\n                                            let { members: x } = Ae.description;\n                                            x.forEach((Q)=>{\n                                                ht.includes(Q.data.name) ? Re(j.find((te)=>te.description.inputs[0].data.name === Q.data.name)) : se(Q);\n                                            });\n                                        } else if (!(i[0].data.name === tt && [\n                                            \"==\",\n                                            \"!=\",\n                                            \">\",\n                                            \">=\",\n                                            \"<\",\n                                            \"<=\"\n                                        ].includes(m))) {\n                                            b = T | 0, O = c - d | 0, Ct(`${i.map((x)=>x.data.name)?.join(\", \")} for function ${m}`);\n                                            return;\n                                        }\n                                    }\n                                } else {\n                                    b = T | 0, O = c - d | 0, Ct(`${i.map(($)=>$.data.name)?.join(\", \")} for function ${m}`);\n                                    return;\n                                }\n                            } else {\n                                b = T | 0, O = c - d | 0, Ct(`${i.map(($)=>$.data.name)?.join(\", \")} for function ${m}`);\n                                return;\n                            }\n                        } else if (m === J_ || m === Vs) {\n                            if (m === Vs && i.length !== 0) {\n                                b = T | 0, O = c - d | 0, pa(0, i.length, m);\n                                return;\n                            }\n                        } else if (typeof m === Me && m[0] === Dt) {\n                            let H = z(0);\n                            if (!H || !q(H, m.slice(1))) {\n                                b = T | 0, O = c - d | 0, dn(m);\n                                return;\n                            }\n                        } else {\n                            let H, $ = D.find((se)=>se.type === lt && se.name === m);\n                            if (typeof m === Me && a.stack.has(m[0])) {\n                                let se = m[m.length - 2] || m[0], x = a.stack.get(se);\n                                if (x) {\n                                    let Q = S.find((te)=>te.type === Me && te.name === x.name);\n                                    Q && (a.value.path = Q.path, H = Q.description.members.find((te)=>te.type === lt && te.name === m[m.length - 1]));\n                                }\n                            }\n                            let ie = a.procedure.name === m ? a.procedure : null, Ae = H || $ || ie;\n                            if (Ae) {\n                                let { description: se } = Ae, { inputs: x } = se, { value: Q } = a, { inputs: te } = Q;\n                                if (x.length !== te.length) {\n                                    b = T | 0, O = c - d | 0, pa(x.length, i.length, m);\n                                    return;\n                                }\n                                for(let oe = 0; oe < x.length; oe++){\n                                    let Tt = ue(te[oe]);\n                                    if (Tt) {\n                                        if (x[oe].data.name !== Tt.data.name) {\n                                            b = T | 0, O = c - d | 0, re(`The procedure '${typeof m == \"object\" ? m.join(\".\") : m}' received an input of incorrect type at position ${oe + 1}. Expected: '${x[oe].data.name}', but received: '${Tt.data.name}'.`);\n                                            return;\n                                        }\n                                        if (x[oe].data.mutable && !Tt.data.mutable && !te[oe].mutable) {\n                                            b = T | 0, O = c - d | 0, re(`The procedure '${typeof m == \"object\" ? m.join(\".\") : m}' received an immutable input at position ${oe + 1} while it expects a mutable input. Expected: mutable '${x[oe].data.name}', received: immutable '${Tt.data.name}'.`);\n                                            return;\n                                        }\n                                        x[oe].data.mutable && Tt.data.mutable;\n                                    } else {\n                                        b = T | 0, O = c - d | 0, Ct(te[oe]);\n                                        return;\n                                    }\n                                }\n                            } else {\n                                b = T | 0, O = c - d | 0, dn(m);\n                                return;\n                            }\n                        }\n                        u = Et;\n                        return;\n                    }\n                    if (rt(c, o, e, l) && o[e] != He && o[e] != pe) {\n                        let i = o.subarray(e, e + l | 0), E = f(i);\n                        b = T | 0, O = c - d | 0, qe(E);\n                        return;\n                    }\n                    u = Gu, h(), a = Object.seal({\n                        procedure: n,\n                        stack: r,\n                        value: null\n                    }), h(), U = Ne, u = Se, _ = !0;\n                    break;\n                }\n            case Gu:\n                {\n                    let { value: t } = a, s = !1;\n                    y(), a.mutable && (s = a.mutable, y());\n                    let { value: n } = a, { inputs: r } = n, i = Object.seal({\n                        ...t,\n                        mutable: s\n                    });\n                    n.path !== me || i.type === dt ? r.push(i) : r.push(Ve(i));\n                    let E = o[e];\n                    if (E === Be) {\n                        u = ln;\n                        return;\n                    }\n                    if (E === le) {\n                        u = ln, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let m = o.subarray(e, e + l | 0), N = f(m), R = We;\n                    Y(`${f(Be)} or ${f(le)}`, N, R);\n                    break;\n                }\n            case Go:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = S.find((i)=>i.type === Bt && i.name === s);\n                    if (n) {\n                        let i = Object.seal({\n                            type: Ie,\n                            literal: null,\n                            name: n.name,\n                            path: n.path,\n                            props: []\n                        });\n                        a.value = i, u = xu;\n                        return;\n                    }\n                    let r = S.find((i)=>i.type === Bt && i.description.labels.find((E)=>E.name === s));\n                    if (r) {\n                        let i = Object.seal({\n                            type: Ie,\n                            literal: s,\n                            name: r.name,\n                            path: r.path,\n                            props: []\n                        });\n                        a.value = i, u = $o, _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0, Ot(s);\n                    break;\n                }\n            case xu:\n                {\n                    if (o[e] === st) {\n                        u = $o;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = br;\n                    Y(f(st), n, r);\n                    break;\n                }\n            case $o:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), n = S.find((r)=>r.type === Bt && r.name === a.value.name && r.description.labels.find((i)=>i.name === s));\n                    if (n) {\n                        if (a.value.literal = s, n.description.labels.find((i)=>i.name === s).props.length > 0) {\n                            u = Zi;\n                            return;\n                        }\n                        y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0, Ot(s);\n                    break;\n                }\n            case Zi:\n                {\n                    let t = o[e];\n                    if (t === pe) {\n                        u = ta;\n                        return;\n                    }\n                    if (t === ce) {\n                        y(), _ = !0;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case ta:\n                {\n                    let { stack: t, procedure: s } = a;\n                    u = qi, h(), a = {\n                        stack: t,\n                        procedure: s,\n                        value: null\n                    }, h(), u = Se, U = Ne, _ = !0;\n                    break;\n                }\n            case qi:\n                {\n                    let { value: t } = a;\n                    y(), a.value.props.push(t);\n                    let s = o[e];\n                    if (s === Be) {\n                        u = ta;\n                        return;\n                    }\n                    if (s === le) {\n                        u = Qi, _ = !0;\n                        return;\n                    }\n                }\n            case Qi:\n                {\n                    if (o[e] === le) {\n                        y();\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = We;\n                    Y(f(le), n, r);\n                }\n            case ei:\n                {\n                    let t = Object.seal({\n                        type: ws,\n                        layout: null,\n                        data: null,\n                        value: null\n                    });\n                    a.value = t, u = ti;\n                    break;\n                }\n            case ti:\n                {\n                    if (o[e] === $e) {\n                        u = si;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ds;\n                    Y(f($e), n, r);\n                    break;\n                }\n            case si:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (rt(c, o, e, l)) {\n                        b = T | 0, O = c - d | 0, qe(s);\n                        return;\n                    }\n                    if (Z(er, t)) {\n                        u = Ho, h(), a = {\n                            ...a,\n                            data: null\n                        }, h(), U = mt, u = ct, _ = !0;\n                        return;\n                    }\n                    if (Z(t, zt) || Z(t, ns)) {\n                        u = Ho, h(), a = {\n                            ...a,\n                            data: null\n                        }, h(), U = rs, u = _n, _ = !0;\n                        return;\n                    }\n                    if (Z(t, $n)) {\n                        b = T | 0, O = c - d | 0;\n                        let r = o.subarray(e, e + l | 0), i = f(r);\n                        Y(\"MAYBE Data\", i, eo);\n                        return;\n                    }\n                    let n = Ue(s);\n                    n && (a.value.data = n), u = Ko;\n                    break;\n                }\n            case Ho:\n                {\n                    let { data: t } = a;\n                    y(), a.value.data = t, _ = !0, u = Ko;\n                    break;\n                }\n            case Ko:\n                {\n                    if (o[e] === ze) {\n                        u = ni;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = as;\n                    Y(f(ze), n, r);\n                    break;\n                }\n            case ni:\n                {\n                    if (o[e] === st) {\n                        u = oi;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = br;\n                    Y(f(st), n, r);\n                    break;\n                }\n            case oi:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t);\n                    if (a.value.layout = s, Z(t, Kn)) {\n                        u = zo;\n                        return;\n                    }\n                    if (Z(t, or)) {\n                        u = ai;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = f(t), r = eo;\n                    Y(`${f(or)} or ${f(Kn)}`, n, r);\n                    break;\n                }\n            case ai:\n                {\n                    if (o[e] === pe) {\n                        u = ri;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case ri:\n                {\n                    let { procedure: t, stack: s } = a;\n                    if (rt(c, o, e, l)) {\n                        let n = o.subarray(e, e + l | 0), r = f(n);\n                        b = T | 0, O = c - d | 0, qe(r);\n                        return;\n                    }\n                    u = ci, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        value: null\n                    }), h(), U = Ne, u = Se, _ = !0;\n                    break;\n                }\n            case ci:\n                {\n                    let { value: t } = a;\n                    if (y(), a.value.value = Ve(t), o[e] === le) {\n                        u = zo;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let n = o.subarray(e, e + l | 0), r = f(n), i = We;\n                    Y(f(le), r, i);\n                    break;\n                }\n            case zo:\n                {\n                    y(), _ = !0;\n                    break;\n                }\n            case pi:\n                {\n                    let t = Object.seal({\n                        type: gn,\n                        value: null\n                    });\n                    a.value = t, u = mi;\n                    break;\n                }\n            case mi:\n                {\n                    if (o[e] === pe) {\n                        u = bi;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case bi:\n                {\n                    let { procedure: t, stack: s } = a;\n                    if (rt(c, o, e, l)) {\n                        let n = o.subarray(e, e + l | 0), r = f(n);\n                        b = T | 0, O = c - d | 0, qe(r);\n                        return;\n                    }\n                    u = Oi, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        value: null\n                    }), h(), U = Ne, u = Se, _ = !0;\n                    break;\n                }\n            case Oi:\n                {\n                    let { stack: t, value: s } = a;\n                    y();\n                    let n;\n                    if (s.type === xe) n = s.name;\n                    else if (s.type === It) n = s.link;\n                    else if (s.type === Mt) n = s.value;\n                    else {\n                        b = T | 0, O = c - d | 0, re(\"Non-movable type passed to move procedure. Please check types that can be moved and make sure your parameter's type is one of them.\");\n                        return;\n                    }\n                    let r = t.get(n);\n                    if (r && t.set(n, {\n                        ...r,\n                        moved: !0\n                    }), a.value.value = Ve(s), o[e] === le) {\n                        u = Ti;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let E = o.subarray(e, e + l | 0), m = f(E), N = We;\n                    Y(f(le), m, N);\n                    break;\n                }\n            case Ti:\n                {\n                    y(), _ = !0;\n                    break;\n                }\n            case Di:\n                {\n                    let t = Object.seal({\n                        type: Vn,\n                        value: null\n                    });\n                    a.value = t, Ue(Je), u = Mi;\n                    break;\n                }\n            case Mi:\n                {\n                    if (o[e] === pe) {\n                        u = Fi;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let s = o.subarray(e, e + l | 0), n = f(s), r = ot;\n                    Y(f(pe), n, r);\n                    break;\n                }\n            case Fi:\n                {\n                    let { procedure: t, stack: s } = a;\n                    if (rt(c, o, e, l)) {\n                        let n = o.subarray(e, e + l | 0), r = f(n);\n                        b = T | 0, O = c - d | 0, qe(r);\n                        return;\n                    }\n                    u = ji, h(), a = Object.seal({\n                        procedure: t,\n                        stack: s,\n                        value: null\n                    }), h(), U = Ne, u = Se, _ = !0;\n                    break;\n                }\n            case ji:\n                {\n                    let { stack: t, value: s } = a;\n                    y();\n                    let n = ue(s);\n                    if (n.data.name === tt || n.data.name === Fe || n.data.layout === tt || n.data.layout === Fe || n.data.type === tt || n.data.type === Fe || (b = T | 0, O = c - d | 0, re(`Size function incompatible parameter type error: Provided type '${n.data.name}' cannot be used here as it's neither a string nor an array.`)), a.value.value = s, o[e] === le) {\n                        u = Et;\n                        return;\n                    }\n                    b = T | 0, O = c - d | 0;\n                    let i = o.subarray(e, e + l | 0), E = f(i), m = We;\n                    Y(f(le), E, m);\n                    break;\n                }\n            case $p:\n                {\n                    y(), _ = !0;\n                    break;\n                }\n            case Ki:\n                {\n                    let t = o.subarray(e, e + l | 0), s = f(t), { value: n, stack: r, procedure: i } = a, E = Object.seal({\n                        type: $t,\n                        name: s,\n                        path: me,\n                        inputs: [\n                            Ve(n)\n                        ]\n                    });\n                    a.value = E, u = Hi, h(), a = {\n                        stack: r,\n                        procedure: i,\n                        value: null\n                    }, h(), u = Se, U = Ne;\n                    break;\n                }\n            case Hi:\n                {\n                    let { value: t } = a;\n                    y();\n                    let { value: s } = a, { name: n } = s;\n                    s.inputs.push(Ve(t));\n                    let r = s.inputs.map((F)=>ue(F)) || [], [i, ...E] = r, m = r.find((F)=>F.data.type != Ie) || i, N = Gt[n];\n                    if (N) {\n                        for(let F = 0; F < r.length; F++)if (r[F].data.name != m.data.name) {\n                            if (r[F].data.type === Ie && Ms(m.data.name, r[F].data.name)) {\n                                s.inputs[F] = Object.freeze({\n                                    ...s.inputs[F],\n                                    name: m.data.name\n                                }), r[F].data.name = m.data.name;\n                                continue;\n                            }\n                            b = T | 0, O = c - d | 0, In(r.map((w)=>w.data?.name)?.join(\", \"));\n                            return;\n                        }\n                    }\n                    let R = N.find((F)=>F.description && Array.isArray(F.description.inputs) ? F.description.inputs.length !== r.length ? !1 : F.description.inputs.every((w, j)=>w.data.name === r[j].data.name) : !1);\n                    if (R) Re(R), _t.set(n, R);\n                    else if (r.length >= 1) {\n                        if (r[0]?.data.type === Ut) {\n                            let F = N.find((j)=>j.description.inputs.length === r.length && r.length > 0 ? j.description.inputs[0].data.name === mn : !0), w = JSON.parse(JSON.stringify(F).replace(new RegExp(mn, \"g\"), r[0].data.name));\n                            Re(w), _t.set(n, w);\n                        } else if (!ht.includes(i.data.name) || E.some((F)=>!ht.includes(F.data.name))) {\n                            let F = S.find((j)=>j.name === i.data.name), w = E.map((j)=>S.find((H)=>H.name === j.data.name));\n                            if (F && w.every(Boolean) && !jt(F, w, N, n)) {\n                                let j = S.find((H)=>H.name === r[0].data.name && H.path === r[0].data.name && H.type === Me);\n                                if (!(r[0].data.name === tt && [\n                                    \"==\",\n                                    \"!=\",\n                                    \">\",\n                                    \">=\",\n                                    \"<\",\n                                    \"<=\"\n                                ].includes(n)) && !(j && [\n                                    \"==\",\n                                    \"!=\"\n                                ].includes(n))) {\n                                    b = T | 0, O = c - d | 0, Ct(`${propTypes.join(\", \")} for function ${n}`);\n                                    return;\n                                }\n                            }\n                        } else if (!(r[0].data.name === tt && [\n                            \"==\",\n                            \"!=\",\n                            \">\",\n                            \">=\",\n                            \"<\",\n                            \"<=\"\n                        ].includes(n))) {\n                            b = T | 0, O = c - d | 0, Ct(`${r.map((F)=>F.data.name)?.join(\", \")} for function ${n}`);\n                            return;\n                        }\n                    } else {\n                        b = T | 0, O = c - d | 0, Ct(`${r.map((F)=>F.data.name)?.join(\", \")} for function ${n}`);\n                        return;\n                    }\n                    u = Et, _ = !0;\n                    break;\n                }\n            case Vi:\n                {\n                    if (o[e] !== pe) {\n                        b = T | 0, O = c - d | 0;\n                        let s = o.subarray(e, e + l | 0), n = f(s), r = Is;\n                        Y(f(), n, r);\n                        return;\n                    }\n                    u = Gi, h(), u = Se, U = Ne;\n                    break;\n                }\n            case Gi:\n                {\n                    if (o[e] !== le) {\n                        b = T | 0, O = c - d | 0;\n                        let s = o.subarray(e, e + l | 0), n = f(s), r = Is;\n                        Y(f(le), n, r);\n                        return;\n                    }\n                    u = Et;\n                    break;\n                }\n        }\n    }, sf = (c, o, e, l)=>{\n        switch(u){\n            case rc:\n                {\n                    let t = Object.seal({\n                        type: it,\n                        path: []\n                    }), s = Object.seal({\n                        type: K_,\n                        source: t,\n                        alias: it\n                    });\n                    a = Object.seal({\n                        import: s,\n                        source: t\n                    }), u = cc;\n                    break;\n                }\n            case cc:\n                {\n                    let t = o[e], { source: s } = a;\n                    if (t === Tp && o[e + 1] === Hn) {\n                        s.type = xe, u = uc, h(), a = [], h(), u = io;\n                        return;\n                    }\n                    if (rt(c, o, e, l)) {\n                        b = T | 0, O = c - d | 0, qe(name);\n                        return;\n                    }\n                    s.type = H_, u = Gp, _ = !0;\n                    break;\n                }\n            case uc:\n                {\n                    let t = o[e], s = a;\n                    y();\n                    let { source: n } = a;\n                    n.path.push(s.join(\"\")), t === Hn && (h(), a = [], h(), u = io), t === ee && (u = ic, _ = !0);\n                    break;\n                }\n            case io:\n                {\n                    let t = o[e];\n                    if (t === Hn) {\n                        y(), _ = !0;\n                        return;\n                    }\n                    if (t === ee) {\n                        y(), _ = !0;\n                        return;\n                    }\n                    let s = o.subarray(e, e + l | 0), n = f(s);\n                    a.push(n);\n                    return;\n                }\n            case ic:\n                {\n                    let t = (s)=>{\n                        let n = !0, r = null, i = null, E = wl(k);\n                        E.on(is, (w)=>{\n                            r = w;\n                        }), E.on(we, (w)=>{\n                            i = w;\n                        });\n                        let m = new Ge({\n                            tabSize: 4\n                        });\n                        if (m.on(\"token\", (w, j, H, $)=>{\n                            E.feed(w, j, H, $);\n                        }), m.on(\"error\", ()=>{\n                            n = !1;\n                        }), m.feed(s), m.done(), m.close(), E.done(), !n || i) {\n                            console.error(\"Tokenizer or Parser error occurred.\", i);\n                            return;\n                        }\n                        if (!r) {\n                            console.error(\"Invalid representation after parsing.\");\n                            return;\n                        }\n                        let { exports: N, data: R } = r;\n                        for (let w of N){\n                            let j = r[w.path]?.find((H)=>H.name === w.name);\n                            j && (w.path === sa && (S.push(j), P({\n                                name: j.name,\n                                path: j.path,\n                                type: Ce\n                            })), w.path === ll && Re(j));\n                        }\n                        let F = R.filter((w)=>w.type === z_);\n                        S.unshift(...F);\n                    };\n                    if (ne && ne.length > 0) {\n                        let s = ne.find((n)=>n.path === a.source.path.join(\"/\"));\n                        if (s) {\n                            let n = fe(s.data);\n                            t(n);\n                        } else b = T | 0, O = c - d | 0, re(\"NO FILES WERE FOUND: \", a.source.path);\n                    } else b = T | 0, O = c - d | 0, re(\"NO FILES WERE FOUND: \", a.source.path);\n                    y();\n                    break;\n                }\n        }\n    }, nf = (c, o)=>{\n        switch(c){\n            case is:\n                {\n                    K.push(o);\n                    break;\n                }\n            case we:\n                {\n                    G.push(o);\n                    break;\n                }\n        }\n    }, h = ()=>{\n        let c = Object.freeze({\n            item: a,\n            indentation: je,\n            situationGeneral: U,\n            situationSection: u\n        });\n        g.push(c);\n    }, y = ()=>{\n        let c = g.pop();\n        return a = c.item, je = c.indentation, U = c.situationGeneral, u = c.situationSection, c;\n    }, fs = (c, o, e, l)=>{\n        if (J) return;\n        let t = ()=>{\n            Pe = !0, d = c | 0, T = T + 1;\n        };\n        Ke = c + l | 0;\n        let s = o[e];\n        if (s !== Op) {\n            if (s === ee && Pe) {\n                t();\n                return;\n            }\n            for(Pe = !1, _ = !0; _;)switch(_ = !1, U){\n                case Ne:\n                    {\n                        Kl(c, o, e, l);\n                        break;\n                    }\n                case Or:\n                    {\n                        Hl(c, o, e, l);\n                        break;\n                    }\n                case Ns:\n                    {\n                        Xl(c, o, e, l);\n                        break;\n                    }\n                case Ss:\n                    {\n                        zl(c, o, e, l);\n                        break;\n                    }\n                case Tr:\n                    {\n                        Wl(c, o, e, l);\n                        break;\n                    }\n                case to:\n                    {\n                        Zl(c, o, e, l);\n                        break;\n                    }\n                case Ar:\n                    {\n                        ql(c, o, e, l);\n                        break;\n                    }\n                case dr:\n                    {\n                        Jl(c, o, e, l);\n                        break;\n                    }\n                case Ye:\n                    {\n                        Ql(c, o, e, l);\n                        break;\n                    }\n                case mt:\n                    {\n                        xl(c, o, e, l);\n                        break;\n                    }\n                case ge:\n                    {\n                        tf(c, o, e, l);\n                        break;\n                    }\n                case rs:\n                    {\n                        ef(c, o, e, l);\n                        break;\n                    }\n                case Ir:\n                    {\n                        sf(c, o, e, l);\n                        break;\n                    }\n                default:\n                    throw qn;\n            }\n            s === ee && (El.default.diff(a, Yt) && t(), Yt = JSON.parse(JSON.stringify(a)));\n        }\n    };\n    return Object.freeze({\n        done: ()=>{\n            if (fs(Ke, ss, 0, ss.length), Ke = Ke + ss.length | 0, fs(Ke, Ht, 0, Ht.length), Ke = Ke + Ht.length | 0, fs(Ke, ss, 0, ss.length), Ke = Ke + ss.length | 0, de) {\n                C.emit(is, null);\n                return;\n            }\n            C.emit(is, ae);\n        },\n        feed: fs,\n        on: nf\n    });\n}, zp = Object.freeze({\n    create: wl,\n    ...Np,\n    ...Lp,\n    ...Vp\n}), Rm = zp;\n /*! Bundled license information:\n\neventemitter2/lib/eventemitter2.js:\n  (*!\n   * EventEmitter2\n   * https://github.com/hij1nx/EventEmitter2\n   *\n   * Copyright (c) 2013 hij1nx\n   * Licensed under the MIT license.\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/@munezero/floparser/SimpleParser/index.mjs\n");

/***/ }),

/***/ "(ssr)/./app/@munezero/floparser/Tests/Shared/index.mjs":
/*!********************************************************!*\
  !*** ./app/@munezero/floparser/Tests/Shared/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SIMPLE_IMPORTS: () => (/* binding */ e)\n/* harmony export */ });\nvar e = Object.freeze({\n    data: Object.freeze([\n        Object.freeze({\n            type: \"native\",\n            name: \"Link\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"String\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"Char\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"Bool\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"FP32\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"FP64\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"U32\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"U64\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"I32\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"I64\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"U16\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"I16\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"I8\",\n            path: \"Flogram\"\n        }),\n        Object.freeze({\n            type: \"native\",\n            name: \"U8\",\n            path: \"Flogram\"\n        })\n    ])\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvQG11bmV6ZXJvL2Zsb3BhcnNlci9UZXN0cy9TaGFyZWQvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxJQUFFQyxPQUFPQyxNQUFNLENBQUM7SUFBQ0MsTUFBS0YsT0FBT0MsTUFBTSxDQUFDO1FBQUNELE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBT0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBU0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBT0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBT0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBT0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBT0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBTUMsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBTUMsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBTUMsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBTUMsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBTUMsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBTUMsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBS0MsTUFBSztRQUFTO1FBQUdMLE9BQU9DLE1BQU0sQ0FBQztZQUFDRSxNQUFLO1lBQVNDLE1BQUs7WUFBS0MsTUFBSztRQUFTO0tBQUc7QUFBQztBQUErQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKQVNPTlxcRGVza3RvcFxcTmV3IGZvbGRlclxcYXBwXFxAbXVuZXplcm9cXGZsb3BhcnNlclxcVGVzdHNcXFNoYXJlZFxcaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBlPU9iamVjdC5mcmVlemUoe2RhdGE6T2JqZWN0LmZyZWV6ZShbT2JqZWN0LmZyZWV6ZSh7dHlwZTpcIm5hdGl2ZVwiLG5hbWU6XCJMaW5rXCIscGF0aDpcIkZsb2dyYW1cIn0pLE9iamVjdC5mcmVlemUoe3R5cGU6XCJuYXRpdmVcIixuYW1lOlwiU3RyaW5nXCIscGF0aDpcIkZsb2dyYW1cIn0pLE9iamVjdC5mcmVlemUoe3R5cGU6XCJuYXRpdmVcIixuYW1lOlwiQ2hhclwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIkJvb2xcIixwYXRoOlwiRmxvZ3JhbVwifSksT2JqZWN0LmZyZWV6ZSh7dHlwZTpcIm5hdGl2ZVwiLG5hbWU6XCJGUDMyXCIscGF0aDpcIkZsb2dyYW1cIn0pLE9iamVjdC5mcmVlemUoe3R5cGU6XCJuYXRpdmVcIixuYW1lOlwiRlA2NFwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIlUzMlwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIlU2NFwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIkkzMlwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIkk2NFwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIlUxNlwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIkkxNlwiLHBhdGg6XCJGbG9ncmFtXCJ9KSxPYmplY3QuZnJlZXplKHt0eXBlOlwibmF0aXZlXCIsbmFtZTpcIkk4XCIscGF0aDpcIkZsb2dyYW1cIn0pLE9iamVjdC5mcmVlemUoe3R5cGU6XCJuYXRpdmVcIixuYW1lOlwiVThcIixwYXRoOlwiRmxvZ3JhbVwifSldKX0pO2V4cG9ydHtlIGFzIFNJTVBMRV9JTVBPUlRTfTtcbiJdLCJuYW1lcyI6WyJlIiwiT2JqZWN0IiwiZnJlZXplIiwiZGF0YSIsInR5cGUiLCJuYW1lIiwicGF0aCIsIlNJTVBMRV9JTVBPUlRTIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/@munezero/floparser/Tests/Shared/index.mjs\n");

/***/ }),

/***/ "(ssr)/./app/@munezero/floparser/Tokenizer/index.mjs":
/*!*****************************************************!*\
  !*** ./app/@munezero/floparser/Tokenizer/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ gr)\n/* harmony export */ });\nvar ne = Object.create;\nvar ct = Object.defineProperty;\nvar re = Object.getOwnPropertyDescriptor;\nvar ie = Object.getOwnPropertyNames;\nvar oe = Object.getPrototypeOf, ce = Object.prototype.hasOwnProperty;\nvar le = (c, i, l)=>i in c ? ct(c, i, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: l\n    }) : c[i] = l;\nvar dt = (c, i)=>()=>(i || c((i = {\n            exports: {}\n        }).exports, i), i.exports);\nvar he = (c, i, l, E)=>{\n    if (i && typeof i == \"object\" || typeof i == \"function\") for (let a of ie(i))!ce.call(c, a) && a !== l && ct(c, a, {\n        get: ()=>i[a],\n        enumerable: !(E = re(i, a)) || E.enumerable\n    });\n    return c;\n};\nvar ae = (c, i, l)=>(l = c != null ? ne(oe(c)) : {}, he(i || !c || !c.__esModule ? ct(l, \"default\", {\n        value: c,\n        enumerable: !0\n    }) : l, c));\nvar Z = (c, i, l)=>(le(c, typeof i != \"symbol\" ? i + \"\" : i, l), l);\nvar It = dt((St, vt)=>{\n    (function(c) {\n        var i = Object.hasOwnProperty, l = Array.isArray ? Array.isArray : function(e) {\n            return Object.prototype.toString.call(e) === \"[object Array]\";\n        }, E = 10, a = typeof process == \"object\" && typeof process.nextTick == \"function\", x = typeof Symbol == \"function\", m = typeof Reflect == \"object\", A = typeof setImmediate == \"function\", N = A ? setImmediate : setTimeout, v = x ? m && typeof Reflect.ownKeys == \"function\" ? Reflect.ownKeys : function(t) {\n            var e = Object.getOwnPropertyNames(t);\n            return e.push.apply(e, Object.getOwnPropertySymbols(t)), e;\n        } : Object.keys;\n        function S() {\n            this._events = {}, this._conf && I.call(this, this._conf);\n        }\n        function I(t) {\n            t && (this._conf = t, t.delimiter && (this.delimiter = t.delimiter), t.maxListeners !== c && (this._maxListeners = t.maxListeners), t.wildcard && (this.wildcard = t.wildcard), t.newListener && (this._newListener = t.newListener), t.removeListener && (this._removeListener = t.removeListener), t.verboseMemoryLeak && (this.verboseMemoryLeak = t.verboseMemoryLeak), t.ignoreErrors && (this.ignoreErrors = t.ignoreErrors), this.wildcard && (this.listenerTree = {}));\n        }\n        function w(t, e) {\n            var s = \"(node) warning: possible EventEmitter memory leak detected. \" + t + \" listeners added. Use emitter.setMaxListeners() to increase limit.\";\n            if (this.verboseMemoryLeak && (s += \" Event name: \" + e + \".\"), typeof process < \"u\" && process.emitWarning) {\n                var n = new Error(s);\n                n.name = \"MaxListenersExceededWarning\", n.emitter = this, n.count = t, process.emitWarning(n);\n            } else console.error(s), console.trace && console.trace();\n        }\n        var D = function(t, e, s) {\n            var n = arguments.length;\n            switch(n){\n                case 0:\n                    return [];\n                case 1:\n                    return [\n                        t\n                    ];\n                case 2:\n                    return [\n                        t,\n                        e\n                    ];\n                case 3:\n                    return [\n                        t,\n                        e,\n                        s\n                    ];\n                default:\n                    for(var r = new Array(n); n--;)r[n] = arguments[n];\n                    return r;\n            }\n        };\n        function Q(t, e) {\n            for(var s = {}, n, r = t.length, o = e ? e.length : 0, h = 0; h < r; h++)n = t[h], s[n] = h < o ? e[h] : c;\n            return s;\n        }\n        function H(t, e, s) {\n            this._emitter = t, this._target = e, this._listeners = {}, this._listenersCount = 0;\n            var n, r;\n            if ((s.on || s.off) && (n = s.on, r = s.off), e.addEventListener ? (n = e.addEventListener, r = e.removeEventListener) : e.addListener ? (n = e.addListener, r = e.removeListener) : e.on && (n = e.on, r = e.off), !n && !r) throw Error(\"target does not implement any known event API\");\n            if (typeof n != \"function\") throw TypeError(\"on method must be a function\");\n            if (typeof r != \"function\") throw TypeError(\"off method must be a function\");\n            this._on = n, this._off = r;\n            var o = t._observers;\n            o ? o.push(this) : t._observers = [\n                this\n            ];\n        }\n        Object.assign(H.prototype, {\n            subscribe: function(t, e, s) {\n                var n = this, r = this._target, o = this._emitter, h = this._listeners, _ = function() {\n                    var f = D.apply(null, arguments), u = {\n                        data: f,\n                        name: e,\n                        original: t\n                    };\n                    if (s) {\n                        var T = s.call(r, u);\n                        T !== !1 && o.emit.apply(o, [\n                            u.name\n                        ].concat(f));\n                        return;\n                    }\n                    o.emit.apply(o, [\n                        e\n                    ].concat(f));\n                };\n                if (h[t]) throw Error(\"Event '\" + t + \"' is already listening\");\n                this._listenersCount++, o._newListener && o._removeListener && !n._onNewListener ? (this._onNewListener = function(f) {\n                    f === e && h[t] === null && (h[t] = _, n._on.call(r, t, _));\n                }, o.on(\"newListener\", this._onNewListener), this._onRemoveListener = function(f) {\n                    f === e && !o.hasListeners(f) && h[t] && (h[t] = null, n._off.call(r, t, _));\n                }, h[t] = null, o.on(\"removeListener\", this._onRemoveListener)) : (h[t] = _, n._on.call(r, t, _));\n            },\n            unsubscribe: function(t) {\n                var e = this, s = this._listeners, n = this._emitter, r, o, h = this._off, _ = this._target, f;\n                if (t && typeof t != \"string\") throw TypeError(\"event must be a string\");\n                function u() {\n                    e._onNewListener && (n.off(\"newListener\", e._onNewListener), n.off(\"removeListener\", e._onRemoveListener), e._onNewListener = null, e._onRemoveListener = null);\n                    var T = mt.call(n, e);\n                    n._observers.splice(T, 1);\n                }\n                if (t) {\n                    if (r = s[t], !r) return;\n                    h.call(_, t, r), delete s[t], --this._listenersCount || u();\n                } else {\n                    for(o = v(s), f = o.length; f-- > 0;)t = o[f], h.call(_, t, s[t]);\n                    this._listeners = {}, this._listenersCount = 0, u();\n                }\n            }\n        });\n        function J(t, e, s, n) {\n            var r = Object.assign({}, e);\n            if (!t) return r;\n            if (typeof t != \"object\") throw TypeError(\"options must be an object\");\n            var o = Object.keys(t), h = o.length, _, f, u;\n            function T(O) {\n                throw Error('Invalid \"' + _ + '\" option value' + (O ? \". Reason: \" + O : \"\"));\n            }\n            for(var P = 0; P < h; P++){\n                if (_ = o[P], !n && !i.call(e, _)) throw Error('Unknown \"' + _ + '\" option');\n                f = t[_], f !== c && (u = s[_], r[_] = u ? u(f, T) : f);\n            }\n            return r;\n        }\n        function Tt(t, e) {\n            return (typeof t != \"function\" || !t.hasOwnProperty(\"prototype\")) && e(\"value must be a constructor\"), t;\n        }\n        function xt(t) {\n            var e = \"value must be type of \" + t.join(\"|\"), s = t.length, n = t[0], r = t[1];\n            return s === 1 ? function(o, h) {\n                if (typeof o === n) return o;\n                h(e);\n            } : s === 2 ? function(o, h) {\n                var _ = typeof o;\n                if (_ === n || _ === r) return o;\n                h(e);\n            } : function(o, h) {\n                for(var _ = typeof o, f = s; f-- > 0;)if (_ === t[f]) return o;\n                h(e);\n            };\n        }\n        var et = xt([\n            \"function\"\n        ]), qt = xt([\n            \"object\",\n            \"function\"\n        ]);\n        function pt(t, e, s) {\n            var n, r, o = 0, h, _ = new t(function(f, u, T) {\n                s = J(s, {\n                    timeout: 0,\n                    overload: !1\n                }, {\n                    timeout: function(R, C) {\n                        return R *= 1, (typeof R != \"number\" || R < 0 || !Number.isFinite(R)) && C(\"timeout must be a positive number\"), R;\n                    }\n                }), n = !s.overload && typeof t.prototype.cancel == \"function\" && typeof T == \"function\";\n                function P() {\n                    r && (r = null), o && (clearTimeout(o), o = 0);\n                }\n                var O = function(R) {\n                    P(), f(R);\n                }, d = function(R) {\n                    P(), u(R);\n                };\n                n ? e(O, d, T) : (r = [\n                    function(R) {\n                        d(R || Error(\"canceled\"));\n                    }\n                ], e(O, d, function(R) {\n                    if (h) throw Error(\"Unable to subscribe on cancel event asynchronously\");\n                    if (typeof R != \"function\") throw TypeError(\"onCancel callback must be a function\");\n                    r.push(R);\n                }), h = !0), s.timeout > 0 && (o = setTimeout(function() {\n                    var R = Error(\"timeout\");\n                    R.code = \"ETIMEDOUT\", o = 0, _.cancel(R), u(R);\n                }, s.timeout));\n            });\n            return n || (_.cancel = function(f) {\n                if (r) {\n                    for(var u = r.length, T = 1; T < u; T++)r[T](f);\n                    r[0](f), r = null;\n                }\n            }), _;\n        }\n        function mt(t) {\n            var e = this._observers;\n            if (!e) return -1;\n            for(var s = e.length, n = 0; n < s; n++)if (e[n]._target === t) return n;\n            return -1;\n        }\n        function b(t, e, s, n, r) {\n            if (!s) return null;\n            if (n === 0) {\n                var o = typeof e;\n                if (o === \"string\") {\n                    var h, _, f = 0, u = 0, T = this.delimiter, P = T.length;\n                    if ((_ = e.indexOf(T)) !== -1) {\n                        h = new Array(5);\n                        do h[f++] = e.slice(u, _), u = _ + P;\n                        while ((_ = e.indexOf(T, u)) !== -1);\n                        h[f++] = e.slice(u), e = h, r = f;\n                    } else e = [\n                        e\n                    ], r = 1;\n                } else o === \"object\" ? r = e.length : (e = [\n                    e\n                ], r = 1);\n            }\n            var O = null, d, R, C, rt, it, K = e[n], ot = e[n + 1], Y, g;\n            if (n === r) s._listeners && (typeof s._listeners == \"function\" ? (t && t.push(s._listeners), O = [\n                s\n            ]) : (t && t.push.apply(t, s._listeners), O = [\n                s\n            ]));\n            else if (K === \"*\") {\n                for(Y = v(s), _ = Y.length; _-- > 0;)d = Y[_], d !== \"_listeners\" && (g = b(t, e, s[d], n + 1, r), g && (O ? O.push.apply(O, g) : O = g));\n                return O;\n            } else if (K === \"**\") {\n                for(it = n + 1 === r || n + 2 === r && ot === \"*\", it && s._listeners && (O = b(t, e, s, r, r)), Y = v(s), _ = Y.length; _-- > 0;)d = Y[_], d !== \"_listeners\" && (d === \"*\" || d === \"**\" ? (s[d]._listeners && !it && (g = b(t, e, s[d], r, r), g && (O ? O.push.apply(O, g) : O = g)), g = b(t, e, s[d], n, r)) : d === ot ? g = b(t, e, s[d], n + 2, r) : g = b(t, e, s[d], n, r), g && (O ? O.push.apply(O, g) : O = g));\n                return O;\n            } else s[K] && (O = b(t, e, s[K], n + 1, r));\n            if (R = s[\"*\"], R && b(t, e, R, n + 1, r), C = s[\"**\"], C) if (n < r) for(C._listeners && b(t, e, C, r, r), Y = v(C), _ = Y.length; _-- > 0;)d = Y[_], d !== \"_listeners\" && (d === ot ? b(t, e, C[d], n + 2, r) : d === K ? b(t, e, C[d], n + 1, r) : (rt = {}, rt[d] = C[d], b(t, e, {\n                \"**\": rt\n            }, n + 1, r)));\n            else C._listeners ? b(t, e, C, r, r) : C[\"*\"] && C[\"*\"]._listeners && b(t, e, C[\"*\"], r, r);\n            return O;\n        }\n        function $t(t, e, s) {\n            var n = 0, r = 0, o, h = this.delimiter, _ = h.length, f;\n            if (typeof t == \"string\") if ((o = t.indexOf(h)) !== -1) {\n                f = new Array(5);\n                do f[n++] = t.slice(r, o), r = o + _;\n                while ((o = t.indexOf(h, r)) !== -1);\n                f[n++] = t.slice(r);\n            } else f = [\n                t\n            ], n = 1;\n            else f = t, n = t.length;\n            if (n > 1) {\n                for(o = 0; o + 1 < n; o++)if (f[o] === \"**\" && f[o + 1] === \"**\") return;\n            }\n            var u = this.listenerTree, T;\n            for(o = 0; o < n; o++)if (T = f[o], u = u[T] || (u[T] = {}), o === n - 1) return u._listeners ? (typeof u._listeners == \"function\" && (u._listeners = [\n                u._listeners\n            ]), s ? u._listeners.unshift(e) : u._listeners.push(e), !u._listeners.warned && this._maxListeners > 0 && u._listeners.length > this._maxListeners && (u._listeners.warned = !0, w.call(this, u._listeners.length, T))) : u._listeners = e, !0;\n            return !0;\n        }\n        function At(t, e, s, n) {\n            for(var r = v(t), o = r.length, h, _, f, u = t._listeners, T; o-- > 0;)_ = r[o], h = t[_], _ === \"_listeners\" ? f = s : f = s ? s.concat(_) : [\n                _\n            ], T = n || typeof _ == \"symbol\", u && e.push(T ? f : f.join(this.delimiter)), typeof h == \"object\" && At.call(this, h, e, f, T);\n            return e;\n        }\n        function st(t) {\n            for(var e = v(t), s = e.length, n, r, o; s-- > 0;)r = e[s], n = t[r], n && (o = !0, r !== \"_listeners\" && !st(n) && delete t[r]);\n            return o;\n        }\n        function Ot(t, e, s) {\n            this.emitter = t, this.event = e, this.listener = s;\n        }\n        Ot.prototype.off = function() {\n            return this.emitter.off(this.event, this.listener), this;\n        };\n        function te(t, e, s) {\n            if (s === !0) r = !0;\n            else if (s === !1) n = !0;\n            else {\n                if (!s || typeof s != \"object\") throw TypeError(\"options should be an object or true\");\n                var n = s.async, r = s.promisify, o = s.nextTick, h = s.objectify;\n            }\n            if (n || o || r) {\n                var _ = e, f = e._origin || e;\n                if (o && !a) throw Error(\"process.nextTick is not supported\");\n                r === c && (r = e.constructor.name === \"AsyncFunction\"), e = function() {\n                    var u = arguments, T = this, P = this.event;\n                    return r ? o ? Promise.resolve() : new Promise(function(O) {\n                        N(O);\n                    }).then(function() {\n                        return T.event = P, _.apply(T, u);\n                    }) : (o ? process.nextTick : N)(function() {\n                        T.event = P, _.apply(T, u);\n                    });\n                }, e._async = !0, e._origin = f;\n            }\n            return [\n                e,\n                h ? new Ot(this, t, e) : this\n            ];\n        }\n        function p(t) {\n            this._events = {}, this._newListener = !1, this._removeListener = !1, this.verboseMemoryLeak = !1, I.call(this, t);\n        }\n        p.EventEmitter2 = p, p.prototype.listenTo = function(t, e, s) {\n            if (typeof t != \"object\") throw TypeError(\"target musts be an object\");\n            var n = this;\n            s = J(s, {\n                on: c,\n                off: c,\n                reducers: c\n            }, {\n                on: et,\n                off: et,\n                reducers: qt\n            });\n            function r(o) {\n                if (typeof o != \"object\") throw TypeError(\"events must be an object\");\n                var h = s.reducers, _ = mt.call(n, t), f;\n                _ === -1 ? f = new H(n, t, s) : f = n._observers[_];\n                for(var u = v(o), T = u.length, P, O = typeof h == \"function\", d = 0; d < T; d++)P = u[d], f.subscribe(P, o[P] || P, O ? h : h && h[P]);\n            }\n            return l(e) ? r(Q(e)) : r(typeof e == \"string\" ? Q(e.split(/\\s+/)) : e), this;\n        }, p.prototype.stopListeningTo = function(t, e) {\n            var s = this._observers;\n            if (!s) return !1;\n            var n = s.length, r, o = !1;\n            if (t && typeof t != \"object\") throw TypeError(\"target should be an object\");\n            for(; n-- > 0;)r = s[n], (!t || r._target === t) && (r.unsubscribe(e), o = !0);\n            return o;\n        }, p.prototype.delimiter = \".\", p.prototype.setMaxListeners = function(t) {\n            t !== c && (this._maxListeners = t, this._conf || (this._conf = {}), this._conf.maxListeners = t);\n        }, p.prototype.getMaxListeners = function() {\n            return this._maxListeners;\n        }, p.prototype.event = \"\", p.prototype.once = function(t, e, s) {\n            return this._once(t, e, !1, s);\n        }, p.prototype.prependOnceListener = function(t, e, s) {\n            return this._once(t, e, !0, s);\n        }, p.prototype._once = function(t, e, s, n) {\n            return this._many(t, 1, e, s, n);\n        }, p.prototype.many = function(t, e, s, n) {\n            return this._many(t, e, s, !1, n);\n        }, p.prototype.prependMany = function(t, e, s, n) {\n            return this._many(t, e, s, !0, n);\n        }, p.prototype._many = function(t, e, s, n, r) {\n            var o = this;\n            if (typeof s != \"function\") throw new Error(\"many only accepts instances of Function\");\n            function h() {\n                return --e === 0 && o.off(t, h), s.apply(this, arguments);\n            }\n            return h._origin = s, this._on(t, h, n, r);\n        }, p.prototype.emit = function() {\n            if (!this._events && !this._all) return !1;\n            this._events || S.call(this);\n            var t = arguments[0], e, s = this.wildcard, n, r, o, h, _;\n            if (t === \"newListener\" && !this._newListener && !this._events.newListener) return !1;\n            if (s && (e = t, t !== \"newListener\" && t !== \"removeListener\" && typeof t == \"object\")) {\n                if (r = t.length, x) {\n                    for(o = 0; o < r; o++)if (typeof t[o] == \"symbol\") {\n                        _ = !0;\n                        break;\n                    }\n                }\n                _ || (t = t.join(this.delimiter));\n            }\n            var f = arguments.length, u;\n            if (this._all && this._all.length) for(u = this._all.slice(), o = 0, r = u.length; o < r; o++)switch(this.event = t, f){\n                case 1:\n                    u[o].call(this, t);\n                    break;\n                case 2:\n                    u[o].call(this, t, arguments[1]);\n                    break;\n                case 3:\n                    u[o].call(this, t, arguments[1], arguments[2]);\n                    break;\n                default:\n                    u[o].apply(this, arguments);\n            }\n            if (s) u = [], b.call(this, u, e, this.listenerTree, 0, r);\n            else if (u = this._events[t], typeof u == \"function\") {\n                switch(this.event = t, f){\n                    case 1:\n                        u.call(this);\n                        break;\n                    case 2:\n                        u.call(this, arguments[1]);\n                        break;\n                    case 3:\n                        u.call(this, arguments[1], arguments[2]);\n                        break;\n                    default:\n                        for(n = new Array(f - 1), h = 1; h < f; h++)n[h - 1] = arguments[h];\n                        u.apply(this, n);\n                }\n                return !0;\n            } else u && (u = u.slice());\n            if (u && u.length) {\n                if (f > 3) for(n = new Array(f - 1), h = 1; h < f; h++)n[h - 1] = arguments[h];\n                for(o = 0, r = u.length; o < r; o++)switch(this.event = t, f){\n                    case 1:\n                        u[o].call(this);\n                        break;\n                    case 2:\n                        u[o].call(this, arguments[1]);\n                        break;\n                    case 3:\n                        u[o].call(this, arguments[1], arguments[2]);\n                        break;\n                    default:\n                        u[o].apply(this, n);\n                }\n                return !0;\n            } else if (!this.ignoreErrors && !this._all && t === \"error\") throw arguments[1] instanceof Error ? arguments[1] : new Error(\"Uncaught, unspecified 'error' event.\");\n            return !!this._all;\n        }, p.prototype.emitAsync = function() {\n            if (!this._events && !this._all) return !1;\n            this._events || S.call(this);\n            var t = arguments[0], e = this.wildcard, s, n, r, o, h, _;\n            if (t === \"newListener\" && !this._newListener && !this._events.newListener) return Promise.resolve([\n                !1\n            ]);\n            if (e && (s = t, t !== \"newListener\" && t !== \"removeListener\" && typeof t == \"object\")) {\n                if (o = t.length, x) {\n                    for(h = 0; h < o; h++)if (typeof t[h] == \"symbol\") {\n                        n = !0;\n                        break;\n                    }\n                }\n                n || (t = t.join(this.delimiter));\n            }\n            var f = [], u = arguments.length, T;\n            if (this._all) for(h = 0, o = this._all.length; h < o; h++)switch(this.event = t, u){\n                case 1:\n                    f.push(this._all[h].call(this, t));\n                    break;\n                case 2:\n                    f.push(this._all[h].call(this, t, arguments[1]));\n                    break;\n                case 3:\n                    f.push(this._all[h].call(this, t, arguments[1], arguments[2]));\n                    break;\n                default:\n                    f.push(this._all[h].apply(this, arguments));\n            }\n            if (e ? (T = [], b.call(this, T, s, this.listenerTree, 0)) : T = this._events[t], typeof T == \"function\") switch(this.event = t, u){\n                case 1:\n                    f.push(T.call(this));\n                    break;\n                case 2:\n                    f.push(T.call(this, arguments[1]));\n                    break;\n                case 3:\n                    f.push(T.call(this, arguments[1], arguments[2]));\n                    break;\n                default:\n                    for(r = new Array(u - 1), _ = 1; _ < u; _++)r[_ - 1] = arguments[_];\n                    f.push(T.apply(this, r));\n            }\n            else if (T && T.length) {\n                if (T = T.slice(), u > 3) for(r = new Array(u - 1), _ = 1; _ < u; _++)r[_ - 1] = arguments[_];\n                for(h = 0, o = T.length; h < o; h++)switch(this.event = t, u){\n                    case 1:\n                        f.push(T[h].call(this));\n                        break;\n                    case 2:\n                        f.push(T[h].call(this, arguments[1]));\n                        break;\n                    case 3:\n                        f.push(T[h].call(this, arguments[1], arguments[2]));\n                        break;\n                    default:\n                        f.push(T[h].apply(this, r));\n                }\n            } else if (!this.ignoreErrors && !this._all && t === \"error\") return arguments[1] instanceof Error ? Promise.reject(arguments[1]) : Promise.reject(\"Uncaught, unspecified 'error' event.\");\n            return Promise.all(f);\n        }, p.prototype.on = function(t, e, s) {\n            return this._on(t, e, !1, s);\n        }, p.prototype.prependListener = function(t, e, s) {\n            return this._on(t, e, !0, s);\n        }, p.prototype.onAny = function(t) {\n            return this._onAny(t, !1);\n        }, p.prototype.prependAny = function(t) {\n            return this._onAny(t, !0);\n        }, p.prototype.addListener = p.prototype.on, p.prototype._onAny = function(t, e) {\n            if (typeof t != \"function\") throw new Error(\"onAny only accepts instances of Function\");\n            return this._all || (this._all = []), e ? this._all.unshift(t) : this._all.push(t), this;\n        }, p.prototype._on = function(t, e, s, n) {\n            if (typeof t == \"function\") return this._onAny(t, e), this;\n            if (typeof e != \"function\") throw new Error(\"on only accepts instances of Function\");\n            this._events || S.call(this);\n            var r = this, o;\n            return n !== c && (o = te.call(this, t, e, n), e = o[0], r = o[1]), this._newListener && this.emit(\"newListener\", t, e), this.wildcard ? ($t.call(this, t, e, s), r) : (this._events[t] ? (typeof this._events[t] == \"function\" && (this._events[t] = [\n                this._events[t]\n            ]), s ? this._events[t].unshift(e) : this._events[t].push(e), !this._events[t].warned && this._maxListeners > 0 && this._events[t].length > this._maxListeners && (this._events[t].warned = !0, w.call(this, this._events[t].length, t))) : this._events[t] = e, r);\n        }, p.prototype.off = function(t, e) {\n            if (typeof e != \"function\") throw new Error(\"removeListener only takes instances of Function\");\n            var s, n = [];\n            if (this.wildcard) {\n                var r = typeof t == \"string\" ? t.split(this.delimiter) : t.slice();\n                if (n = b.call(this, null, r, this.listenerTree, 0), !n) return this;\n            } else {\n                if (!this._events[t]) return this;\n                s = this._events[t], n.push({\n                    _listeners: s\n                });\n            }\n            for(var o = 0; o < n.length; o++){\n                var h = n[o];\n                if (s = h._listeners, l(s)) {\n                    for(var _ = -1, f = 0, u = s.length; f < u; f++)if (s[f] === e || s[f].listener && s[f].listener === e || s[f]._origin && s[f]._origin === e) {\n                        _ = f;\n                        break;\n                    }\n                    if (_ < 0) continue;\n                    return this.wildcard ? h._listeners.splice(_, 1) : this._events[t].splice(_, 1), s.length === 0 && (this.wildcard ? delete h._listeners : delete this._events[t]), this._removeListener && this.emit(\"removeListener\", t, e), this;\n                } else (s === e || s.listener && s.listener === e || s._origin && s._origin === e) && (this.wildcard ? delete h._listeners : delete this._events[t], this._removeListener && this.emit(\"removeListener\", t, e));\n            }\n            return this.listenerTree && st(this.listenerTree), this;\n        }, p.prototype.offAny = function(t) {\n            var e = 0, s = 0, n;\n            if (t && this._all && this._all.length > 0) {\n                for(n = this._all, e = 0, s = n.length; e < s; e++)if (t === n[e]) return n.splice(e, 1), this._removeListener && this.emit(\"removeListenerAny\", t), this;\n            } else {\n                if (n = this._all, this._removeListener) for(e = 0, s = n.length; e < s; e++)this.emit(\"removeListenerAny\", n[e]);\n                this._all = [];\n            }\n            return this;\n        }, p.prototype.removeListener = p.prototype.off, p.prototype.removeAllListeners = function(t) {\n            if (t === c) return !this._events || S.call(this), this;\n            if (this.wildcard) {\n                var e = b.call(this, null, t, this.listenerTree, 0), s, n;\n                if (!e) return this;\n                for(n = 0; n < e.length; n++)s = e[n], s._listeners = null;\n                this.listenerTree && st(this.listenerTree);\n            } else this._events && (this._events[t] = null);\n            return this;\n        }, p.prototype.listeners = function(t) {\n            var e = this._events, s, n, r, o, h;\n            if (t === c) {\n                if (this.wildcard) throw Error(\"event name required for wildcard emitter\");\n                if (!e) return [];\n                for(s = v(e), o = s.length, r = []; o-- > 0;)n = e[s[o]], typeof n == \"function\" ? r.push(n) : r.push.apply(r, n);\n                return r;\n            } else {\n                if (this.wildcard) {\n                    if (h = this.listenerTree, !h) return [];\n                    var _ = [], f = typeof t == \"string\" ? t.split(this.delimiter) : t.slice();\n                    return b.call(this, _, f, h, 0), _;\n                }\n                return e ? (n = e[t], n ? typeof n == \"function\" ? [\n                    n\n                ] : n : []) : [];\n            }\n        }, p.prototype.eventNames = function(t) {\n            var e = this._events;\n            return this.wildcard ? At.call(this, this.listenerTree, [], null, t) : e ? v(e) : [];\n        }, p.prototype.listenerCount = function(t) {\n            return this.listeners(t).length;\n        }, p.prototype.hasListeners = function(t) {\n            if (this.wildcard) {\n                var e = [], s = typeof t == \"string\" ? t.split(this.delimiter) : t.slice();\n                return b.call(this, e, s, this.listenerTree, 0), e.length > 0;\n            }\n            var n = this._events, r = this._all;\n            return !!(r && r.length || n && (t === c ? v(n).length : n[t]));\n        }, p.prototype.listenersAny = function() {\n            return this._all ? this._all : [];\n        }, p.prototype.waitFor = function(t, e) {\n            var s = this, n = typeof e;\n            return n === \"number\" ? e = {\n                timeout: e\n            } : n === \"function\" && (e = {\n                filter: e\n            }), e = J(e, {\n                timeout: 0,\n                filter: c,\n                handleError: !1,\n                Promise,\n                overload: !1\n            }, {\n                filter: et,\n                Promise: Tt\n            }), pt(e.Promise, function(r, o, h) {\n                function _() {\n                    var f = e.filter;\n                    if (!(f && !f.apply(s, arguments))) if (s.off(t, _), e.handleError) {\n                        var u = arguments[0];\n                        u ? o(u) : r(D.apply(null, arguments).slice(1));\n                    } else r(D.apply(null, arguments));\n                }\n                h(function() {\n                    s.off(t, _);\n                }), s._on(t, _, !1);\n            }, {\n                timeout: e.timeout,\n                overload: e.overload\n            });\n        };\n        function ee(t, e, s) {\n            s = J(s, {\n                Promise,\n                timeout: 0,\n                overload: !1\n            }, {\n                Promise: Tt\n            });\n            var n = s.Promise;\n            return pt(n, function(r, o, h) {\n                var _;\n                if (typeof t.addEventListener == \"function\") {\n                    _ = function() {\n                        r(D.apply(null, arguments));\n                    }, h(function() {\n                        t.removeEventListener(e, _);\n                    }), t.addEventListener(e, _, {\n                        once: !0\n                    });\n                    return;\n                }\n                var f = function() {\n                    u && t.removeListener(\"error\", u), r(D.apply(null, arguments));\n                }, u;\n                e !== \"error\" && (u = function(T) {\n                    t.removeListener(e, f), o(T);\n                }, t.once(\"error\", u)), h(function() {\n                    u && t.removeListener(\"error\", u), t.removeListener(e, f);\n                }), t.once(e, f);\n            }, {\n                timeout: s.timeout,\n                overload: s.overload\n            });\n        }\n        var nt = p.prototype;\n        if (Object.defineProperties(p, {\n            defaultMaxListeners: {\n                get: function() {\n                    return nt._maxListeners;\n                },\n                set: function(t) {\n                    if (typeof t != \"number\" || t < 0 || Number.isNaN(t)) throw TypeError(\"n must be a non-negative number\");\n                    nt._maxListeners = t;\n                },\n                enumerable: !0\n            },\n            once: {\n                value: ee,\n                writable: !0,\n                configurable: !0\n            }\n        }), Object.defineProperties(nt, {\n            _maxListeners: {\n                value: E,\n                writable: !0,\n                configurable: !0\n            },\n            _observers: {\n                value: null,\n                writable: !0,\n                configurable: !0\n            }\n        }), typeof define == \"function\" && define.amd) define(function() {\n            return p;\n        });\n        else if (typeof St == \"object\") vt.exports = p;\n        else {\n            var se = new Function(\"\", \"return this\")();\n            se.EventEmitter2 = p;\n        }\n    })();\n});\nvar Nt = dt((ir, Rt)=>{\n    Rt.exports = It();\n});\nvar Zt = ae(Nt(), 1);\nvar fe = \"as\", ue = \"=\", _e = \"break\", Ee = \"else\", Te = \"enum\", xe = \"export\", pe = \"if\", me = \"import\", Ae = \"->\", Oe = \"is\", de = \"loop\", Se = \"mut\", ve = \"native\", Ie = \"object\", Re = \"fn\", Ne = \"return\", be = \"self\", Le = \"template\", Pe = Object.freeze({\n    ALIAS: fe,\n    ASSIGN: ue,\n    BREAK: _e,\n    ELSE: Ee,\n    ENUMERATION: Te,\n    EXPORT: xe,\n    IF: pe,\n    IMPORT: me,\n    INTO: Ae,\n    IS: Oe,\n    LOOP: de,\n    MUTABLE: Se,\n    NATIVE: ve,\n    OBJECT: Ie,\n    PROCEDURE: Re,\n    RETURN: Ne,\n    SELF: be,\n    TEMPLATE: Le\n}), bt = Pe;\nvar Ce = \"assign\", ge = \"arity_match\", we = \"arity_status\", Be = \"array_assignment\", Ye = \"branch-match\", Me = \"branch-default\", De = \"condition\", Ue = \"loop\", ye = \"data\", ke = \"generics\", je = \"enumeration\", Fe = \"expression\", Ge = \"instance\", He = \"Link\", Ke = \"local\", Ze = \"object\", Xe = \"procedure\", ze = \"return\", Ve = \"compare\", We = \"select\", Qe = \"member\", Je = \"store\", qe = \"break\", $e = \"literal\", ts = \"array_access\", es = \"valueLink\", ss = \"linkValue\", ns = \"self\", rs = \"procedure-call\", is = \"Maybe\", os = \"native\", cs = \"move\", ls = \"String\", hs = \"Array\", as = \"import\", fs = \"library\", us = \"constructor\", _s = \"destructor\", Es = \"free\", Ts = \"block-end\", xs = \"default-block\", ps = \"continue\", ms = \"branch\", As = \"statement\", Os = \"draw\", ds = \"now\", Ss = \"size\", vs = \"concatenation\", Is = \"foreach\", Rs = \"while\", Ns = \"when\", bs = \"while-condition\", Ls = \"foreach-condition\", Ps = \"foreach-end\", Cs = \"for\", gs = \"up_to\", ws = \"down_to\", Bs = \"almost_up_to\", Ys = \"almost_down_to\", Ms = \"I32\", Ds = \"U32\", Us = \"FP32\", ys = \"I16\", ks = \"U16\", js = \"U8\", Fs = \"I8\", Gs = \"FP64\", Hs = \"U64\", Ks = \"I64\", Zs = \"Char\", Xs = \"block-start\", zs = \"function-call\", Vs = \"Bool\", Ws = Object.freeze({\n    TYPES_ASSIGN: Ce,\n    TYPES_ARRAY: hs,\n    TYPES_ARITY_MATCH: ge,\n    TYPES_ARITY_STATUS: we,\n    TYPES_ARRAY_ASSIGNMENT: Be,\n    TYPES_BRANCH_MATCH: Ye,\n    TYPES_BRANCH_DEFAULT: Me,\n    TYPES_CONDITION: De,\n    TYPES_LOOP: Ue,\n    TYPES_FOREACH_END: Ps,\n    TYPES_WHILE_CONDITION: bs,\n    TYPES_FOREACH_CONDITION: Ls,\n    TYPES_DATA: ye,\n    TYPES_COMPARE: Ve,\n    TYPES_GENERICS: ke,\n    TYPES_ENUMERATION: je,\n    TYPES_EXPRESSION: Fe,\n    TYPES_INSTANCE: Ge,\n    TYPES_LINK: He,\n    TYPES_IMPORT: as,\n    TYPES_LOCAL: Ke,\n    TYPES_OBJECT: Ze,\n    TYPES_PROCEDURE: Xe,\n    TYPES_RETURN: ze,\n    TYPES_SELECT: We,\n    TYPES_MEMBER: Qe,\n    TYPES_STORE: Je,\n    TYPES_BREAK: qe,\n    TYPES_LITERAL: $e,\n    TYPES_ARRAY_ACCESS: ts,\n    TYPES_LINK_TO: es,\n    TYPES_VALUE_AT: ss,\n    TYPES_SELF: ns,\n    TYPES_LIBRARY: fs,\n    TYPES_DROP: rs,\n    TYPES_MAYBE: is,\n    TYPES_NATIVE: os,\n    TYPES_MOVE: cs,\n    TYPES_STRING: ls,\n    TYPES_CONSTRUCTOR: us,\n    TYPES_FREE: Es,\n    TYPES_DEFAULT_BLOCK: xs,\n    TYPES_BLOCK_END: Ts,\n    TYPES_CONTINUE: ps,\n    TYPES_BRANCH: ms,\n    TYPES_STATEMENT: As,\n    TYPES_DESTRUCTOR: _s,\n    TYPES_DRAW: Os,\n    TYPES_NOW: ds,\n    TYPES_SIZE: Ss,\n    TYPES_CONCAT: vs,\n    TYPES_FOREACH: Is,\n    TYPES_WHILE: Rs,\n    TYPES_WHEN: Ns,\n    TYPES_FOR: Cs,\n    TYPES_UP_TO: gs,\n    TYPES_DOWN_TO: ws,\n    TYPES_ALMOST_UP_TO: Bs,\n    TYPES_ALMOST_DOWN_TO: Ys,\n    TYPES_I32: Ms,\n    TYPES_FP32: Us,\n    TYPES_FP64: Gs,\n    TYPES_U32: Ds,\n    TYPES_I64: Ks,\n    TYPES_U64: Hs,\n    TYPES_I16: ys,\n    TYPES_U16: ks,\n    TYPES_I8: Fs,\n    TYPES_U8: js,\n    TYPES_CHAR: Zs,\n    TYPES_BOOL: Vs,\n    TYPES_BLOCK_BEGIN: Xs,\n    TYPES_FUNCTION_CALL: zs\n}), Lt = Ws;\nvar Qs = Object.freeze({\n    COLON: 58,\n    COMMA: 44,\n    DIGIT_ZERO: 48,\n    DIGIT_NINE: 57,\n    DOT: 46,\n    HASHTAG: 35,\n    HORIZONTAL_TAB: 9,\n    HYPHEN_MINUS: 45,\n    LEFT_CURLY_BRACKET: 123,\n    LEFT_PARENTHESIS: 40,\n    LEFT_SQUARE_BRACKET: 91,\n    LINE_BREAK: 10,\n    NULL: 0,\n    PLUS_SIGN: 43,\n    RIGHT_CURLY_BRACKET: 125,\n    RIGHT_PARENTHESIS: 41,\n    RIGHT_SQUARE_BRACKET: 93,\n    SEMICOLON: 59,\n    SPACE: 32,\n    E_SIGN: 101\n}), Pt = Qs;\nvar Js = \"assignment\", qs = \"Flogram\", $s = Object.freeze({\n    K_ASSIGNMENT: Js,\n    K_FLOGRAM: qs\n}), Ct = $s;\nvar tn = Object.freeze([\n    [\n        43\n    ],\n    [\n        45\n    ],\n    [\n        42\n    ],\n    [\n        47\n    ],\n    [\n        37\n    ],\n    [\n        110,\n        111,\n        116\n    ],\n    [\n        60\n    ],\n    [\n        62\n    ],\n    [\n        94\n    ],\n    [\n        111,\n        114\n    ],\n    [\n        33\n    ],\n    [\n        61,\n        61\n    ],\n    [\n        60,\n        61\n    ],\n    [\n        62,\n        61\n    ],\n    [\n        33,\n        61\n    ],\n    [\n        120,\n        111,\n        114\n    ],\n    [\n        97,\n        110,\n        100\n    ]\n]), en = tn, gt = en;\nvar sn = Object.freeze({\n    INT_ARRAY_START: 9999991,\n    FLOAT_ARRAY_START: 9999981,\n    STRING_START: 8888891,\n    CHAR_START: 8888881,\n    NAT_ON_HORIZON: 7777791,\n    BIG_NAT_ON_HORIZON: 7777591,\n    FLOAT_ON_HORIZON: 7777771,\n    BIG_FLOAT_ON_HORIZON: 7777731,\n    END_OF_LINE: 66666661\n}), wt = sn;\nvar nn = Object.freeze({\n    ENUM_MEMORY_SIZE: 12,\n    ENUM_STACK_SIZE: 3,\n    ARRAY_MEMORY_SIZE: 12,\n    ARRAY_STACK_SIZE: 3,\n    ARRAY_DEFAULT_CAPACITY: 4,\n    STRING_MEMORY_SIZE: 8,\n    STRING_STACK_SIZE: 2,\n    OBJECT_MEMORY_SIZE: 8,\n    OBJECT_STACK_SIZE: 2,\n    NATIVE_MEMORY_SIZE: 4,\n    NATIVE_STACK_SIZE: 1,\n    NATIVE_SIZE: 4,\n    STEP: 4,\n    DOUBLE_STEP: 8,\n    TRIPPLE_STEP: 12\n}), Bt = nn;\nvar rn = Object.freeze([]), on = Object.freeze({}), cn = \"\", ln = \"\t\", hn = `\n`, an = \"UTF-8\";\nvar fn = Object.freeze({\n    EMPTY_ARRAY: rn,\n    EMPTY_OBJECT: on,\n    EMPTY_STRING: cn,\n    HORIZONTAL_TAB: ln,\n    LINE_BREAK: hn,\n    UNICODE_TEXT: an,\n    Codes: Pt,\n    Keys: bt,\n    Types: Lt,\n    Keywords: Ct,\n    Operators: gt,\n    DrawStates: wt,\n    Sizes: Bt\n}), y = fn;\nvar dr = Object.freeze([\n    \"FP64\",\n    \"U64\",\n    \"I64\",\n    \"FP32\",\n    \"U32\",\n    \"I32\",\n    \"U16\",\n    \"I16\",\n    \"U8\",\n    \"I8\",\n    \"Bool\",\n    \"Char\",\n    \"Array\",\n    \"String\",\n    \"Link\",\n    \"Maybe\"\n]), k = [\n    \"U8\",\n    \"U16\",\n    \"U32\"\n], X = [\n    ...k,\n    \"I8\",\n    \"I16\",\n    \"I32\"\n], un = [\n    \"I64\",\n    \"U64\"\n], lt = [\n    ...X,\n    ...un\n], _n = [\n    \"FP32\",\n    \"FP64\"\n], z = [\n    ...lt,\n    ..._n\n];\nvar { EMPTY_STRING: En, UNICODE_TEXT: ut } = y;\nvar Tn = 48, xn = 57, pn = 46, Yt = 45, Mt = 43, mn = 65, An = 90, On = \"e\".charCodeAt(0), dn = \"E\".charCodeAt(0), Sn = -1, vn = 1, Dt = new TextDecoder(ut), In = new TextEncoder, Rn = y.Operators, Nn = (c, i, l = 0, E = c.length | 0, a = 0, x = i.length | 0)=>{\n    for(a = a | 0, l = l | 0, x = x | 0, E = E | 0;;){\n        let m = l >= E, A = a >= x;\n        if (m || A) break;\n        let v = c[l], S = i[a];\n        if (l = l + 1 | 0, a = a + 1 | 0, v < S) return Sn;\n        if (v > S) return vn;\n    }\n    return 0;\n}, bn = (c, i, l = 0, E = c.length | 0, a = 0, x = i.length | 0)=>{\n    for(a = a | 0, l = l | 0, x = x | 0, E = E | 0;;){\n        let m = a >= x, A = l >= E;\n        if (m || A) break;\n        i[a] = c[l], a = a + 1 | 0, l = l + 1 | 0;\n    }\n}, kt = (c, i, l = 0, E = c.length | 0, a = 0, x = i.length | 0)=>{\n    l = l | 0, a = a | 0, E = E | 0, x = x | 0;\n    let m = E - l | 0, A = x - a | 0;\n    if (m !== A) return !1;\n    for(;;){\n        let N = l >= E, v = a >= x;\n        if (N || v) break;\n        let I = c[l], w = i[a];\n        if (l = l + 1 | 0, a = a + 1 | 0, I !== w) return !1;\n    }\n    return !0;\n}, Ln = (c)=>{\n    c = c >>> 0;\n    let i = 0, l = 0;\n    for(; l = (l << 1 | 1) >>> 0, !(l > c);)i = i + 1 | 0;\n    return i;\n}, jt = Object.freeze([\n    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    97,\n    98,\n    99,\n    100,\n    101,\n    102\n]), ft = (c, i, l, E)=>{\n    for(c = c >>> 0, E = E ?? i.length | 0, l = l | 0, E = E | 0; c > 0 && E > l;)E = E - 1 | 0, i[E] = jt[c & 15], c = c >>> 4;\n}, Pn = (c, i, l, E)=>{\n    let a = l | 0, x = l + E | 0;\n    if (E === 0) return !1;\n    let m = !1, A = !1, N = !1, v = (S)=>S === Mt || S === Yt;\n    for(; a < x;){\n        let S = i[a];\n        a = a + 1 | 0;\n        let I = Tn <= S && S <= xn, w = Mt === S || S === Yt, D = pn === S, Q = Fn === S, H = S === On || S === dn;\n        if (I) {\n            N = !0;\n            continue;\n        } else if (w) {\n            if ((a === l + 1 || m && !A) && !N) continue;\n        } else if ((Q || D) && !m && !A || H && !m) H && (m = !0, a < x && v(i[a]) && (a = a + 1 | 0, A = !0));\n        else return !1;\n    }\n    return N && (!m || m && A);\n}, Cn = {\n    I8: [\n        ...X\n    ],\n    U8: [\n        ...k\n    ],\n    I16: [\n        ...X\n    ],\n    U16: [\n        ...k\n    ],\n    I32: [\n        ...X\n    ],\n    U32: [\n        ...k\n    ],\n    I64: [\n        ...lt\n    ],\n    U64: [\n        ...k\n    ],\n    FP32: z,\n    FP64: z\n}, gn = (c, i)=>!z.includes(c) || !z.includes(i) ? !1 : Cn[c].includes(i), wn = (c)=>{\n    let i = c >= mn, l = c <= An;\n    return i && l;\n}, $ = 128, tt = 127, Ft = -1, j = 64, _t = (c)=>{\n    c = c | 0;\n    let i = [];\n    for(;;){\n        let l = c & tt;\n        c = c >> 7;\n        let E = c === 0, a = (l & j) === 0, x = E && a, m = c === -1, A = (l & j) !== 0;\n        if (x || m && A) {\n            i.push(l);\n            break;\n        }\n        l = l | $, i.push(l);\n    }\n    return i;\n}, Bn = (c)=>{\n    let i = [], l = !0;\n    for(; l;){\n        let E = c & tt;\n        c >>= 7, c === 0 && !(E & j) || c === -1 && E & j ? l = !1 : E |= $, i.push(E);\n    }\n    return i;\n}, Gt = (c, i)=>{\n    i = i | 0;\n    let l = 0, E = 0;\n    for(;;){\n        let a = c[i] | 0;\n        i = i + 1 | 0;\n        let x = (a & tt) << E;\n        if (E = E + 7 | 0, l = l | x, (a & $) === 0) {\n            let A = (a & j) !== 0, N = E < 32;\n            if (A && N) {\n                let S = Ft << E;\n                l = l | S;\n            }\n            break;\n        }\n    }\n    return l;\n}, Yn = (c, i)=>{\n    i = i | 0;\n    let l = 0, E = 0;\n    for(;;){\n        let a = c[i] | 0;\n        i = i + 1 | 0;\n        let x = (a & tt) << E;\n        if (E = E + 7 | 0, l = l | x, !(a & $)) {\n            if (a & j) {\n                let m = Ft << E;\n                l = l | m;\n            }\n            break;\n        }\n    }\n    return l;\n}, Mn = (c)=>{\n    try {\n        return Dt.decode(c);\n    } catch  {\n        return Dt.decode(new Uint8Array([\n            c\n        ]));\n    }\n}, Dn = (c)=>In.encode(c), Un = (c = En)=>{\n    let i = c.length | 0, l = _t(i), E = Buffer.from(c, ut);\n    return Object.freeze([\n        ...l,\n        ...E\n    ]);\n}, yn = (c, i)=>{\n    i = i | 0;\n    let l = Gt(c, i), E = _t(l).length;\n    return i = i + E | 0, c.subarray(i, i + l | 0).toString(ut);\n}, kn = 58, jn = 46, Fn = 95, V = 32, ht = 48, Gn = 67, M = new Uint8Array(Gn), Ut = M.subarray(0, 8), q = M.subarray(10, 49), yt = M.subarray(51, 68), at = 16, Hn = 2;\nM[8] = kn;\nM[9] = V;\nM[49] = V;\nM[50] = V;\nvar Kn = (c, i)=>{\n    i = i ?? console.log;\n    let l = 32, E = 126, a = c.length | 0, x = 0;\n    for(; a > 0;){\n        Ut.fill(ht), ft(x, Ut), q.fill(V), yt.fill(V);\n        let m = a >= at ? at : a;\n        a = a - at | 0;\n        let A = 0, N = 0;\n        for(let S = 1; S <= m; S = S + 1 | 0){\n            let I = c[x] & 255;\n            q[A + 0 | 0] = ht, q[A + 1 | 0] = ht, ft(I, q, A, A + 2 | 0);\n            let w = jn;\n            l <= I && I <= E && (w = I), yt[N] = w, x = x + 1 | 0, A = A + 2 | 0, N = N + 1 | 0, S % Hn === 0 && (A = A + 1 | 0);\n        }\n        let v = String.fromCodePoint(...M);\n        i(v);\n    }\n}, Zn = function*(c, i) {\n    let l = c.length | 0, E = i.length | 0, a = 0;\n    for(; a < l && a < E;){\n        let x = c[a], m = i[a];\n        yield [\n            x,\n            m\n        ], a = a + 1 | 0;\n    }\n}, Xn = function*(c, i, l) {\n    let E = c.length | 0, a = i.length | 0, x = l.length | 0, m = 0;\n    for(; m < E && m < a && m < x;){\n        let A = c[m], N = i[m], v = l[m];\n        yield [\n            A,\n            N,\n            v\n        ], m = m + 1 | 0;\n    }\n}, zn = (c)=>{\n    for (let i of Rn)if (kt(c, i)) return !0;\n    return !1;\n}, Vn = Object.freeze({\n    ARRAY_COMPARE: Nn,\n    ARRAY_COPY: bn,\n    ARRAY_EQUAL: kt,\n    BIT_DEPTH: Ln,\n    HEX_DIGITS: jt,\n    HEX_ENCODE: ft,\n    IS_NUMBER: Pn,\n    IS_UPPERCASE: wn,\n    IS_VALID_AUTO_CAST: gn,\n    LEB128_DECODE: Gt,\n    LEB128_DECODE_SIGNED: Yn,\n    LEB128_ENCODE: _t,\n    LEB128_ENCODE_SIGNED: Bn,\n    UTF8_DECODE: Mn,\n    UTF8_ENCODE: Dn,\n    WASM_STRING_ENCODE: Un,\n    WASM_STRING_DECODE: yn,\n    XXD_DUMP_HEX: Kn,\n    ZIP2: Zn,\n    ZIP3: Xn,\n    IS_OPERATOR: zn\n}), Ht = Vn;\nvar { Codes: L } = y, { EMPTY_STRING: Cr } = y, { ARRAY_COPY: Wn } = Ht, Qn = Object.freeze({\n    tabSize: 4\n}), Xt = new Set([\n    40,\n    41,\n    91,\n    93,\n    123,\n    125,\n    46,\n    44,\n    58,\n    59,\n    64,\n    61,\n    47\n]);\nObject.freeze(Xt);\nvar zt = new Set([\n    46,\n    95\n]);\nObject.freeze(zt);\nvar Vt = new Set([\n    34,\n    39\n]), Wt = new Set([\n    61,\n    33,\n    62,\n    60\n]);\nObject.freeze(Wt);\nvar Qt = new Set([\n    43,\n    45,\n    42,\n    47,\n    37\n]);\nObject.freeze(Qt);\nvar Kt = 61, Jn = 58, qn = 64, $n = 47, tr = 45, er = 62, sr = 33;\nObject.freeze(Vt);\nvar Jt = new Set([\n    9,\n    13,\n    32\n]);\nObject.freeze(Jt);\nvar W = 1, F = 2, Et = 3, G = 4, nr = (c, i, l)=>{\n    if (i = i | 0, l = l | 0, (l - i | 0) === 0) return !1;\n    let a = c[i];\n    for((a === L.PLUS_SIGN || a === L.HYPHEN_MINUS) && (i = i + 1 | 0); i < l;){\n        let x = c[i];\n        i = i + 1 | 0;\n        let m = L.DIGIT_ZERO <= x && x <= L.DIGIT_NINE, A = L.DOT === x || L.COMMA === x;\n        if (!(m || A && i < l && L.DIGIT_ZERO <= c[i] && c[i] <= L.DIGIT_NINE)) return !1;\n    }\n    return !0;\n}, U = class {\n    constructor(i = Qn){\n        this.options = i, this.numberMark = !1, this.position = 0, this.array = new Uint8Array(U.LIMIT_ARRAY), this.target = 0, this.length = 0, this.indexA = 0, this.indexB = 0, this.events = new Map, this.emitter = new Zt.default, this.emitter.on(\"token\", (l, E, a, x)=>{\n            (this.events.get(\"token\") || []).forEach((A)=>{\n                A(l, E, a, x);\n            });\n        }), this.emitter.on(\"error\", ()=>{}), this.comment = !1, this.situation = W, this.quote = L.NULL, Object.seal(this);\n    }\n    on(i, l) {\n        if (U.SET_EVENTS.has(i)) {\n            let E = this.events.get(i) || [];\n            E.push(l), this.events.set(i, E);\n        }\n    }\n    feed(i) {\n        let l = i.length | 0, E = 0, a = 0, x = l;\n        for(; x > 0;){\n            let m = U.LIMIT_ARRAY - this.length | 0, A = Math.min(m, x) | 0;\n            x = x - A | 0, a = a + A | 0, Wn(i, this.array, E, a, this.target), this.length = this.length + A | 0, this.flush(), E = E + A | 0;\n        }\n    }\n    done() {\n        this.array[this.indexB] = L.SPACE, this.length = this.length + 1, this.flush();\n    }\n    flush() {\n        for(; this.indexB < this.length;)switch(this.situation){\n            case W:\n                {\n                    this.flushTopLevel();\n                    break;\n                }\n            case F:\n                {\n                    this.flushQuotation();\n                    break;\n                }\n            case Et:\n                {\n                    this.flushComment();\n                    break;\n                }\n        }\n        let i = this.length - this.indexA | 0;\n        i > U.LIMIT_TOKEN || (i > 0 && (this.array.copyWithin(0, this.indexA, this.indexB), this.indexA = 0, this.indexB = i, this.target = i), this.length = i);\n    }\n    flushComment() {\n        for(; this.indexB < this.length;){\n            if ((this.array[this.indexB] | 0) === L.LINE_BREAK) {\n                this.drain(\"comment\"), this.indexB = this.indexB + 1 | 0, this.drain(\"token\"), this.comment = !1, this.situation = W;\n                break;\n            }\n            this.indexB = this.indexB + 1 | 0;\n        }\n        this.comment === !0 && (this.length - this.indexA | 0) > 0 && this.drain(\"comment\");\n    }\n    flushQuotation() {\n        for(; this.indexB < this.length;){\n            let i = this.array[this.indexB] | 0;\n            if (i === this.quote) {\n                if (this.situation !== G) {\n                    this.drain(\"token\"), this.quote = L.NULL, this.indexA = this.indexB, this.indexB++, this.drain(\"token\"), this.indexA = this.indexB, this.situation = W;\n                    return;\n                }\n                this.indexB++;\n                continue;\n            }\n            if (this.situation === F && i === L.LEFT_CURLY_BRACKET) {\n                this.drain(\"token\"), this.indexB++, this.indexA = this.indexB - 1, this.drain(\"token\"), this.indexA = this.indexB, this.situation = G;\n                continue;\n            }\n            if (this.situation === G && i === L.RIGHT_CURLY_BRACKET) {\n                this.drain(\"token\"), this.indexB++, this.indexA = this.indexB - 1, this.drain(\"token\"), this.indexA = this.indexB, this.situation = F;\n                continue;\n            }\n            if (this.situation === G) {\n                this.flushTopLevel();\n                continue;\n            }\n            this.indexB++;\n        }\n    }\n    flushTopLevel() {\n        let { options: i } = this, { tabSize: l } = i;\n        for(; this.indexB < this.length;){\n            let E = ()=>{\n                let I = 0;\n                this.numberMark && (this.indexB = this.indexB - 1 | 0), I = this.indexB - this.indexA | 0, I > 0 && this.drain(\"token\"), this.numberMark && (this.indexB = this.indexB + 1 | 0), I = this.indexB - this.indexA | 0, I > 0 && this.drain(\"token\"), this.numberMark = !1;\n            }, a = this.array[this.indexB] | 0;\n            if (a === L.RIGHT_CURLY_BRACKET && this.situation === G) {\n                E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\"), this.situation = F;\n                return;\n            }\n            if (a === L.HASHTAG) {\n                E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\"), this.comment = !0, this.situation = Et;\n                return;\n            }\n            if (a === L.LINE_BREAK) {\n                E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\");\n                continue;\n            }\n            if (Vt.has(a)) {\n                E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\"), this.quote = a, this.situation = F;\n                return;\n            }\n            if (Wt.has(a)) {\n                if (this.array[this.indexB + 1] === Kt) {\n                    E(), this.indexB = this.indexB + 2 | 0, this.drain(\"token\");\n                    continue;\n                }\n                if (a != sr) {\n                    E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\");\n                    continue;\n                }\n            }\n            if (a === qn && this.array[this.indexB + 1] === $n) {\n                E(), this.indexB = this.indexB + 2 | 0, this.drain(\"token\");\n                continue;\n            }\n            if (a === Jn && this.array[this.indexB + 1] === Kt) {\n                E(), this.indexB = this.indexB + 2 | 0, this.drain(\"token\");\n                continue;\n            }\n            if (Jt.has(a)) {\n                E(), a === L.HORIZONTAL_TAB ? this.position = this.position + l | 0 : this.position = this.position + 1 | 0, this.indexA = this.indexA + 1 | 0, this.indexB = this.indexB + 1 | 0;\n                continue;\n            }\n            if (this.numberMark = !1, Xt.has(a)) {\n                let I = !nr(this.array, this.indexA, this.indexB), w = !zt.has(a);\n                if (I || w) {\n                    E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\");\n                    continue;\n                }\n                this.numberMark = !0;\n            }\n            if (Qt.has(a)) if (a === tr) {\n                let I = this.array[this.indexB + 1] | 0;\n                if (I === er) {\n                    E(), this.indexB = this.indexB + 2 | 0, this.drain(\"token\");\n                    continue;\n                } else if (!(L.DIGIT_ZERO <= I && I <= L.DIGIT_NINE)) {\n                    E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\");\n                    continue;\n                }\n            } else {\n                E(), this.indexB = this.indexB + 1 | 0, this.drain(\"token\");\n                continue;\n            }\n            this.indexB = this.indexB + 1 | 0;\n        }\n    }\n    drain(i) {\n        let { array: l, position: E } = this, a = this.indexB - this.indexA | 0, x = this.indexA;\n        this.emitter.emit(i, E, l, x, a), this.position = this.position + a | 0, this.indexA = this.indexB | 0;\n    }\n    close() {}\n}, B = U;\nZ(B, \"LIMIT_TOKEN\", 2e3), Z(B, \"LIMIT_ARRAY\", U.LIMIT_TOKEN * 2 | 0), Z(B, \"SET_EVENTS\", new Set([\n    \"comment\",\n    \"error\",\n    \"token\"\n])), Z(B, \"SET_SITUATIONS\", new Set([\n    W,\n    F,\n    Et,\n    G\n]));\nObject.values(B).forEach(Object.freeze);\nObject.freeze(B);\nObject.freeze(Object.getPrototypeOf(B));\nvar gr = B;\n /*! Bundled license information:\n\neventemitter2/lib/eventemitter2.js:\n  (*!\n   * EventEmitter2\n   * https://github.com/hij1nx/EventEmitter2\n   *\n   * Copyright (c) 2013 hij1nx\n   * Licensed under the MIT license.\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/@munezero/floparser/Tokenizer/index.mjs\n");

/***/ }),

/***/ "(ssr)/./app/@munezero/floparser/index.js":
/*!******************************************!*\
  !*** ./app/@munezero/floparser/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Tokenizer_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer/index.mjs */ \"(ssr)/./app/@munezero/floparser/Tokenizer/index.mjs\");\n/* harmony import */ var _SimpleParser_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SimpleParser/index.mjs */ \"(ssr)/./app/@munezero/floparser/SimpleParser/index.mjs\");\n/* harmony import */ var _Compilers_SimplerWASM_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Compilers/SimplerWASM/index.mjs */ \"(ssr)/./app/@munezero/floparser/Compilers/SimplerWASM/index.mjs\");\n/* harmony import */ var _Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Compilers/MemoryManager/index.mjs */ \"(ssr)/./app/@munezero/floparser/Compilers/MemoryManager/index.mjs\");\n/* harmony import */ var _Tests_Shared_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Tests/Shared/index.mjs */ \"(ssr)/./app/@munezero/floparser/Tests/Shared/index.mjs\");\n\n\n\n\n\nconst execute = (glue, module)=>new Promise(async (resolve, reject)=>{\n        let key;\n        const outputs = [];\n        for (const [iKey, value] of Object.entries(glue.procedures)){\n            const { name, path } = value;\n            if (name === \"main\" && path === \"Module\") {\n                key = iKey;\n                break;\n            }\n        }\n        if (key) {\n            try {\n                const memory = new WebAssembly.Memory({\n                    initial: 128\n                });\n                const state = (0,_Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__.createMemoryManager)(memory);\n                const drawer = (0,_Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__.createDrawer)(memory, outputs);\n                const dates = (0,_Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__.createDate)();\n                const descriptionImports = Object.freeze({\n                    imports: {}\n                });\n                const memoryImport = \"memory\";\n                Object.keys(glue.imports).forEach((importKey)=>{\n                    if (state[importKey]) {\n                        descriptionImports.imports[importKey] = state[importKey];\n                    }\n                    if (drawer[importKey]) {\n                        descriptionImports.imports[importKey] = drawer[importKey];\n                    }\n                    if (dates[importKey]) {\n                        descriptionImports.imports[importKey] = dates[importKey];\n                    }\n                    if (importKey === memoryImport) {\n                        descriptionImports.imports[importKey] = memory;\n                    }\n                });\n                const moduleCompiled = await WebAssembly.compile(module);\n                const moduleInstance = await WebAssembly.instantiate(moduleCompiled, descriptionImports);\n                const procedure = moduleInstance.exports[key];\n                if (procedure) {\n                    let value = procedure();\n                    resolve(outputs);\n                }\n            } catch (e) {\n                reject([\n                    {\n                        message: e.message,\n                        type: 100,\n                        position: 0,\n                        length: 0\n                    }\n                ]);\n            }\n        } else {\n            reject([\n                {\n                    message: \"Error: Missing main function. Every Flogram program must include an entry point defined as the main function.\",\n                    type: 101,\n                    position: 0,\n                    length: 0\n                }\n            ]);\n        }\n    });\nconst run = (value)=>new Promise(async (resolve, reject)=>{\n        const failures = [];\n        let representation = null;\n        const ENCODER = new TextEncoder();\n        const tokenizer = new _Tokenizer_index_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        const parser = _SimpleParser_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            path: \"Module\",\n            imports: _Tests_Shared_index_mjs__WEBPACK_IMPORTED_MODULE_4__.SIMPLE_IMPORTS\n        });\n        parser.on(_SimpleParser_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EVENT_FAIL, (failure)=>{\n            failures = [\n                ...failures,\n                failure\n            ];\n            representation = null;\n        });\n        parser.on(_SimpleParser_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EVENT_DONE, (data)=>{\n            representation = data;\n        });\n        tokenizer.on(\"token\", (position, array, index, length)=>{\n            parser.feed(position, array, index, length);\n        });\n        tokenizer.feed(ENCODER.encode(value));\n        tokenizer.done();\n        parser.done();\n        if (representation) {\n            const compilerOptions = Object.freeze({\n                memory: true\n            });\n            const [glue, module] = _Compilers_SimplerWASM_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].compile(representation, compilerOptions);\n            execute(glue, module).then((res)=>{\n                resolve(res);\n            }).catch((err)=>{\n                reject(err);\n            });\n        } else {\n            //couldn't parse, return parsing errors\n            reject(failures);\n        }\n    });\nconst module = {\n    run,\n    Parser: _SimpleParser_index_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Tokenizer: _Tokenizer_index_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    Compiler: _Compilers_SimplerWASM_index_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    MemoryManager: _Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__.createMemoryManager,\n    Draw: _Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__.createDrawer,\n    Dates: _Compilers_MemoryManager_index_mjs__WEBPACK_IMPORTED_MODULE_3__.createDate,\n    SIMPLE_IMPORTS: _Tests_Shared_index_mjs__WEBPACK_IMPORTED_MODULE_4__.SIMPLE_IMPORTS\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvQG11bmV6ZXJvL2Zsb3BhcnNlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEM7QUFDQTtBQUNXO0FBS1o7QUFDYTtBQUUxRCxNQUFNVSxVQUFVLENBQUNDLE1BQU1DLFNBQ3JCLElBQUlDLFFBQVEsT0FBT0MsU0FBU0M7UUFDMUIsSUFBSUM7UUFFSixNQUFNQyxVQUFVLEVBQUU7UUFFbEIsS0FBSyxNQUFNLENBQUNDLE1BQU1DLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDVixLQUFLVyxVQUFVLEVBQUc7WUFDM0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRSxHQUFHTDtZQUN2QixJQUFJSSxTQUFTLFVBQVVDLFNBQVMsVUFBVTtnQkFDeENSLE1BQU1FO2dCQUNOO1lBQ0Y7UUFDRjtRQUVBLElBQUlGLEtBQUs7WUFDUCxJQUFJO2dCQUNGLE1BQU1TLFNBQVMsSUFBSUMsWUFBWUMsTUFBTSxDQUFDO29CQUNwQ0MsU0FBUztnQkFDWDtnQkFFQSxNQUFNQyxRQUFRekIsdUZBQWFBLENBQUNxQjtnQkFDNUIsTUFBTUssU0FBU3hCLGdGQUFJQSxDQUFDbUIsUUFBUVI7Z0JBQzVCLE1BQU1jLFFBQVF2Qiw4RUFBS0E7Z0JBRW5CLE1BQU13QixxQkFBcUJaLE9BQU9hLE1BQU0sQ0FBQztvQkFDdkNDLFNBQVMsQ0FBQztnQkFDWjtnQkFFQSxNQUFNQyxlQUFlO2dCQUVyQmYsT0FBT2dCLElBQUksQ0FBQ3pCLEtBQUt1QixPQUFPLEVBQUVHLE9BQU8sQ0FBQyxDQUFDQztvQkFDakMsSUFBSVQsS0FBSyxDQUFDUyxVQUFVLEVBQUU7d0JBQ3BCTixtQkFBbUJFLE9BQU8sQ0FBQ0ksVUFBVSxHQUFHVCxLQUFLLENBQUNTLFVBQVU7b0JBQzFEO29CQUNBLElBQUlSLE1BQU0sQ0FBQ1EsVUFBVSxFQUFFO3dCQUNyQk4sbUJBQW1CRSxPQUFPLENBQUNJLFVBQVUsR0FBR1IsTUFBTSxDQUFDUSxVQUFVO29CQUMzRDtvQkFDQSxJQUFJUCxLQUFLLENBQUNPLFVBQVUsRUFBRTt3QkFDcEJOLG1CQUFtQkUsT0FBTyxDQUFDSSxVQUFVLEdBQUdQLEtBQUssQ0FBQ08sVUFBVTtvQkFDMUQ7b0JBQ0EsSUFBSUEsY0FBY0gsY0FBYzt3QkFDOUJILG1CQUFtQkUsT0FBTyxDQUFDSSxVQUFVLEdBQUdiO29CQUMxQztnQkFDRjtnQkFFQSxNQUFNYyxpQkFBaUIsTUFBTWIsWUFBWWMsT0FBTyxDQUFDNUI7Z0JBQ2pELE1BQU02QixpQkFBaUIsTUFBTWYsWUFBWWdCLFdBQVcsQ0FDbERILGdCQUNBUDtnQkFHRixNQUFNVyxZQUFZRixlQUFlRyxPQUFPLENBQUM1QixJQUFJO2dCQUU3QyxJQUFJMkIsV0FBVztvQkFDYixJQUFJeEIsUUFBUXdCO29CQUVaN0IsUUFBUUc7Z0JBQ1Y7WUFDRixFQUFFLE9BQU80QixHQUFHO2dCQUNWOUIsT0FBTztvQkFDTDt3QkFDRStCLFNBQVNELEVBQUVDLE9BQU87d0JBQ2xCQyxNQUFNO3dCQUNOQyxVQUFVO3dCQUNWQyxRQUFRO29CQUNWO2lCQUNEO1lBQ0g7UUFDRixPQUFPO1lBQ0xsQyxPQUFPO2dCQUNMO29CQUNFK0IsU0FDRTtvQkFDRkMsTUFBTTtvQkFDTkMsVUFBVTtvQkFDVkMsUUFBUTtnQkFDVjthQUNEO1FBQ0g7SUFDRjtBQUVGLE1BQU1DLE1BQU0sQ0FBQy9CLFFBQ1gsSUFBSU4sUUFBUSxPQUFPQyxTQUFTQztRQUMxQixNQUFNb0MsV0FBVyxFQUFFO1FBQ25CLElBQUlDLGlCQUFpQjtRQUVyQixNQUFNQyxVQUFVLElBQUlDO1FBRXBCLE1BQU1DLFlBQVksSUFBSXZELDREQUFTQTtRQUUvQixNQUFNd0QsU0FBU3ZELCtEQUFNQSxDQUFDd0QsTUFBTSxDQUFDO1lBQzNCakMsTUFBTTtZQUNOVSxTQUFTekIsbUVBQWNBO1FBQ3pCO1FBRUErQyxPQUFPRSxFQUFFLENBQUN6RCwrREFBTUEsQ0FBQzBELFVBQVUsRUFBRSxDQUFDQztZQUM1QlQsV0FBVzttQkFBSUE7Z0JBQVVTO2FBQVE7WUFDakNSLGlCQUFpQjtRQUNuQjtRQUVBSSxPQUFPRSxFQUFFLENBQUN6RCwrREFBTUEsQ0FBQzRELFVBQVUsRUFBRSxDQUFDQztZQUM1QlYsaUJBQWlCVTtRQUNuQjtRQUVBUCxVQUFVRyxFQUFFLENBQUMsU0FBUyxDQUFDVixVQUFVZSxPQUFPQyxPQUFPZjtZQUM3Q08sT0FBT1MsSUFBSSxDQUFDakIsVUFBVWUsT0FBT0MsT0FBT2Y7UUFDdEM7UUFFQU0sVUFBVVUsSUFBSSxDQUFDWixRQUFRYSxNQUFNLENBQUMvQztRQUU5Qm9DLFVBQVVZLElBQUk7UUFFZFgsT0FBT1csSUFBSTtRQUVYLElBQUlmLGdCQUFnQjtZQUNsQixNQUFNZ0Isa0JBQWtCaEQsT0FBT2EsTUFBTSxDQUFDO2dCQUNwQ1IsUUFBUTtZQUNWO1lBRUEsTUFBTSxDQUFDZCxNQUFNQyxPQUFPLEdBQUdWLHdFQUFRQSxDQUFDc0MsT0FBTyxDQUFDWSxnQkFBZ0JnQjtZQUV4RDFELFFBQVFDLE1BQU1DLFFBQ1h5RCxJQUFJLENBQUMsQ0FBQ0M7Z0JBQ0x4RCxRQUFRd0Q7WUFDVixHQUNDQyxLQUFLLENBQUMsQ0FBQ0M7Z0JBQ056RCxPQUFPeUQ7WUFDVDtRQUNKLE9BQU87WUFDTCx1Q0FBdUM7WUFDdkN6RCxPQUFPb0M7UUFDVDtJQUNGO0FBRUYsTUFBTXZDLFNBQVM7SUFDYnNDO0lBQ0FqRCxNQUFNQSxpRUFBQUE7SUFDTkQsU0FBU0EsOERBQUFBO0lBQ1RFLFFBQVFBLDBFQUFBQTtJQUNSRSxhQUFhQSxxRkFBQUE7SUFDYkUsSUFBSUEsOEVBQUFBO0lBQ0pFLEtBQUtBLDRFQUFBQTtJQUNMQyxjQUFjQSxxRUFBQUE7QUFDaEI7QUFFQSxpRUFBZUcsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKQVNPTlxcRGVza3RvcFxcTmV3IGZvbGRlclxcYXBwXFxAbXVuZXplcm9cXGZsb3BhcnNlclxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRva2VuaXplciBmcm9tIFwiLi9Ub2tlbml6ZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgUGFyc2VyIGZyb20gXCIuL1NpbXBsZVBhcnNlci9pbmRleC5tanNcIjtcbmltcG9ydCBDb21waWxlciBmcm9tIFwiLi9Db21waWxlcnMvU2ltcGxlcldBU00vaW5kZXgubWpzXCI7XG5pbXBvcnQge1xuICBjcmVhdGVNZW1vcnlNYW5hZ2VyIGFzIE1lbW9yeU1hbmFnZXIsXG4gIGNyZWF0ZURyYXdlciBhcyBEcmF3LFxuICBjcmVhdGVEYXRlIGFzIERhdGVzLFxufSBmcm9tIFwiLi9Db21waWxlcnMvTWVtb3J5TWFuYWdlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFNJTVBMRV9JTVBPUlRTIH0gZnJvbSBcIi4vVGVzdHMvU2hhcmVkL2luZGV4Lm1qc1wiO1xuXG5jb25zdCBleGVjdXRlID0gKGdsdWUsIG1vZHVsZSkgPT5cbiAgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGxldCBrZXk7XG5cbiAgICBjb25zdCBvdXRwdXRzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IFtpS2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZ2x1ZS5wcm9jZWR1cmVzKSkge1xuICAgICAgY29uc3QgeyBuYW1lLCBwYXRoIH0gPSB2YWx1ZTtcbiAgICAgIGlmIChuYW1lID09PSBcIm1haW5cIiAmJiBwYXRoID09PSBcIk1vZHVsZVwiKSB7XG4gICAgICAgIGtleSA9IGlLZXk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lbW9yeSA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe1xuICAgICAgICAgIGluaXRpYWw6IDEyOCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSBNZW1vcnlNYW5hZ2VyKG1lbW9yeSk7XG4gICAgICAgIGNvbnN0IGRyYXdlciA9IERyYXcobWVtb3J5LCBvdXRwdXRzKTtcbiAgICAgICAgY29uc3QgZGF0ZXMgPSBEYXRlcygpO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW1wb3J0cyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgIGltcG9ydHM6IHt9LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBtZW1vcnlJbXBvcnQgPSBcIm1lbW9yeVwiO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGdsdWUuaW1wb3J0cykuZm9yRWFjaCgoaW1wb3J0S2V5KSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXRlW2ltcG9ydEtleV0pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uSW1wb3J0cy5pbXBvcnRzW2ltcG9ydEtleV0gPSBzdGF0ZVtpbXBvcnRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZHJhd2VyW2ltcG9ydEtleV0pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uSW1wb3J0cy5pbXBvcnRzW2ltcG9ydEtleV0gPSBkcmF3ZXJbaW1wb3J0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRhdGVzW2ltcG9ydEtleV0pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uSW1wb3J0cy5pbXBvcnRzW2ltcG9ydEtleV0gPSBkYXRlc1tpbXBvcnRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW1wb3J0S2V5ID09PSBtZW1vcnlJbXBvcnQpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uSW1wb3J0cy5pbXBvcnRzW2ltcG9ydEtleV0gPSBtZW1vcnk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBtb2R1bGVDb21waWxlZCA9IGF3YWl0IFdlYkFzc2VtYmx5LmNvbXBpbGUobW9kdWxlKTtcbiAgICAgICAgY29uc3QgbW9kdWxlSW5zdGFuY2UgPSBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShcbiAgICAgICAgICBtb2R1bGVDb21waWxlZCxcbiAgICAgICAgICBkZXNjcmlwdGlvbkltcG9ydHNcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBwcm9jZWR1cmUgPSBtb2R1bGVJbnN0YW5jZS5leHBvcnRzW2tleV07XG5cbiAgICAgICAgaWYgKHByb2NlZHVyZSkge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHByb2NlZHVyZSgpO1xuXG4gICAgICAgICAgcmVzb2x2ZShvdXRwdXRzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgICAgIHR5cGU6IDEwMCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAwLFxuICAgICAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoW1xuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgIFwiRXJyb3I6IE1pc3NpbmcgbWFpbiBmdW5jdGlvbi4gRXZlcnkgRmxvZ3JhbSBwcm9ncmFtIG11c3QgaW5jbHVkZSBhbiBlbnRyeSBwb2ludCBkZWZpbmVkIGFzIHRoZSBtYWluIGZ1bmN0aW9uLlwiLFxuICAgICAgICAgIHR5cGU6IDEwMSxcbiAgICAgICAgICBwb3NpdGlvbjogMCxcbiAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9XG4gIH0pO1xuXG5jb25zdCBydW4gPSAodmFsdWUpID0+XG4gIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBmYWlsdXJlcyA9IFtdO1xuICAgIGxldCByZXByZXNlbnRhdGlvbiA9IG51bGw7XG5cbiAgICBjb25zdCBFTkNPREVSID0gbmV3IFRleHRFbmNvZGVyKCk7XG5cbiAgICBjb25zdCB0b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKCk7XG5cbiAgICBjb25zdCBwYXJzZXIgPSBQYXJzZXIuY3JlYXRlKHtcbiAgICAgIHBhdGg6IFwiTW9kdWxlXCIsXG4gICAgICBpbXBvcnRzOiBTSU1QTEVfSU1QT1JUUyxcbiAgICB9KTtcblxuICAgIHBhcnNlci5vbihQYXJzZXIuRVZFTlRfRkFJTCwgKGZhaWx1cmUpID0+IHtcbiAgICAgIGZhaWx1cmVzID0gWy4uLmZhaWx1cmVzLCBmYWlsdXJlXTtcbiAgICAgIHJlcHJlc2VudGF0aW9uID0gbnVsbDtcbiAgICB9KTtcblxuICAgIHBhcnNlci5vbihQYXJzZXIuRVZFTlRfRE9ORSwgKGRhdGEpID0+IHtcbiAgICAgIHJlcHJlc2VudGF0aW9uID0gZGF0YTtcbiAgICB9KTtcblxuICAgIHRva2VuaXplci5vbihcInRva2VuXCIsIChwb3NpdGlvbiwgYXJyYXksIGluZGV4LCBsZW5ndGgpID0+IHtcbiAgICAgIHBhcnNlci5mZWVkKHBvc2l0aW9uLCBhcnJheSwgaW5kZXgsIGxlbmd0aCk7XG4gICAgfSk7XG5cbiAgICB0b2tlbml6ZXIuZmVlZChFTkNPREVSLmVuY29kZSh2YWx1ZSkpO1xuXG4gICAgdG9rZW5pemVyLmRvbmUoKTtcblxuICAgIHBhcnNlci5kb25lKCk7XG5cbiAgICBpZiAocmVwcmVzZW50YXRpb24pIHtcbiAgICAgIGNvbnN0IGNvbXBpbGVyT3B0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBtZW1vcnk6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgW2dsdWUsIG1vZHVsZV0gPSBDb21waWxlci5jb21waWxlKHJlcHJlc2VudGF0aW9uLCBjb21waWxlck9wdGlvbnMpO1xuXG4gICAgICBleGVjdXRlKGdsdWUsIG1vZHVsZSlcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vY291bGRuJ3QgcGFyc2UsIHJldHVybiBwYXJzaW5nIGVycm9yc1xuICAgICAgcmVqZWN0KGZhaWx1cmVzKTtcbiAgICB9XG4gIH0pO1xuXG5jb25zdCBtb2R1bGUgPSB7XG4gIHJ1bixcbiAgUGFyc2VyLFxuICBUb2tlbml6ZXIsXG4gIENvbXBpbGVyLFxuICBNZW1vcnlNYW5hZ2VyLFxuICBEcmF3LFxuICBEYXRlcyxcbiAgU0lNUExFX0lNUE9SVFMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtb2R1bGU7XG4iXSwibmFtZXMiOlsiVG9rZW5pemVyIiwiUGFyc2VyIiwiQ29tcGlsZXIiLCJjcmVhdGVNZW1vcnlNYW5hZ2VyIiwiTWVtb3J5TWFuYWdlciIsImNyZWF0ZURyYXdlciIsIkRyYXciLCJjcmVhdGVEYXRlIiwiRGF0ZXMiLCJTSU1QTEVfSU1QT1JUUyIsImV4ZWN1dGUiLCJnbHVlIiwibW9kdWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJrZXkiLCJvdXRwdXRzIiwiaUtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInByb2NlZHVyZXMiLCJuYW1lIiwicGF0aCIsIm1lbW9yeSIsIldlYkFzc2VtYmx5IiwiTWVtb3J5IiwiaW5pdGlhbCIsInN0YXRlIiwiZHJhd2VyIiwiZGF0ZXMiLCJkZXNjcmlwdGlvbkltcG9ydHMiLCJmcmVlemUiLCJpbXBvcnRzIiwibWVtb3J5SW1wb3J0Iiwia2V5cyIsImZvckVhY2giLCJpbXBvcnRLZXkiLCJtb2R1bGVDb21waWxlZCIsImNvbXBpbGUiLCJtb2R1bGVJbnN0YW5jZSIsImluc3RhbnRpYXRlIiwicHJvY2VkdXJlIiwiZXhwb3J0cyIsImUiLCJtZXNzYWdlIiwidHlwZSIsInBvc2l0aW9uIiwibGVuZ3RoIiwicnVuIiwiZmFpbHVyZXMiLCJyZXByZXNlbnRhdGlvbiIsIkVOQ09ERVIiLCJUZXh0RW5jb2RlciIsInRva2VuaXplciIsInBhcnNlciIsImNyZWF0ZSIsIm9uIiwiRVZFTlRfRkFJTCIsImZhaWx1cmUiLCJFVkVOVF9ET05FIiwiZGF0YSIsImFycmF5IiwiaW5kZXgiLCJmZWVkIiwiZW5jb2RlIiwiZG9uZSIsImNvbXBpbGVyT3B0aW9ucyIsInRoZW4iLCJyZXMiLCJjYXRjaCIsImVyciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/@munezero/floparser/index.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.jsx&appDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJASON%5CDesktop%5CNew%20folder&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();