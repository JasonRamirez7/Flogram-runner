"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/@munezero/floparser/Compilers/MemoryManager/index.mjs":
/*!*******************************************************************!*\
  !*** ./app/@munezero/floparser/Compilers/MemoryManager/index.mjs ***!
  \*******************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDate: () => (/* binding */ Eo),\n/* harmony export */   createDrawer: () => (/* binding */ _o),\n/* harmony export */   createMemoryManager: () => (/* binding */ To)\n/* harmony export */ });\nvar y = \"as\", Z = \"=\", G = \"break\", D = \"else\", K = \"enum\", V = \"export\", z = \"if\", m = \"import\", k = \"->\", j = \"is\", J = \"loop\", W = \"mut\", Q = \"native\", v = \"object\", X = \"fn\", $ = \"return\", q = \"self\", tt = \"template\", et = Object.freeze({\n    ALIAS: y,\n    ASSIGN: Z,\n    BREAK: G,\n    ELSE: D,\n    ENUMERATION: K,\n    EXPORT: V,\n    IF: z,\n    IMPORT: m,\n    INTO: k,\n    IS: j,\n    LOOP: J,\n    MUTABLE: W,\n    NATIVE: Q,\n    OBJECT: v,\n    PROCEDURE: X,\n    RETURN: $,\n    SELF: q,\n    TEMPLATE: tt\n}), L = et;\nvar ot = \"assign\", nt = \"arity_match\", rt = \"arity_status\", st = \"array_assignment\", ct = \"branch-match\", Tt = \"branch-default\", Et = \"condition\", _t = \"loop\", it = \"data\", pt = \"generics\", xt = \"enumeration\", St = \"expression\", at = \"instance\", ft = \"Link\", At = \"local\", Rt = \"object\", Ot = \"procedure\", It = \"return\", lt = \"compare\", ut = \"select\", Nt = \"member\", Pt = \"store\", Yt = \"break\", dt = \"literal\", Ct = \"array_access\", Lt = \"valueLink\", Mt = \"linkValue\", bt = \"self\", gt = \"procedure-call\", Ut = \"Maybe\", wt = \"native\", ht = \"move\", Bt = \"String\", Ft = \"Array\", Ht = \"import\", yt = \"library\", Zt = \"constructor\", Gt = \"destructor\", Dt = \"free\", Kt = \"block-end\", Vt = \"default-block\", zt = \"continue\", mt = \"branch\", kt = \"statement\", jt = \"draw\", Jt = \"now\", Wt = \"size\", Qt = \"concatenation\", vt = \"foreach\", Xt = \"while\", $t = \"when\", qt = \"while-condition\", te = \"foreach-condition\", ee = \"foreach-end\", oe = \"for\", ne = \"up_to\", re = \"down_to\", se = \"almost_up_to\", ce = \"almost_down_to\", Te = \"I32\", Ee = \"U32\", _e = \"FP32\", ie = \"I16\", pe = \"U16\", xe = \"U8\", Se = \"I8\", ae = \"FP64\", fe = \"U64\", Ae = \"I64\", Re = \"Char\", Oe = \"block-start\", Ie = \"function-call\", le = \"Bool\", ue = Object.freeze({\n    TYPES_ASSIGN: ot,\n    TYPES_ARRAY: Ft,\n    TYPES_ARITY_MATCH: nt,\n    TYPES_ARITY_STATUS: rt,\n    TYPES_ARRAY_ASSIGNMENT: st,\n    TYPES_BRANCH_MATCH: ct,\n    TYPES_BRANCH_DEFAULT: Tt,\n    TYPES_CONDITION: Et,\n    TYPES_LOOP: _t,\n    TYPES_FOREACH_END: ee,\n    TYPES_WHILE_CONDITION: qt,\n    TYPES_FOREACH_CONDITION: te,\n    TYPES_DATA: it,\n    TYPES_COMPARE: lt,\n    TYPES_GENERICS: pt,\n    TYPES_ENUMERATION: xt,\n    TYPES_EXPRESSION: St,\n    TYPES_INSTANCE: at,\n    TYPES_LINK: ft,\n    TYPES_IMPORT: Ht,\n    TYPES_LOCAL: At,\n    TYPES_OBJECT: Rt,\n    TYPES_PROCEDURE: Ot,\n    TYPES_RETURN: It,\n    TYPES_SELECT: ut,\n    TYPES_MEMBER: Nt,\n    TYPES_STORE: Pt,\n    TYPES_BREAK: Yt,\n    TYPES_LITERAL: dt,\n    TYPES_ARRAY_ACCESS: Ct,\n    TYPES_LINK_TO: Lt,\n    TYPES_VALUE_AT: Mt,\n    TYPES_SELF: bt,\n    TYPES_LIBRARY: yt,\n    TYPES_DROP: gt,\n    TYPES_MAYBE: Ut,\n    TYPES_NATIVE: wt,\n    TYPES_MOVE: ht,\n    TYPES_STRING: Bt,\n    TYPES_CONSTRUCTOR: Zt,\n    TYPES_FREE: Dt,\n    TYPES_DEFAULT_BLOCK: Vt,\n    TYPES_BLOCK_END: Kt,\n    TYPES_CONTINUE: zt,\n    TYPES_BRANCH: mt,\n    TYPES_STATEMENT: kt,\n    TYPES_DESTRUCTOR: Gt,\n    TYPES_DRAW: jt,\n    TYPES_NOW: Jt,\n    TYPES_SIZE: Wt,\n    TYPES_CONCAT: Qt,\n    TYPES_FOREACH: vt,\n    TYPES_WHILE: Xt,\n    TYPES_WHEN: $t,\n    TYPES_FOR: oe,\n    TYPES_UP_TO: ne,\n    TYPES_DOWN_TO: re,\n    TYPES_ALMOST_UP_TO: se,\n    TYPES_ALMOST_DOWN_TO: ce,\n    TYPES_I32: Te,\n    TYPES_FP32: _e,\n    TYPES_FP64: ae,\n    TYPES_U32: Ee,\n    TYPES_I64: Ae,\n    TYPES_U64: fe,\n    TYPES_I16: ie,\n    TYPES_U16: pe,\n    TYPES_I8: Se,\n    TYPES_U8: xe,\n    TYPES_CHAR: Re,\n    TYPES_BOOL: le,\n    TYPES_BLOCK_BEGIN: Oe,\n    TYPES_FUNCTION_CALL: Ie\n}), M = ue;\nvar Ne = Object.freeze({\n    COLON: 58,\n    COMMA: 44,\n    DIGIT_ZERO: 48,\n    DIGIT_NINE: 57,\n    DOT: 46,\n    HASHTAG: 35,\n    HORIZONTAL_TAB: 9,\n    HYPHEN_MINUS: 45,\n    LEFT_CURLY_BRACKET: 123,\n    LEFT_PARENTHESIS: 40,\n    LEFT_SQUARE_BRACKET: 91,\n    LINE_BREAK: 10,\n    NULL: 0,\n    PLUS_SIGN: 43,\n    RIGHT_CURLY_BRACKET: 125,\n    RIGHT_PARENTHESIS: 41,\n    RIGHT_SQUARE_BRACKET: 93,\n    SEMICOLON: 59,\n    SPACE: 32,\n    E_SIGN: 101\n}), b = Ne;\nvar Pe = \"assignment\", Ye = \"Flogram\", de = Object.freeze({\n    K_ASSIGNMENT: Pe,\n    K_FLOGRAM: Ye\n}), g = de;\nvar Ce = Object.freeze([\n    [\n        43\n    ],\n    [\n        45\n    ],\n    [\n        42\n    ],\n    [\n        47\n    ],\n    [\n        37\n    ],\n    [\n        110,\n        111,\n        116\n    ],\n    [\n        60\n    ],\n    [\n        62\n    ],\n    [\n        94\n    ],\n    [\n        111,\n        114\n    ],\n    [\n        33\n    ],\n    [\n        61,\n        61\n    ],\n    [\n        60,\n        61\n    ],\n    [\n        62,\n        61\n    ],\n    [\n        33,\n        61\n    ],\n    [\n        120,\n        111,\n        114\n    ],\n    [\n        97,\n        110,\n        100\n    ]\n]), Le = Ce, U = Le;\nvar Me = Object.freeze({\n    INT_ARRAY_START: 9999991,\n    FLOAT_ARRAY_START: 9999981,\n    STRING_START: 8888891,\n    CHAR_START: 8888881,\n    NAT_ON_HORIZON: 7777791,\n    BIG_NAT_ON_HORIZON: 7777591,\n    FLOAT_ON_HORIZON: 7777771,\n    BIG_FLOAT_ON_HORIZON: 7777731,\n    END_OF_LINE: 66666661\n}), w = Me;\nvar be = Object.freeze({\n    ENUM_MEMORY_SIZE: 12,\n    ENUM_STACK_SIZE: 3,\n    ARRAY_MEMORY_SIZE: 12,\n    ARRAY_STACK_SIZE: 3,\n    ARRAY_DEFAULT_CAPACITY: 4,\n    STRING_MEMORY_SIZE: 8,\n    STRING_STACK_SIZE: 2,\n    OBJECT_MEMORY_SIZE: 8,\n    OBJECT_STACK_SIZE: 2,\n    NATIVE_MEMORY_SIZE: 4,\n    NATIVE_STACK_SIZE: 1,\n    NATIVE_SIZE: 4,\n    STEP: 4,\n    DOUBLE_STEP: 8,\n    TRIPPLE_STEP: 12\n}), h = be;\nvar ge = Object.freeze([]), Ue = Object.freeze({}), we = \"\", he = \"\t\", Be = \"\\n\", Fe = \"UTF-8\";\nvar He = Object.freeze({\n    EMPTY_ARRAY: ge,\n    EMPTY_OBJECT: Ue,\n    EMPTY_STRING: we,\n    HORIZONTAL_TAB: he,\n    LINE_BREAK: Be,\n    UNICODE_TEXT: Fe,\n    Codes: b,\n    Keys: L,\n    Types: M,\n    Keywords: g,\n    Operators: U,\n    DrawStates: w,\n    Sizes: h\n}), B = He;\nvar { INT_ARRAY_START: ye, FLOAT_ARRAY_START: F, STRING_START: H, CHAR_START: Ze, END_OF_LINE: Ge, NAT_ON_HORIZON: De, BIG_NAT_ON_HORIZON: Ke, FLOAT_ON_HORIZON: Ve, BIG_FLOAT_ON_HORIZON: ze } = B.DrawStates;\nfunction To(r) {\n    let c = [\n        {\n            start: r.buffer.byteLength / 2,\n            size: r.buffer.byteLength / 2\n        }\n    ], E = new Map(), x = [], S = [];\n    function _() {\n        return c;\n    }\n    function A() {\n        return E;\n    }\n    function R(e) {\n        let o = 0;\n        for(; o < c.length && c[o].start < e.start;)o++;\n        c.splice(o, 0, e);\n    }\n    let O;\n    function Y(e) {\n        O === void 0 ? O = e : (S.push({\n            first: O,\n            second: e\n        }), O = void 0);\n    }\n    function d() {\n        if (!S.length) return [\n            0,\n            0\n        ];\n        let e = S.pop();\n        return [\n            e.first,\n            e.second\n        ];\n    }\n    function I() {\n        if (S.length < 2) return [\n            0,\n            0\n        ];\n        let [e] = S.splice(S.length - 2, 1);\n        return [\n            e.first,\n            e.second\n        ];\n    }\n    function s(e) {\n        let o = E.get(e);\n        if (!o) throw new Error(\"Invalid pointer: \" + e);\n        let t = i(o.size), p = new Uint8Array(r.buffer, e, o.size);\n        return new Uint8Array(r.buffer, t, o.size).set(p), t;\n    }\n    function T() {\n        let e = Array.from(E.entries());\n        if (e.length < 2) return;\n        let [o, t] = e[e.length - 2], [p, n] = e[e.length - 1];\n    }\n    function i(e) {\n        for(let t = 0; t < c.length; t++)if (c[t].size >= e) {\n            let p = c.splice(t, 1);\n            if (p.length > 0) {\n                let n = p[0];\n                if (n.size > e) {\n                    let C = {\n                        start: n.start + e,\n                        size: n.size - e\n                    };\n                    R(C);\n                }\n                return n.size = e, E.set(n.start, n), n.start;\n            }\n        }\n        if (r.buffer.byteLength + e > r.buffer.byteLength * r.buffer.byteLength / 65536) {\n            let t = Math.ceil(e / 65536);\n            r.grow(t);\n        }\n        let o = {\n            start: r.buffer.byteLength,\n            size: e\n        };\n        return E.set(o.start, o), o.start;\n    }\n    function f(e) {\n        let o = E.get(e);\n        if (!o) {\n            console.error(\"Unable to find block\");\n            return;\n        }\n        E.delete(e);\n        for(let t = 0; t < c.length; t++)c[t].start + c[t].size === o.start ? (o.start = c[t].start, o.size += c[t].size, c.splice(t, 1), t--) : o.start + o.size === c[t].start && (o.size += c[t].size, c.splice(t, 1), t--);\n        R(o);\n    }\n    function a(e) {\n        return x.find((o)=>o.dataPtr === e);\n    }\n    function l(e) {\n        let o = i(4 * e).start, t = {\n            dataPtr: o,\n            length: 0,\n            capacity: 4,\n            elementTypeSize: e\n        };\n        return x.push(t), o;\n    }\n    function u(e, o) {\n        let t = a(e);\n        if (!t) throw new Error(\"Vector not found\");\n        if (t.length >= t.capacity) {\n            let n = t.dataPtr;\n            t.dataPtr = i(2 * t.capacity * t.elementTypeSize).start, t.capacity *= 2;\n            let C = new Uint8Array(r.buffer, n, t.length * t.elementTypeSize);\n            new Uint8Array(r.buffer, t.dataPtr, t.capacity * t.elementTypeSize).set(C), f(n);\n        }\n        let p = new Uint8Array(r.buffer, t.dataPtr + t.length * t.elementTypeSize, t.elementTypeSize);\n        for(let n = 0; n < t.elementTypeSize; n++)p[n] = o >> n * 8 & 255;\n        t.length += 1;\n    }\n    function N(e) {\n        let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;\n        let t = i(o), p = new Uint8Array(r.buffer, t.start, o);\n        for(let n = 0; n < o; n++)p[n] = e >> n * 8 & 255;\n        return t.start;\n    }\n    function P(e) {\n        let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;\n        let t = new Uint8Array(r.buffer, e, o), p = 0;\n        for(let n = 0; n < o; n++)p |= t[n] << n * 8;\n        return p;\n    }\n    return {\n        alloc: i,\n        dealloc: f,\n        merge: T,\n        save: Y,\n        undo: d,\n        undoPenultimate: I,\n        createVector: l,\n        pushToVector: u,\n        allocateValue: N,\n        readValue: P,\n        getFreeList: _,\n        getUsedBlocks: A,\n        copy: s\n    };\n}\n_c = To;\nfunction Eo() {\n    function r() {\n        return BigInt(Date.now());\n    }\n    return {\n        now: r\n    };\n}\n_c1 = Eo;\nfunction _o(r) {\n    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;\n    let E = [], x = \"default\", S, _, A, R, O;\n    function Y(s, T, i) {\n        let f;\n        return i === F ? f = new Float32Array(r.buffer, s, T) : f = new Int32Array(r.buffer, s, T), Array.from(f);\n    }\n    function d(s, T) {\n        let i = new Int32Array(r.buffer, s, T), f = new Float32Array(r.buffer, s, T), a = \"\", l = !1, u = !1, N = !1, P = !1;\n        for(let e = 0; e < i.length; e++){\n            let o = i[e];\n            if (l) {\n                a += o.toString(), l = !1;\n                continue;\n            }\n            if (u) {\n                a += f[e].toString(), u = !1;\n                continue;\n            }\n            if (N) {\n                let t = o, p = i[e + 1], n = BigInt(t) + (BigInt(p) << 32n);\n                a += n.toString(), N = !1, e++;\n                continue;\n            }\n            if (P) {\n                let t = new Float64Array(r.buffer, s + e * 4, 1);\n                a += t[0].toString(), P = !1, e++;\n                continue;\n            }\n            if (o === De) {\n                l = !0;\n                continue;\n            }\n            if (o === Ve) {\n                u = !0;\n                continue;\n            }\n            if (o === Ke) {\n                N = !0;\n                continue;\n            }\n            if (o === ze) {\n                P = !0;\n                continue;\n            }\n            o >= 32 && o <= 126 ? a += String.fromCharCode(o) : a += o.toString();\n        }\n        return a;\n    }\n    function I(s) {\n        if (s === Ge) {\n            if (E.length > 0) {\n                let T = E.join(\" \");\n                // if (c) {\n                //   let i = document.createElement(\"p\");\n                //   (i.innerHTML = T), c.appendChild(i);\n                // } else console.log(T);\n                // E = [];\n                return T;\n            }\n            return;\n        }\n        if (x === \"default\") {\n            if (s === ye || s === F) {\n                x = \"array\", O = s, S = void 0, _ = void 0;\n                return;\n            }\n            if (s === H) {\n                x = \"string\", A = void 0, _ = void 0;\n                return;\n            }\n            if (s === Ze) {\n                x = \"char\", R = void 0;\n                return;\n            }\n            E.push(s);\n        } else if (x === \"array\") {\n            if (_ == null) {\n                _ = s;\n                return;\n            }\n            if (!S) {\n                S = s;\n                let T = Y(S, _, O);\n                E.push(T), S = void 0, _ = void 0, x = \"default\";\n            }\n        } else if (x === \"string\") {\n            if (s === H) return;\n            if (_ == null) {\n                _ = s;\n                return;\n            }\n            if (!A) {\n                A = s;\n                let T = d(A, _);\n                E.push(T), A = void 0, _ = void 0, x = \"default\";\n            }\n        } else if (x === \"char\" && !R) {\n            R = s;\n            let T = String.fromCharCode(R);\n            E.push(\"\".concat(T)), x = \"default\";\n        }\n    }\n    return {\n        draw: I,\n        drawI64: I,\n        drawFP32: I,\n        drawFP64: I,\n        receiveParams: I,\n        readArrayFromMemory: Y\n    };\n}\n\nvar _c, _c1;\n$RefreshReg$(_c, \"To\");\n$RefreshReg$(_c1, \"Eo\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/@munezero/floparser/Compilers/MemoryManager/index.mjs\n"));

/***/ })

});